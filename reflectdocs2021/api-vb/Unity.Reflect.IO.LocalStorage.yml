### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.IO.LocalStorage
  commentId: T:Unity.Reflect.IO.LocalStorage
  id: LocalStorage
  parent: Unity.Reflect.IO
  children:
  - Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  - Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  - Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  - Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  - Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  - Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  - Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  - Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  - Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  - Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  - Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  - Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  - Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  - Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  - Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  - Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  - Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  - Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: LocalStorage
  nameWithType: LocalStorage
  fullName: Unity.Reflect.IO.LocalStorage
  type: Class
  source:
    id: LocalStorage
    path: ''
    startLine: 20314
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nThis class helps manage Reflect projects in local storage.\n"
  example: []
  syntax:
    content: 'public class LocalStorage : IStorage'
    content.vb: >-
      Public Class LocalStorage
          Implements IStorage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LocalStorage(String)
  nameWithType: LocalStorage.LocalStorage(String)
  fullName: Unity.Reflect.IO.LocalStorage.LocalStorage(System.String)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 163
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nCreates the local storage\n"
  example: []
  syntax:
    content: public LocalStorage(string root)
    parameters:
    - id: root
      type: System.String
      description: The path of the root folder (which will hold all the Reflect projects)
    content.vb: Public Sub New(root As String)
  overload: Unity.Reflect.IO.LocalStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  commentId: M:Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  id: OpenOrCreateManifest
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: OpenOrCreateManifest()
  nameWithType: LocalStorage.OpenOrCreateManifest()
  fullName: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest()
  type: Method
  source:
    id: OpenOrCreateManifest
    path: ''
    startLine: 172
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nOpens or creates a manifest for the root folder.\n"
  example: []
  syntax:
    content: public SyncManifest OpenOrCreateManifest()
    return:
      type: SyncManifest
      description: A manifest that manages the root folder
    content.vb: Public Function OpenOrCreateManifest As SyncManifest
  overload: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  commentId: M:Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  id: SaveManifest(System.String,System.String,SyncManifest)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: SaveManifest(String, String, SyncManifest)
  nameWithType: LocalStorage.SaveManifest(String, String, SyncManifest)
  fullName: Unity.Reflect.IO.LocalStorage.SaveManifest(System.String, System.String, SyncManifest)
  type: Method
  source:
    id: SaveManifest
    path: ''
    startLine: 206
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nSave a manifest in a specific source project.\n"
  example: []
  syntax:
    content: public void SaveManifest(string projectId, string sourceId, SyncManifest syncManifest)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    - id: syncManifest
      type: SyncManifest
      description: The manifest to save
    content.vb: Public Sub SaveManifest(projectId As String, sourceId As String, syncManifest As SyncManifest)
  overload: Unity.Reflect.IO.LocalStorage.SaveManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  id: LoadProjectManifests(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LoadProjectManifests(String)
  nameWithType: LocalStorage.LoadProjectManifests(String)
  fullName: Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  type: Method
  source:
    id: LoadProjectManifests
    path: ''
    startLine: 218
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads all the local source projects in a specific Unity Project.\n"
  example: []
  syntax:
    content: public IEnumerable<SourceProject> LoadProjectManifests(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    return:
      type: IEnumerable{Unity.Reflect.IO.SourceProject}
      description: All the source projects that are locally stored in the provided Unity Project.
    content.vb: Public Function LoadProjectManifests(projectId As String) As IEnumerable(Of SourceProject)
  overload: Unity.Reflect.IO.LocalStorage.LoadProjectManifests*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  id: GetLocalSourceProjectIds(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetLocalSourceProjectIds(String)
  nameWithType: LocalStorage.GetLocalSourceProjectIds(String)
  fullName: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  type: Method
  source:
    id: GetLocalSourceProjectIds
    path: ''
    startLine: 239
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets all the IDs of all the source projects that are locally stored in an Unity Project.\n"
  example: []
  syntax:
    content: public string[] GetLocalSourceProjectIds(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity project ID
    return:
      type: System.String[]
      description: An array of source project IDs
    content.vb: Public Function GetLocalSourceProjectIds(projectId As String) As String()
  overload: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  id: LoadManifest(System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LoadManifest(String, String)
  nameWithType: LocalStorage.LoadManifest(String, String)
  fullName: Unity.Reflect.IO.LocalStorage.LoadManifest(System.String, System.String)
  type: Method
  source:
    id: LoadManifest
    path: ''
    startLine: 252
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads the manifest for a locally stored source project in an Unity Project.\n"
  example: []
  syntax:
    content: public SyncManifest LoadManifest(string projectId, string sourceId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    return:
      type: SyncManifest
      description: The source project&apos;s manifest
    content.vb: Public Function LoadManifest(projectId As String, sourceId As String) As SyncManifest
  overload: Unity.Reflect.IO.LocalStorage.LoadManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  id: Sanitize(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Sanitize(String)
  nameWithType: LocalStorage.Sanitize(String)
  fullName: Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  type: Method
  source:
    id: Sanitize
    path: ''
    startLine: 263
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nSanitizes the file name.\n"
  example: []
  syntax:
    content: public string Sanitize(string name)
    parameters:
    - id: name
      type: System.String
      description: A file name to sanitize (without extension)
    return:
      type: System.String
      description: A sanitized file name
    content.vb: Public Function Sanitize(name As String) As String
  overload: Unity.Reflect.IO.LocalStorage.Sanitize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  id: Store(ISyncModel,System.String,System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Store(ISyncModel, String, String, String)
  nameWithType: LocalStorage.Store(ISyncModel, String, String, String)
  fullName: Unity.Reflect.IO.LocalStorage.Store(ISyncModel, System.String, System.String, System.String)
  type: Method
  source:
    id: Store
    path: ''
    startLine: 277
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nStores a model in a locally stored Source project.\n"
  example: []
  syntax:
    content: public string Store(ISyncModel syncModel, string projectId, string sourceId, string relativePath)
    parameters:
    - id: syncModel
      type: ISyncModel
      description: The model to store
    - id: projectId
      type: System.String
      description: The Unity project ID
    - id: sourceId
      type: System.String
    - id: relativePath
      type: System.String
      description: The relative path of the model
    return:
      type: System.String
      description: A hash of the created (or overwritten) file&apos;s absolute path
    content.vb: Public Function Store(syncModel As ISyncModel, projectId As String, sourceId As String, relativePath As String) As String
  overload: Unity.Reflect.IO.LocalStorage.Store*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  id: Load``1(System.String,System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Load<T>(String, String, String)
  nameWithType: LocalStorage.Load<T>(String, String, String)
  fullName: Unity.Reflect.IO.LocalStorage.Load<T>(System.String, System.String, System.String)
  type: Method
  source:
    id: Load
    path: ''
    startLine: 300
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads a model from a locally stored source project.\n"
  example: []
  syntax:
    content: >-
      public T Load<T>(string projectId, string sourceId, string relativePath)
          where T : class, ISyncModel, IMessage
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    - id: relativePath
      type: System.String
      description: The relative path of the model
    typeParameters:
    - id: T
      description: The type of the model you want to load
    return:
      type: '{T}'
      description: A model of the desired type, created by parsing the locally stored model
    content.vb: Public Function Load(Of T As {Class, ISyncModel, IMessage})(projectId As String, sourceId As String, relativePath As String) As T
  overload: Unity.Reflect.IO.LocalStorage.Load*
  nameWithType.vb: LocalStorage.Load(Of T)(String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Unity.Reflect.IO.LocalStorage.Load(Of T)(System.String, System.String, System.String)
  name.vb: Load(Of T)(String, String, String)
- uid: Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  id: GetProjectFolder(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetProjectFolder(String)
  nameWithType: LocalStorage.GetProjectFolder(String)
  fullName: Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  type: Method
  source:
    id: GetProjectFolder
    path: ''
    startLine: 312
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets the folder path of a specific Unity Project.\n"
  example: []
  syntax:
    content: public string GetProjectFolder(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    return:
      type: System.String
      description: The folder path of the provided project
    content.vb: Public Function GetProjectFolder(projectId As String) As String
  overload: Unity.Reflect.IO.LocalStorage.GetProjectFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  id: GetSourceProjectFolder(System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetSourceProjectFolder(String, String)
  nameWithType: LocalStorage.GetSourceProjectFolder(String, String)
  fullName: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String, System.String)
  type: Method
  source:
    id: GetSourceProjectFolder
    path: ''
    startLine: 323
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets the folder path of a specific source project in an Unity Project.\n"
  example: []
  syntax:
    content: public string GetSourceProjectFolder(string projectId, string sourcedId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    - id: sourcedId
      type: System.String
    return:
      type: System.String
      description: The folder path of the provided project
    content.vb: Public Function GetSourceProjectFolder(projectId As String, sourcedId As String) As String
  overload: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  id: HasLocalData(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: HasLocalData(String)
  nameWithType: LocalStorage.HasLocalData(String)
  fullName: Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  type: Method
  source:
    id: HasLocalData
    path: ''
    startLine: 332
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nIndicates whether there is local data for a specific Unity Project.\n"
  example: []
  syntax:
    content: public bool HasLocalData(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    return:
      type: System.Boolean
    content.vb: Public Function HasLocalData(projectId As String) As Boolean
  overload: Unity.Reflect.IO.LocalStorage.HasLocalData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LocalStorage(String)
  nameWithType: LocalStorage.LocalStorage(String)
  fullName: Unity.Reflect.IO.LocalStorage.LocalStorage(System.String)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 20322
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nCreates the local storage\n"
  example: []
  syntax:
    content: public LocalStorage(string root)
    parameters:
    - id: root
      type: System.String
      description: The path of the root folder (which will hold all the Reflect projects)
    content.vb: Public Sub New(root As String)
  overload: Unity.Reflect.IO.LocalStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  commentId: M:Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  id: OpenOrCreateManifest
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: OpenOrCreateManifest()
  nameWithType: LocalStorage.OpenOrCreateManifest()
  fullName: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest()
  type: Method
  source:
    id: OpenOrCreateManifest
    path: ''
    startLine: 20331
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nOpens or creates a manifest for the root folder.\n"
  example: []
  syntax:
    content: public SyncManifest OpenOrCreateManifest()
    return:
      type: SyncManifest
      description: A manifest that manages the root folder
    content.vb: Public Function OpenOrCreateManifest As SyncManifest
  overload: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  commentId: M:Unity.Reflect.IO.LocalStorage.SaveManifest(System.String,System.String,SyncManifest)
  id: SaveManifest(System.String,System.String,SyncManifest)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: SaveManifest(String, String, SyncManifest)
  nameWithType: LocalStorage.SaveManifest(String, String, SyncManifest)
  fullName: Unity.Reflect.IO.LocalStorage.SaveManifest(System.String, System.String, SyncManifest)
  type: Method
  source:
    id: SaveManifest
    path: ''
    startLine: 20365
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nSave a manifest in a specific source project.\n"
  example: []
  syntax:
    content: public void SaveManifest(string projectId, string sourceId, SyncManifest syncManifest)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    - id: syncManifest
      type: SyncManifest
      description: The manifest to save
    content.vb: Public Sub SaveManifest(projectId As String, sourceId As String, syncManifest As SyncManifest)
  overload: Unity.Reflect.IO.LocalStorage.SaveManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  id: LoadProjectManifests(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LoadProjectManifests(String)
  nameWithType: LocalStorage.LoadProjectManifests(String)
  fullName: Unity.Reflect.IO.LocalStorage.LoadProjectManifests(System.String)
  type: Method
  source:
    id: LoadProjectManifests
    path: ''
    startLine: 20377
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads all the local source projects in a specific Unity Project.\n"
  example: []
  syntax:
    content: public IEnumerable<SourceProject> LoadProjectManifests(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    return:
      type: IEnumerable{Unity.Reflect.IO.SourceProject}
      description: All the source projects that are locally stored in the provided Unity Project.
    content.vb: Public Function LoadProjectManifests(projectId As String) As IEnumerable(Of SourceProject)
  overload: Unity.Reflect.IO.LocalStorage.LoadProjectManifests*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  id: GetLocalSourceProjectIds(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetLocalSourceProjectIds(String)
  nameWithType: LocalStorage.GetLocalSourceProjectIds(String)
  fullName: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds(System.String)
  type: Method
  source:
    id: GetLocalSourceProjectIds
    path: ''
    startLine: 20398
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets all the IDs of all the source projects that are locally stored in an Unity Project.\n"
  example: []
  syntax:
    content: public string[] GetLocalSourceProjectIds(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity project ID
    return:
      type: System.String[]
      description: An array of source project IDs
    content.vb: Public Function GetLocalSourceProjectIds(projectId As String) As String()
  overload: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.LoadManifest(System.String,System.String)
  id: LoadManifest(System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: LoadManifest(String, String)
  nameWithType: LocalStorage.LoadManifest(String, String)
  fullName: Unity.Reflect.IO.LocalStorage.LoadManifest(System.String, System.String)
  type: Method
  source:
    id: LoadManifest
    path: ''
    startLine: 20411
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads the manifest for a locally stored source project in an Unity Project.\n"
  example: []
  syntax:
    content: public SyncManifest LoadManifest(string projectId, string sourceId)
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    return:
      type: SyncManifest
      description: The source project&apos;s manifest
    content.vb: Public Function LoadManifest(projectId As String, sourceId As String) As SyncManifest
  overload: Unity.Reflect.IO.LocalStorage.LoadManifest*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  id: Sanitize(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Sanitize(String)
  nameWithType: LocalStorage.Sanitize(String)
  fullName: Unity.Reflect.IO.LocalStorage.Sanitize(System.String)
  type: Method
  source:
    id: Sanitize
    path: ''
    startLine: 20422
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nSanitizes the file name.\n"
  example: []
  syntax:
    content: public string Sanitize(string name)
    parameters:
    - id: name
      type: System.String
      description: A file name to sanitize (without extension)
    return:
      type: System.String
      description: A sanitized file name
    content.vb: Public Function Sanitize(name As String) As String
  overload: Unity.Reflect.IO.LocalStorage.Sanitize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Store(ISyncModel,System.String,System.String,System.String)
  id: Store(ISyncModel,System.String,System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Store(ISyncModel, String, String, String)
  nameWithType: LocalStorage.Store(ISyncModel, String, String, String)
  fullName: Unity.Reflect.IO.LocalStorage.Store(ISyncModel, System.String, System.String, System.String)
  type: Method
  source:
    id: Store
    path: ''
    startLine: 20436
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nStores a model in a locally stored Source project.\n"
  example: []
  syntax:
    content: public string Store(ISyncModel syncModel, string projectId, string sourceId, string relativePath)
    parameters:
    - id: syncModel
      type: ISyncModel
      description: The model to store
    - id: projectId
      type: System.String
      description: The Unity project ID
    - id: sourceId
      type: System.String
    - id: relativePath
      type: System.String
      description: The relative path of the model
    return:
      type: System.String
      description: A hash of the created (or overwritten) file&apos;s absolute path
    content.vb: Public Function Store(syncModel As ISyncModel, projectId As String, sourceId As String, relativePath As String) As String
  overload: Unity.Reflect.IO.LocalStorage.Store*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.Load``1(System.String,System.String,System.String)
  id: Load``1(System.String,System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: Load<T>(String, String, String)
  nameWithType: LocalStorage.Load<T>(String, String, String)
  fullName: Unity.Reflect.IO.LocalStorage.Load<T>(System.String, System.String, System.String)
  type: Method
  source:
    id: Load
    path: ''
    startLine: 20459
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nLoads a model from a locally stored source project.\n"
  example: []
  syntax:
    content: >-
      public T Load<T>(string projectId, string sourceId, string relativePath)
          where T : class, ISyncModel, IMessage
    parameters:
    - id: projectId
      type: System.String
      description: The Unity Project ID
    - id: sourceId
      type: System.String
    - id: relativePath
      type: System.String
      description: The relative path of the model
    typeParameters:
    - id: T
      description: The type of the model you want to load
    return:
      type: '{T}'
      description: A model of the desired type, created by parsing the locally stored model
    content.vb: Public Function Load(Of T As {Class, ISyncModel, IMessage})(projectId As String, sourceId As String, relativePath As String) As T
  overload: Unity.Reflect.IO.LocalStorage.Load*
  nameWithType.vb: LocalStorage.Load(Of T)(String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Unity.Reflect.IO.LocalStorage.Load(Of T)(System.String, System.String, System.String)
  name.vb: Load(Of T)(String, String, String)
- uid: Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  id: GetProjectFolder(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetProjectFolder(String)
  nameWithType: LocalStorage.GetProjectFolder(String)
  fullName: Unity.Reflect.IO.LocalStorage.GetProjectFolder(System.String)
  type: Method
  source:
    id: GetProjectFolder
    path: ''
    startLine: 20471
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets the folder path of a specific Unity Project.\n"
  example: []
  syntax:
    content: public string GetProjectFolder(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    return:
      type: System.String
      description: The folder path of the provided project
    content.vb: Public Function GetProjectFolder(projectId As String) As String
  overload: Unity.Reflect.IO.LocalStorage.GetProjectFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String,System.String)
  id: GetSourceProjectFolder(System.String,System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: GetSourceProjectFolder(String, String)
  nameWithType: LocalStorage.GetSourceProjectFolder(String, String)
  fullName: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder(System.String, System.String)
  type: Method
  source:
    id: GetSourceProjectFolder
    path: ''
    startLine: 20482
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nGets the folder path of a specific source project in an Unity Project.\n"
  example: []
  syntax:
    content: public string GetSourceProjectFolder(string projectId, string sourcedId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    - id: sourcedId
      type: System.String
    return:
      type: System.String
      description: The folder path of the provided project
    content.vb: Public Function GetSourceProjectFolder(projectId As String, sourcedId As String) As String
  overload: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  commentId: M:Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  id: HasLocalData(System.String)
  parent: Unity.Reflect.IO.LocalStorage
  langs:
  - csharp
  - vb
  name: HasLocalData(String)
  nameWithType: LocalStorage.HasLocalData(String)
  fullName: Unity.Reflect.IO.LocalStorage.HasLocalData(System.String)
  type: Method
  source:
    id: HasLocalData
    path: ''
    startLine: 20491
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.IO
  summary: "\nIndicates whether there is local data for a specific Unity Project.\n"
  example: []
  syntax:
    content: public bool HasLocalData(string projectId)
    parameters:
    - id: projectId
      type: System.String
      description: The ID of the Unity Project
    return:
      type: System.Boolean
    content.vb: Public Function HasLocalData(projectId As String) As Boolean
  overload: Unity.Reflect.IO.LocalStorage.HasLocalData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Unity.Reflect.IO
  commentId: N:Unity.Reflect.IO
  name: Unity.Reflect.IO
  nameWithType: Unity.Reflect.IO
  fullName: Unity.Reflect.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Unity.Reflect.IO.LocalStorage.#ctor*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.#ctor
  name: LocalStorage
  nameWithType: LocalStorage.LocalStorage
  fullName: Unity.Reflect.IO.LocalStorage.LocalStorage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
  name: OpenOrCreateManifest
  nameWithType: LocalStorage.OpenOrCreateManifest
  fullName: Unity.Reflect.IO.LocalStorage.OpenOrCreateManifest
- uid: SyncManifest
  isExternal: true
  name: SyncManifest
  nameWithType: SyncManifest
  fullName: SyncManifest
- uid: Unity.Reflect.IO.LocalStorage.SaveManifest*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.SaveManifest
  name: SaveManifest
  nameWithType: LocalStorage.SaveManifest
  fullName: Unity.Reflect.IO.LocalStorage.SaveManifest
- uid: Unity.Reflect.IO.LocalStorage.LoadProjectManifests*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.LoadProjectManifests
  name: LoadProjectManifests
  nameWithType: LocalStorage.LoadProjectManifests
  fullName: Unity.Reflect.IO.LocalStorage.LoadProjectManifests
- uid: IEnumerable{Unity.Reflect.IO.SourceProject}
  commentId: '!:IEnumerable{Unity.Reflect.IO.SourceProject}'
  definition: IEnumerable`1
  name: IEnumerable<SourceProject>
  nameWithType: IEnumerable<SourceProject>
  fullName: IEnumerable<Unity.Reflect.IO.SourceProject>
  nameWithType.vb: IEnumerable(Of SourceProject)
  fullName.vb: IEnumerable(Of Unity.Reflect.IO.SourceProject)
  name.vb: IEnumerable(Of SourceProject)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Unity.Reflect.IO.SourceProject
    name: SourceProject
    nameWithType: SourceProject
    fullName: Unity.Reflect.IO.SourceProject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Unity.Reflect.IO.SourceProject
    name: SourceProject
    nameWithType: SourceProject
    fullName: Unity.Reflect.IO.SourceProject
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds
  name: GetLocalSourceProjectIds
  nameWithType: LocalStorage.GetLocalSourceProjectIds
  fullName: Unity.Reflect.IO.LocalStorage.GetLocalSourceProjectIds
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Unity.Reflect.IO.LocalStorage.LoadManifest*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.LoadManifest
  name: LoadManifest
  nameWithType: LocalStorage.LoadManifest
  fullName: Unity.Reflect.IO.LocalStorage.LoadManifest
- uid: Unity.Reflect.IO.LocalStorage.Sanitize*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.Sanitize
  name: Sanitize
  nameWithType: LocalStorage.Sanitize
  fullName: Unity.Reflect.IO.LocalStorage.Sanitize
- uid: Unity.Reflect.IO.LocalStorage.Store*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.Store
  name: Store
  nameWithType: LocalStorage.Store
  fullName: Unity.Reflect.IO.LocalStorage.Store
- uid: ISyncModel
  isExternal: true
  name: ISyncModel
  nameWithType: ISyncModel
  fullName: ISyncModel
- uid: Unity.Reflect.IO.LocalStorage.Load*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.Load
  name: Load
  nameWithType: LocalStorage.Load
  fullName: Unity.Reflect.IO.LocalStorage.Load
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Unity.Reflect.IO.LocalStorage.GetProjectFolder*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.GetProjectFolder
  name: GetProjectFolder
  nameWithType: LocalStorage.GetProjectFolder
  fullName: Unity.Reflect.IO.LocalStorage.GetProjectFolder
- uid: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder
  name: GetSourceProjectFolder
  nameWithType: LocalStorage.GetSourceProjectFolder
  fullName: Unity.Reflect.IO.LocalStorage.GetSourceProjectFolder
- uid: Unity.Reflect.IO.LocalStorage.HasLocalData*
  commentId: Overload:Unity.Reflect.IO.LocalStorage.HasLocalData
  name: HasLocalData
  nameWithType: LocalStorage.HasLocalData
  fullName: Unity.Reflect.IO.LocalStorage.HasLocalData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
