### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  commentId: T:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  id: RegistrationService.RegistrationServiceBase
  parent: Unity.Reflect.ProjectServer.Services.SyncServer
  children:
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  - Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  langs:
  - csharp
  - vb
  name: RegistrationService.RegistrationServiceBase
  nameWithType: RegistrationService.RegistrationServiceBase
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  type: Class
  source:
    id: RegistrationServiceBase
    path: ''
    startLine: 36725
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  summary: Base class for server-side implementations of RegistrationService
  example: []
  syntax:
    content: public abstract class RegistrationServiceBase
    content.vb: Public MustInherit Class RegistrationServiceBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  id: Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: Register(RegistrationRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.Register(RegistrationRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: Register
    path: ''
    startLine: 16569
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<KeepAliveResponse> Register(RegistrationRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
    content.vb: Public Overridable Function Register(request As RegistrationRequest, context As grpc.ServerCallContext) As Task(Of KeepAliveResponse)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  id: KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: KeepAlive(KeepAliveRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.KeepAlive(KeepAliveRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: KeepAlive
    path: ''
    startLine: 16574
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<KeepAliveResponse> KeepAlive(KeepAliveRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
    content.vb: Public Overridable Function KeepAlive(request As KeepAliveRequest, context As grpc.ServerCallContext) As Task(Of KeepAliveResponse)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  id: Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: Unregister(UnregisterRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.Unregister(UnregisterRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: Unregister
    path: ''
    startLine: 16579
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<Empty> Unregister(UnregisterRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.Empty}
    content.vb: Public Overridable Function Unregister(request As UnregisterRequest, context As grpc.ServerCallContext) As Task(Of Empty)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  id: Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: Register(RegistrationRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.Register(RegistrationRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register(Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: Register
    path: ''
    startLine: 36728
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<KeepAliveResponse> Register(RegistrationRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
    content.vb: Public Overridable Function Register(request As RegistrationRequest, context As grpc.ServerCallContext) As Task(Of KeepAliveResponse)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  id: KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: KeepAlive(KeepAliveRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.KeepAlive(KeepAliveRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive(Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: KeepAlive
    path: ''
    startLine: 36733
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<KeepAliveResponse> KeepAlive(KeepAliveRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
    content.vb: Public Overridable Function KeepAlive(request As KeepAliveRequest, context As grpc.ServerCallContext) As Task(Of KeepAliveResponse)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  commentId: M:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  id: Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest,grpc.ServerCallContext)
  parent: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase
  langs:
  - csharp
  - vb
  name: Unregister(UnregisterRequest, grpc.ServerCallContext)
  nameWithType: RegistrationService.RegistrationServiceBase.Unregister(UnregisterRequest, grpc.ServerCallContext)
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister(Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest, grpc.ServerCallContext)
  type: Method
  source:
    id: Unregister
    path: ''
    startLine: 36738
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.ProjectServer.Services.SyncServer
  syntax:
    content: public virtual Task<Empty> Unregister(UnregisterRequest request, grpc.ServerCallContext context)
    parameters:
    - id: request
      type: Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest
    - id: context
      type: grpc.ServerCallContext
    return:
      type: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.Empty}
    content.vb: Public Overridable Function Unregister(request As UnregisterRequest, context As grpc.ServerCallContext) As Task(Of Empty)
  overload: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Unity.Reflect.ProjectServer.Services.SyncServer
  commentId: N:Unity.Reflect.ProjectServer.Services.SyncServer
  name: Unity.Reflect.ProjectServer.Services.SyncServer
  nameWithType: Unity.Reflect.ProjectServer.Services.SyncServer
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register*
  commentId: Overload:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register
  name: Register
  nameWithType: RegistrationService.RegistrationServiceBase.Register
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Register
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest
  commentId: T:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest
  parent: Unity.Reflect.ProjectServer.Services.SyncServer
  name: RegistrationRequest
  nameWithType: RegistrationRequest
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest
- uid: grpc.ServerCallContext
  isExternal: true
  name: grpc.ServerCallContext
  nameWithType: grpc.ServerCallContext
  fullName: grpc.ServerCallContext
- uid: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
  commentId: T:System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<KeepAliveResponse>
  nameWithType: Task<KeepAliveResponse>
  fullName: System.Threading.Tasks.Task<Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse>
  nameWithType.vb: Task(Of KeepAliveResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse)
  name.vb: Task(Of KeepAliveResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse
    name: KeepAliveResponse
    nameWithType: KeepAliveResponse
    fullName: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse
    name: KeepAliveResponse
    nameWithType: KeepAliveResponse
    fullName: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive*
  commentId: Overload:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive
  name: KeepAlive
  nameWithType: RegistrationService.RegistrationServiceBase.KeepAlive
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.KeepAlive
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest
  commentId: T:Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest
  parent: Unity.Reflect.ProjectServer.Services.SyncServer
  name: KeepAliveRequest
  nameWithType: KeepAliveRequest
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister*
  commentId: Overload:Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister
  name: Unregister
  nameWithType: RegistrationService.RegistrationServiceBase.Unregister
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationService.RegistrationServiceBase.Unregister
- uid: Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest
  commentId: T:Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest
  parent: Unity.Reflect.ProjectServer.Services.SyncServer
  name: UnregisterRequest
  nameWithType: UnregisterRequest
  fullName: Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest
- uid: System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.Empty}
  commentId: T:System.Threading.Tasks.Task{Unity.Reflect.ProjectServer.Services.Empty}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Empty>
  nameWithType: Task<Empty>
  fullName: System.Threading.Tasks.Task<Unity.Reflect.ProjectServer.Services.Empty>
  nameWithType.vb: Task(Of Empty)
  fullName.vb: System.Threading.Tasks.Task(Of Unity.Reflect.ProjectServer.Services.Empty)
  name.vb: Task(Of Empty)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Unity.Reflect.ProjectServer.Services.Empty
    name: Empty
    nameWithType: Empty
    fullName: Unity.Reflect.ProjectServer.Services.Empty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Unity.Reflect.ProjectServer.Services.Empty
    name: Empty
    nameWithType: Empty
    fullName: Unity.Reflect.ProjectServer.Services.Empty
  - name: )
    nameWithType: )
    fullName: )
