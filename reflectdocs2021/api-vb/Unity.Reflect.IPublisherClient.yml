### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.IPublisherClient
  commentId: T:Unity.Reflect.IPublisherClient
  id: IPublisherClient
  parent: Unity.Reflect
  children:
  - Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  - Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  - Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  - Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  - Unity.Reflect.IPublisherClient.CommitTransaction
  - Unity.Reflect.IPublisherClient.CommitTransaction
  - Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  - Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  - Unity.Reflect.IPublisherClient.Send(ISyncModel)
  - Unity.Reflect.IPublisherClient.Send(ISyncModel)
  - Unity.Reflect.IPublisherClient.StartTransaction
  - Unity.Reflect.IPublisherClient.StartTransaction
  langs:
  - csharp
  - vb
  name: IPublisherClient
  nameWithType: IPublisherClient
  fullName: Unity.Reflect.IPublisherClient
  type: Interface
  source:
    id: IPublisherClient
    path: ''
    startLine: 39732
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nThis interface provides some Publishing client features to communicate with a SyncServer.\n"
  example: []
  syntax:
    content: 'public interface IPublisherClient : IClient'
    content.vb: >-
      Public Interface IPublisherClient
          Inherits IClient
  inheritedMembers:
  - Unity.Reflect.IClient.OnConnectionStatusChanged
  - Unity.Reflect.IClient.OnUnityProjectListUpdate
  - Unity.Reflect.IClient.OnUserUpdate
  - Unity.Reflect.IClient.OnSessionBegin
  - Unity.Reflect.IClient.OnSessionEnd
  - Unity.Reflect.IClient.OnManifestUpdate
  - Unity.Reflect.IClient.ObserveUnityProjectListUpdate
  - Unity.Reflect.IClient.ObserveUserUpdate
  - Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
  - Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
  - Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
  - Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
  - Unity.Reflect.IClient.ReleaseUserUpdate
  - Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
  - Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
  - Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
  - Unity.Reflect.IClient.Connected
  - Unity.Reflect.IClient.Connect
  - Unity.Reflect.IClient.Disconnect(System.Boolean)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Unity.Reflect.IPublisherClient.StartTransaction
  commentId: M:Unity.Reflect.IPublisherClient.StartTransaction
  id: StartTransaction
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: StartTransaction()
  nameWithType: IPublisherClient.StartTransaction()
  fullName: Unity.Reflect.IPublisherClient.StartTransaction()
  type: Method
  source:
    id: StartTransaction
    path: ''
    startLine: 19581
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nStarts a new transaction.\nThis call blocks until the SyncServer acknowledges the call.\n"
  example: []
  syntax:
    content: void StartTransaction()
    content.vb: Sub StartTransaction
  overload: Unity.Reflect.IPublisherClient.StartTransaction*
  exceptions:
  - type: Unity.Reflect.TransactionAlreadyPendingException
    commentId: T:Unity.Reflect.TransactionAlreadyPendingException
    description: If a transaction is already pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.CommitTransaction
  commentId: M:Unity.Reflect.IPublisherClient.CommitTransaction
  id: CommitTransaction
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: CommitTransaction()
  nameWithType: IPublisherClient.CommitTransaction()
  fullName: Unity.Reflect.IPublisherClient.CommitTransaction()
  type: Method
  source:
    id: CommitTransaction
    path: ''
    startLine: 19589
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCommits the pending transaction.\nThis call blocks until the SyncServer acknowledges the commit (which means that all the transaction operations have to be acknowledged as well).\n"
  example: []
  syntax:
    content: void CommitTransaction()
    content.vb: Sub CommitTransaction
  overload: Unity.Reflect.IPublisherClient.CommitTransaction*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.Send(ISyncModel)
  commentId: M:Unity.Reflect.IPublisherClient.Send(ISyncModel)
  id: Send(ISyncModel)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: Send(ISyncModel)
  nameWithType: IPublisherClient.Send(ISyncModel)
  fullName: Unity.Reflect.IPublisherClient.Send(ISyncModel)
  type: Method
  source:
    id: Send
    path: ''
    startLine: 19612
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nSends an <see cref=\"!:ISyncModel\"></see> to the SyncServer.\nThe server will then create or overwrite the model, depending on whether the model was already in the project or not.\n"
  example: []
  syntax:
    content: Task Send(ISyncModel model)
    parameters:
    - id: model
      type: ISyncModel
      description: The model to send to the server
    return:
      type: Task
      description: A <see cref="!:Task"></see> that is resolved whenever the SyncServer acknowledges the reception of the model, regardless of whether it has been commited or not.
    content.vb: Function Send(model As ISyncModel) As Task
  overload: Unity.Reflect.IPublisherClient.Send*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  commentId: M:Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  id: RemoveObjectInstance(System.String)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: RemoveObjectInstance(String)
  nameWithType: IPublisherClient.RemoveObjectInstance(String)
  fullName: Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  type: Method
  source:
    id: RemoveObjectInstance
    path: ''
    startLine: 19621
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nRemoves an Object Instance.\n"
  example: []
  syntax:
    content: Task RemoveObjectInstance(string objectInstanceName)
    parameters:
    - id: objectInstanceName
      type: System.String
      description: The name of the ObjectInstance to remove
    return:
      type: Task
      description: A <see cref="!:Task"></see> that is resolved whenever the SyncServer acknowledges the deletion, regardless of whether it has been commited or not.
    content.vb: Function RemoveObjectInstance(objectInstanceName As String) As Task
  overload: Unity.Reflect.IPublisherClient.RemoveObjectInstance*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  commentId: M:Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  id: CloseAndWait(System.Boolean)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: CloseAndWait(Boolean)
  nameWithType: IPublisherClient.CloseAndWait(Boolean)
  fullName: Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  type: Method
  source:
    id: CloseAndWait
    path: ''
    startLine: 19629
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nProperly closes the session.\nThis call blocks until the SyncServer acknowledges the call.\n"
  example: []
  syntax:
    content: void CloseAndWait(bool autoDisconnectClient = true)
    parameters:
    - id: autoDisconnectClient
      type: System.Boolean
      description: If true, automatically disconnects the client when the session is closed.
    content.vb: Sub CloseAndWait(autoDisconnectClient As Boolean = True)
  overload: Unity.Reflect.IPublisherClient.CloseAndWait*
  exceptions:
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  commentId: M:Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  id: Abort(System.Boolean)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: Abort(Boolean)
  nameWithType: IPublisherClient.Abort(Boolean)
  fullName: Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  type: Method
  source:
    id: Abort
    path: ''
    startLine: 19636
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCloses the session and immediately returns without waiting for the SyncServer&apos;s acknowledgement.\n"
  example: []
  syntax:
    content: void Abort(bool autoDisconnectClient = true)
    parameters:
    - id: autoDisconnectClient
      type: System.Boolean
      description: If true, automatically disconnects the client.
    content.vb: Sub Abort(autoDisconnectClient As Boolean = True)
  overload: Unity.Reflect.IPublisherClient.Abort*
  exceptions:
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.StartTransaction
  commentId: M:Unity.Reflect.IPublisherClient.StartTransaction
  id: StartTransaction
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: StartTransaction()
  nameWithType: IPublisherClient.StartTransaction()
  fullName: Unity.Reflect.IPublisherClient.StartTransaction()
  type: Method
  source:
    id: StartTransaction
    path: ''
    startLine: 39740
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nStarts a new transaction.\nThis call blocks until the SyncServer acknowledges the call.\n"
  example: []
  syntax:
    content: void StartTransaction()
    content.vb: Sub StartTransaction
  overload: Unity.Reflect.IPublisherClient.StartTransaction*
  exceptions:
  - type: Unity.Reflect.TransactionAlreadyPendingException
    commentId: T:Unity.Reflect.TransactionAlreadyPendingException
    description: If a transaction is already pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.CommitTransaction
  commentId: M:Unity.Reflect.IPublisherClient.CommitTransaction
  id: CommitTransaction
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: CommitTransaction()
  nameWithType: IPublisherClient.CommitTransaction()
  fullName: Unity.Reflect.IPublisherClient.CommitTransaction()
  type: Method
  source:
    id: CommitTransaction
    path: ''
    startLine: 39748
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCommits the pending transaction.\nThis call blocks until the SyncServer acknowledges the commit (which means that all the transaction operations have to be acknowledged as well).\n"
  example: []
  syntax:
    content: void CommitTransaction()
    content.vb: Sub CommitTransaction
  overload: Unity.Reflect.IPublisherClient.CommitTransaction*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.Send(ISyncModel)
  commentId: M:Unity.Reflect.IPublisherClient.Send(ISyncModel)
  id: Send(ISyncModel)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: Send(ISyncModel)
  nameWithType: IPublisherClient.Send(ISyncModel)
  fullName: Unity.Reflect.IPublisherClient.Send(ISyncModel)
  type: Method
  source:
    id: Send
    path: ''
    startLine: 39771
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nSends an <see cref=\"!:ISyncModel\"></see> to the SyncServer.\nThe server will then create or overwrite the model, depending on whether the model was already in the project or not.\n"
  example: []
  syntax:
    content: Task Send(ISyncModel model)
    parameters:
    - id: model
      type: ISyncModel
      description: The model to send to the server
    return:
      type: Task
      description: A <see cref="!:Task"></see> that is resolved whenever the SyncServer acknowledges the reception of the model, regardless of whether it has been commited or not.
    content.vb: Function Send(model As ISyncModel) As Task
  overload: Unity.Reflect.IPublisherClient.Send*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  commentId: M:Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  id: RemoveObjectInstance(System.String)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: RemoveObjectInstance(String)
  nameWithType: IPublisherClient.RemoveObjectInstance(String)
  fullName: Unity.Reflect.IPublisherClient.RemoveObjectInstance(System.String)
  type: Method
  source:
    id: RemoveObjectInstance
    path: ''
    startLine: 39780
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nRemoves an Object Instance.\n"
  example: []
  syntax:
    content: Task RemoveObjectInstance(string objectInstanceName)
    parameters:
    - id: objectInstanceName
      type: System.String
      description: The name of the ObjectInstance to remove
    return:
      type: Task
      description: A <see cref="!:Task"></see> that is resolved whenever the SyncServer acknowledges the deletion, regardless of whether it has been commited or not.
    content.vb: Function RemoveObjectInstance(objectInstanceName As String) As Task
  overload: Unity.Reflect.IPublisherClient.RemoveObjectInstance*
  exceptions:
  - type: Unity.Reflect.NoTransactionPendingException
    commentId: T:Unity.Reflect.NoTransactionPendingException
    description: If no transaction is pending
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  commentId: M:Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  id: CloseAndWait(System.Boolean)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: CloseAndWait(Boolean)
  nameWithType: IPublisherClient.CloseAndWait(Boolean)
  fullName: Unity.Reflect.IPublisherClient.CloseAndWait(System.Boolean)
  type: Method
  source:
    id: CloseAndWait
    path: ''
    startLine: 39788
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nProperly closes the session.\nThis call blocks until the SyncServer acknowledges the call.\n"
  example: []
  syntax:
    content: void CloseAndWait(bool autoDisconnectClient = true)
    parameters:
    - id: autoDisconnectClient
      type: System.Boolean
      description: If true, automatically disconnects the client when the session is closed.
    content.vb: Sub CloseAndWait(autoDisconnectClient As Boolean = True)
  overload: Unity.Reflect.IPublisherClient.CloseAndWait*
  exceptions:
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
- uid: Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  commentId: M:Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  id: Abort(System.Boolean)
  parent: Unity.Reflect.IPublisherClient
  langs:
  - csharp
  - vb
  name: Abort(Boolean)
  nameWithType: IPublisherClient.Abort(Boolean)
  fullName: Unity.Reflect.IPublisherClient.Abort(System.Boolean)
  type: Method
  source:
    id: Abort
    path: ''
    startLine: 39795
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCloses the session and immediately returns without waiting for the SyncServer&apos;s acknowledgement.\n"
  example: []
  syntax:
    content: void Abort(bool autoDisconnectClient = true)
    parameters:
    - id: autoDisconnectClient
      type: System.Boolean
      description: If true, automatically disconnects the client.
    content.vb: Sub Abort(autoDisconnectClient As Boolean = True)
  overload: Unity.Reflect.IPublisherClient.Abort*
  exceptions:
  - type: Unity.Reflect.SessionClosedException
    commentId: T:Unity.Reflect.SessionClosedException
    description: If the session has already been closed
references:
- uid: Unity.Reflect
  commentId: N:Unity.Reflect
  name: Unity.Reflect
  nameWithType: Unity.Reflect
  fullName: Unity.Reflect
- uid: Unity.Reflect.IClient.OnConnectionStatusChanged
  commentId: E:Unity.Reflect.IClient.OnConnectionStatusChanged
  parent: Unity.Reflect.IClient
  name: OnConnectionStatusChanged
  nameWithType: IClient.OnConnectionStatusChanged
  fullName: Unity.Reflect.IClient.OnConnectionStatusChanged
- uid: Unity.Reflect.IClient.OnUnityProjectListUpdate
  commentId: E:Unity.Reflect.IClient.OnUnityProjectListUpdate
  parent: Unity.Reflect.IClient
  name: OnUnityProjectListUpdate
  nameWithType: IClient.OnUnityProjectListUpdate
  fullName: Unity.Reflect.IClient.OnUnityProjectListUpdate
- uid: Unity.Reflect.IClient.OnUserUpdate
  commentId: E:Unity.Reflect.IClient.OnUserUpdate
  parent: Unity.Reflect.IClient
  name: OnUserUpdate
  nameWithType: IClient.OnUserUpdate
  fullName: Unity.Reflect.IClient.OnUserUpdate
- uid: Unity.Reflect.IClient.OnSessionBegin
  commentId: E:Unity.Reflect.IClient.OnSessionBegin
  parent: Unity.Reflect.IClient
  name: OnSessionBegin
  nameWithType: IClient.OnSessionBegin
  fullName: Unity.Reflect.IClient.OnSessionBegin
- uid: Unity.Reflect.IClient.OnSessionEnd
  commentId: E:Unity.Reflect.IClient.OnSessionEnd
  parent: Unity.Reflect.IClient
  name: OnSessionEnd
  nameWithType: IClient.OnSessionEnd
  fullName: Unity.Reflect.IClient.OnSessionEnd
- uid: Unity.Reflect.IClient.OnManifestUpdate
  commentId: E:Unity.Reflect.IClient.OnManifestUpdate
  parent: Unity.Reflect.IClient
  name: OnManifestUpdate
  nameWithType: IClient.OnManifestUpdate
  fullName: Unity.Reflect.IClient.OnManifestUpdate
- uid: Unity.Reflect.IClient.ObserveUnityProjectListUpdate
  commentId: M:Unity.Reflect.IClient.ObserveUnityProjectListUpdate
  parent: Unity.Reflect.IClient
  name: ObserveUnityProjectListUpdate()
  nameWithType: IClient.ObserveUnityProjectListUpdate()
  fullName: Unity.Reflect.IClient.ObserveUnityProjectListUpdate()
  spec.csharp:
  - uid: Unity.Reflect.IClient.ObserveUnityProjectListUpdate
    name: ObserveUnityProjectListUpdate
    nameWithType: IClient.ObserveUnityProjectListUpdate
    fullName: Unity.Reflect.IClient.ObserveUnityProjectListUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ObserveUnityProjectListUpdate
    name: ObserveUnityProjectListUpdate
    nameWithType: IClient.ObserveUnityProjectListUpdate
    fullName: Unity.Reflect.IClient.ObserveUnityProjectListUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ObserveUserUpdate
  commentId: M:Unity.Reflect.IClient.ObserveUserUpdate
  parent: Unity.Reflect.IClient
  name: ObserveUserUpdate()
  nameWithType: IClient.ObserveUserUpdate()
  fullName: Unity.Reflect.IClient.ObserveUserUpdate()
  spec.csharp:
  - uid: Unity.Reflect.IClient.ObserveUserUpdate
    name: ObserveUserUpdate
    nameWithType: IClient.ObserveUserUpdate
    fullName: Unity.Reflect.IClient.ObserveUserUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ObserveUserUpdate
    name: ObserveUserUpdate
    nameWithType: IClient.ObserveUserUpdate
    fullName: Unity.Reflect.IClient.ObserveUserUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
  commentId: M:Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ObserveSessionBegin(String[])
  nameWithType: IClient.ObserveSessionBegin(String[])
  fullName: Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
  nameWithType.vb: IClient.ObserveSessionBegin(String())
  fullName.vb: Unity.Reflect.IClient.ObserveSessionBegin(System.String())
  name.vb: ObserveSessionBegin(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
    name: ObserveSessionBegin
    nameWithType: IClient.ObserveSessionBegin
    fullName: Unity.Reflect.IClient.ObserveSessionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ObserveSessionBegin(System.String[])
    name: ObserveSessionBegin
    nameWithType: IClient.ObserveSessionBegin
    fullName: Unity.Reflect.IClient.ObserveSessionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
  commentId: M:Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ObserveSessionEnd(String[])
  nameWithType: IClient.ObserveSessionEnd(String[])
  fullName: Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
  nameWithType.vb: IClient.ObserveSessionEnd(String())
  fullName.vb: Unity.Reflect.IClient.ObserveSessionEnd(System.String())
  name.vb: ObserveSessionEnd(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
    name: ObserveSessionEnd
    nameWithType: IClient.ObserveSessionEnd
    fullName: Unity.Reflect.IClient.ObserveSessionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ObserveSessionEnd(System.String[])
    name: ObserveSessionEnd
    nameWithType: IClient.ObserveSessionEnd
    fullName: Unity.Reflect.IClient.ObserveSessionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
  commentId: M:Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ObserveManifestUpdate(String[])
  nameWithType: IClient.ObserveManifestUpdate(String[])
  fullName: Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
  nameWithType.vb: IClient.ObserveManifestUpdate(String())
  fullName.vb: Unity.Reflect.IClient.ObserveManifestUpdate(System.String())
  name.vb: ObserveManifestUpdate(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
    name: ObserveManifestUpdate
    nameWithType: IClient.ObserveManifestUpdate
    fullName: Unity.Reflect.IClient.ObserveManifestUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ObserveManifestUpdate(System.String[])
    name: ObserveManifestUpdate
    nameWithType: IClient.ObserveManifestUpdate
    fullName: Unity.Reflect.IClient.ObserveManifestUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
  commentId: M:Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
  parent: Unity.Reflect.IClient
  name: ReleaseUnityProjectListUpdate()
  nameWithType: IClient.ReleaseUnityProjectListUpdate()
  fullName: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate()
  spec.csharp:
  - uid: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
    name: ReleaseUnityProjectListUpdate
    nameWithType: IClient.ReleaseUnityProjectListUpdate
    fullName: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
    name: ReleaseUnityProjectListUpdate
    nameWithType: IClient.ReleaseUnityProjectListUpdate
    fullName: Unity.Reflect.IClient.ReleaseUnityProjectListUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ReleaseUserUpdate
  commentId: M:Unity.Reflect.IClient.ReleaseUserUpdate
  parent: Unity.Reflect.IClient
  name: ReleaseUserUpdate()
  nameWithType: IClient.ReleaseUserUpdate()
  fullName: Unity.Reflect.IClient.ReleaseUserUpdate()
  spec.csharp:
  - uid: Unity.Reflect.IClient.ReleaseUserUpdate
    name: ReleaseUserUpdate
    nameWithType: IClient.ReleaseUserUpdate
    fullName: Unity.Reflect.IClient.ReleaseUserUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ReleaseUserUpdate
    name: ReleaseUserUpdate
    nameWithType: IClient.ReleaseUserUpdate
    fullName: Unity.Reflect.IClient.ReleaseUserUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
  commentId: M:Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ReleaseSessionBegin(String[])
  nameWithType: IClient.ReleaseSessionBegin(String[])
  fullName: Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
  nameWithType.vb: IClient.ReleaseSessionBegin(String())
  fullName.vb: Unity.Reflect.IClient.ReleaseSessionBegin(System.String())
  name.vb: ReleaseSessionBegin(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
    name: ReleaseSessionBegin
    nameWithType: IClient.ReleaseSessionBegin
    fullName: Unity.Reflect.IClient.ReleaseSessionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ReleaseSessionBegin(System.String[])
    name: ReleaseSessionBegin
    nameWithType: IClient.ReleaseSessionBegin
    fullName: Unity.Reflect.IClient.ReleaseSessionBegin
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
  commentId: M:Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ReleaseSessionEnd(String[])
  nameWithType: IClient.ReleaseSessionEnd(String[])
  fullName: Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
  nameWithType.vb: IClient.ReleaseSessionEnd(String())
  fullName.vb: Unity.Reflect.IClient.ReleaseSessionEnd(System.String())
  name.vb: ReleaseSessionEnd(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
    name: ReleaseSessionEnd
    nameWithType: IClient.ReleaseSessionEnd
    fullName: Unity.Reflect.IClient.ReleaseSessionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ReleaseSessionEnd(System.String[])
    name: ReleaseSessionEnd
    nameWithType: IClient.ReleaseSessionEnd
    fullName: Unity.Reflect.IClient.ReleaseSessionEnd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
  commentId: M:Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
  parent: Unity.Reflect.IClient
  isExternal: true
  name: ReleaseManifestUpdate(String[])
  nameWithType: IClient.ReleaseManifestUpdate(String[])
  fullName: Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
  nameWithType.vb: IClient.ReleaseManifestUpdate(String())
  fullName.vb: Unity.Reflect.IClient.ReleaseManifestUpdate(System.String())
  name.vb: ReleaseManifestUpdate(String())
  spec.csharp:
  - uid: Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
    name: ReleaseManifestUpdate
    nameWithType: IClient.ReleaseManifestUpdate
    fullName: Unity.Reflect.IClient.ReleaseManifestUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.ReleaseManifestUpdate(System.String[])
    name: ReleaseManifestUpdate
    nameWithType: IClient.ReleaseManifestUpdate
    fullName: Unity.Reflect.IClient.ReleaseManifestUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.Connected
  commentId: P:Unity.Reflect.IClient.Connected
  parent: Unity.Reflect.IClient
  name: Connected
  nameWithType: IClient.Connected
  fullName: Unity.Reflect.IClient.Connected
- uid: Unity.Reflect.IClient.Connect
  commentId: M:Unity.Reflect.IClient.Connect
  parent: Unity.Reflect.IClient
  name: Connect()
  nameWithType: IClient.Connect()
  fullName: Unity.Reflect.IClient.Connect()
  spec.csharp:
  - uid: Unity.Reflect.IClient.Connect
    name: Connect
    nameWithType: IClient.Connect
    fullName: Unity.Reflect.IClient.Connect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.Connect
    name: Connect
    nameWithType: IClient.Connect
    fullName: Unity.Reflect.IClient.Connect
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient.Disconnect(System.Boolean)
  commentId: M:Unity.Reflect.IClient.Disconnect(System.Boolean)
  parent: Unity.Reflect.IClient
  isExternal: true
  name: Disconnect(Boolean)
  nameWithType: IClient.Disconnect(Boolean)
  fullName: Unity.Reflect.IClient.Disconnect(System.Boolean)
  spec.csharp:
  - uid: Unity.Reflect.IClient.Disconnect(System.Boolean)
    name: Disconnect
    nameWithType: IClient.Disconnect
    fullName: Unity.Reflect.IClient.Disconnect
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Unity.Reflect.IClient.Disconnect(System.Boolean)
    name: Disconnect
    nameWithType: IClient.Disconnect
    fullName: Unity.Reflect.IClient.Disconnect
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.IClient
  commentId: T:Unity.Reflect.IClient
  parent: Unity.Reflect
  name: IClient
  nameWithType: IClient
  fullName: Unity.Reflect.IClient
- uid: Unity.Reflect.TransactionAlreadyPendingException
  commentId: T:Unity.Reflect.TransactionAlreadyPendingException
  name: TransactionAlreadyPendingException
  nameWithType: TransactionAlreadyPendingException
  fullName: Unity.Reflect.TransactionAlreadyPendingException
- uid: Unity.Reflect.SessionClosedException
  commentId: T:Unity.Reflect.SessionClosedException
  name: SessionClosedException
  nameWithType: SessionClosedException
  fullName: Unity.Reflect.SessionClosedException
- uid: Unity.Reflect.IPublisherClient.StartTransaction*
  commentId: Overload:Unity.Reflect.IPublisherClient.StartTransaction
  name: StartTransaction
  nameWithType: IPublisherClient.StartTransaction
  fullName: Unity.Reflect.IPublisherClient.StartTransaction
- uid: Unity.Reflect.NoTransactionPendingException
  commentId: T:Unity.Reflect.NoTransactionPendingException
  name: NoTransactionPendingException
  nameWithType: NoTransactionPendingException
  fullName: Unity.Reflect.NoTransactionPendingException
- uid: Unity.Reflect.IPublisherClient.CommitTransaction*
  commentId: Overload:Unity.Reflect.IPublisherClient.CommitTransaction
  name: CommitTransaction
  nameWithType: IPublisherClient.CommitTransaction
  fullName: Unity.Reflect.IPublisherClient.CommitTransaction
- uid: Unity.Reflect.IPublisherClient.Send*
  commentId: Overload:Unity.Reflect.IPublisherClient.Send
  name: Send
  nameWithType: IPublisherClient.Send
  fullName: Unity.Reflect.IPublisherClient.Send
- uid: ISyncModel
  isExternal: true
  name: ISyncModel
  nameWithType: ISyncModel
  fullName: ISyncModel
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Unity.Reflect.IPublisherClient.RemoveObjectInstance*
  commentId: Overload:Unity.Reflect.IPublisherClient.RemoveObjectInstance
  name: RemoveObjectInstance
  nameWithType: IPublisherClient.RemoveObjectInstance
  fullName: Unity.Reflect.IPublisherClient.RemoveObjectInstance
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Unity.Reflect.IPublisherClient.CloseAndWait*
  commentId: Overload:Unity.Reflect.IPublisherClient.CloseAndWait
  name: CloseAndWait
  nameWithType: IPublisherClient.CloseAndWait
  fullName: Unity.Reflect.IPublisherClient.CloseAndWait
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Unity.Reflect.IPublisherClient.Abort*
  commentId: Overload:Unity.Reflect.IPublisherClient.Abort
  name: Abort
  nameWithType: IPublisherClient.Abort
  fullName: Unity.Reflect.IPublisherClient.Abort
