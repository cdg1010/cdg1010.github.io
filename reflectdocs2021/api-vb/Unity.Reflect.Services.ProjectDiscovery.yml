### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.Services.ProjectDiscovery
  commentId: T:Unity.Reflect.Services.ProjectDiscovery
  id: ProjectDiscovery
  parent: Unity.Reflect.Services
  children:
  - Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  - Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  - Unity.Reflect.Services.ProjectDiscovery.availableProjects
  - Unity.Reflect.Services.ProjectDiscovery.availableProjects
  - Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  - Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  - Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  - Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  - Unity.Reflect.Services.ProjectDiscovery.Start
  - Unity.Reflect.Services.ProjectDiscovery.Start
  - Unity.Reflect.Services.ProjectDiscovery.Stop
  - Unity.Reflect.Services.ProjectDiscovery.Stop
  langs:
  - csharp
  - vb
  name: ProjectDiscovery
  nameWithType: ProjectDiscovery
  fullName: Unity.Reflect.Services.ProjectDiscovery
  type: Class
  source:
    id: ProjectDiscovery
    path: ''
    startLine: 38254
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nThis class allows services to be discovered over the local network.\n"
  example: []
  syntax:
    content: public class ProjectDiscovery
    content.vb: Public Class ProjectDiscovery
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  commentId: E:Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  id: OnProjectAdded
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: OnProjectAdded
  nameWithType: ProjectDiscovery.OnProjectAdded
  fullName: Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  type: Event
  source:
    id: OnProjectAdded
    path: ''
    startLine: 18102
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nThis event is triggered when a project is added to the available project list.\n"
  example: []
  syntax:
    content: public event Action<ProjectInfo> OnProjectAdded
    return:
      type: System.Action{Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Event OnProjectAdded As Action(Of ProjectInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  commentId: E:Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  id: OnProjectRemoved
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: OnProjectRemoved
  nameWithType: ProjectDiscovery.OnProjectRemoved
  fullName: Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  type: Event
  source:
    id: OnProjectRemoved
    path: ''
    startLine: 18107
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nThis event is triggered when a project is removed from the available project list.\n"
  example: []
  syntax:
    content: public event Action<ProjectInfo> OnProjectRemoved
    return:
      type: System.Action{Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Event OnProjectRemoved As Action(Of ProjectInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.availableProjects
  commentId: P:Unity.Reflect.Services.ProjectDiscovery.availableProjects
  id: availableProjects
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: availableProjects
  nameWithType: ProjectDiscovery.availableProjects
  fullName: Unity.Reflect.Services.ProjectDiscovery.availableProjects
  type: Property
  source:
    id: availableProjects
    path: ''
    startLine: 18112
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nA list of all available projects that have been discovered by the ProjectDiscovery.\n"
  example: []
  syntax:
    content: public static IReadOnlyDictionary<string, ProjectInfo> availableProjects { get; }
    parameters: []
    return:
      type: IReadOnlyDictionary{System.String,Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Shared ReadOnly Property availableProjects As IReadOnlyDictionary(Of String, ProjectInfo)
  overload: Unity.Reflect.Services.ProjectDiscovery.availableProjects*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: ProjectDiscovery(Boolean)
  nameWithType: ProjectDiscovery.ProjectDiscovery(Boolean)
  fullName: Unity.Reflect.Services.ProjectDiscovery.ProjectDiscovery(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 18129
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nCreates a ProjectDiscovery\n"
  example: []
  syntax:
    content: public ProjectDiscovery(bool isServer)
    parameters:
    - id: isServer
      type: System.Boolean
      description: Whether the user of the Discovery is a server
    content.vb: Public Sub New(isServer As Boolean)
  overload: Unity.Reflect.Services.ProjectDiscovery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.Start
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.Start
  id: Start
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: ProjectDiscovery.Start()
  fullName: Unity.Reflect.Services.ProjectDiscovery.Start()
  type: Method
  source:
    id: Start
    path: ''
    startLine: 18184
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nStarts the discovery.\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Unity.Reflect.Services.ProjectDiscovery.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.Stop
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.Stop
  id: Stop
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ProjectDiscovery.Stop()
  fullName: Unity.Reflect.Services.ProjectDiscovery.Stop()
  type: Method
  source:
    id: Stop
    path: ''
    startLine: 18197
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nStops the discovery.\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Unity.Reflect.Services.ProjectDiscovery.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  commentId: E:Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  id: OnProjectAdded
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: OnProjectAdded
  nameWithType: ProjectDiscovery.OnProjectAdded
  fullName: Unity.Reflect.Services.ProjectDiscovery.OnProjectAdded
  type: Event
  source:
    id: OnProjectAdded
    path: ''
    startLine: 38261
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nThis event is triggered when a project is added to the available project list.\n"
  example: []
  syntax:
    content: public event Action<ProjectInfo> OnProjectAdded
    return:
      type: System.Action{Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Event OnProjectAdded As Action(Of ProjectInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  commentId: E:Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  id: OnProjectRemoved
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: OnProjectRemoved
  nameWithType: ProjectDiscovery.OnProjectRemoved
  fullName: Unity.Reflect.Services.ProjectDiscovery.OnProjectRemoved
  type: Event
  source:
    id: OnProjectRemoved
    path: ''
    startLine: 38266
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nThis event is triggered when a project is removed from the available project list.\n"
  example: []
  syntax:
    content: public event Action<ProjectInfo> OnProjectRemoved
    return:
      type: System.Action{Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Event OnProjectRemoved As Action(Of ProjectInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.availableProjects
  commentId: P:Unity.Reflect.Services.ProjectDiscovery.availableProjects
  id: availableProjects
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: availableProjects
  nameWithType: ProjectDiscovery.availableProjects
  fullName: Unity.Reflect.Services.ProjectDiscovery.availableProjects
  type: Property
  source:
    id: availableProjects
    path: ''
    startLine: 38271
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nA list of all available projects that have been discovered by the ProjectDiscovery.\n"
  example: []
  syntax:
    content: public static IReadOnlyDictionary<string, ProjectInfo> availableProjects { get; }
    parameters: []
    return:
      type: IReadOnlyDictionary{System.String,Unity.Reflect.Services.ProjectInfo}
    content.vb: Public Shared ReadOnly Property availableProjects As IReadOnlyDictionary(Of String, ProjectInfo)
  overload: Unity.Reflect.Services.ProjectDiscovery.availableProjects*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: ProjectDiscovery(Boolean)
  nameWithType: ProjectDiscovery.ProjectDiscovery(Boolean)
  fullName: Unity.Reflect.Services.ProjectDiscovery.ProjectDiscovery(System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 38288
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nCreates a ProjectDiscovery\n"
  example: []
  syntax:
    content: public ProjectDiscovery(bool isServer)
    parameters:
    - id: isServer
      type: System.Boolean
      description: Whether the user of the Discovery is a server
    content.vb: Public Sub New(isServer As Boolean)
  overload: Unity.Reflect.Services.ProjectDiscovery.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.Start
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.Start
  id: Start
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: ProjectDiscovery.Start()
  fullName: Unity.Reflect.Services.ProjectDiscovery.Start()
  type: Method
  source:
    id: Start
    path: ''
    startLine: 38343
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nStarts the discovery.\n"
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Unity.Reflect.Services.ProjectDiscovery.Start*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Unity.Reflect.Services.ProjectDiscovery.Stop
  commentId: M:Unity.Reflect.Services.ProjectDiscovery.Stop
  id: Stop
  parent: Unity.Reflect.Services.ProjectDiscovery
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: ProjectDiscovery.Stop()
  fullName: Unity.Reflect.Services.ProjectDiscovery.Stop()
  type: Method
  source:
    id: Stop
    path: ''
    startLine: 38356
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Services
  summary: "\nStops the discovery.\n"
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  overload: Unity.Reflect.Services.ProjectDiscovery.Stop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Unity.Reflect.Services
  commentId: N:Unity.Reflect.Services
  name: Unity.Reflect.Services
  nameWithType: Unity.Reflect.Services
  fullName: Unity.Reflect.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{Unity.Reflect.Services.ProjectInfo}
  commentId: T:System.Action{Unity.Reflect.Services.ProjectInfo}
  parent: System
  definition: System.Action`1
  name: Action<ProjectInfo>
  nameWithType: Action<ProjectInfo>
  fullName: System.Action<Unity.Reflect.Services.ProjectInfo>
  nameWithType.vb: Action(Of ProjectInfo)
  fullName.vb: System.Action(Of Unity.Reflect.Services.ProjectInfo)
  name.vb: Action(Of ProjectInfo)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Unity.Reflect.Services.ProjectInfo
    name: ProjectInfo
    nameWithType: ProjectInfo
    fullName: Unity.Reflect.Services.ProjectInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Unity.Reflect.Services.ProjectInfo
    name: ProjectInfo
    nameWithType: ProjectInfo
    fullName: Unity.Reflect.Services.ProjectInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.Services.ProjectDiscovery.availableProjects*
  commentId: Overload:Unity.Reflect.Services.ProjectDiscovery.availableProjects
  name: availableProjects
  nameWithType: ProjectDiscovery.availableProjects
  fullName: Unity.Reflect.Services.ProjectDiscovery.availableProjects
- uid: IReadOnlyDictionary{System.String,Unity.Reflect.Services.ProjectInfo}
  commentId: '!:IReadOnlyDictionary{System.String,Unity.Reflect.Services.ProjectInfo}'
  definition: IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, ProjectInfo>
  nameWithType: IReadOnlyDictionary<String, ProjectInfo>
  fullName: IReadOnlyDictionary<System.String, Unity.Reflect.Services.ProjectInfo>
  nameWithType.vb: IReadOnlyDictionary(Of String, ProjectInfo)
  fullName.vb: IReadOnlyDictionary(Of System.String, Unity.Reflect.Services.ProjectInfo)
  name.vb: IReadOnlyDictionary(Of String, ProjectInfo)
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Unity.Reflect.Services.ProjectInfo
    name: ProjectInfo
    nameWithType: ProjectInfo
    fullName: Unity.Reflect.Services.ProjectInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Unity.Reflect.Services.ProjectInfo
    name: ProjectInfo
    nameWithType: ProjectInfo
    fullName: Unity.Reflect.Services.ProjectInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<, >
  nameWithType: IReadOnlyDictionary<, >
  fullName: IReadOnlyDictionary<, >
  nameWithType.vb: IReadOnlyDictionary(Of , )
  fullName.vb: IReadOnlyDictionary(Of , )
  name.vb: IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.Services.ProjectDiscovery.#ctor*
  commentId: Overload:Unity.Reflect.Services.ProjectDiscovery.#ctor
  name: ProjectDiscovery
  nameWithType: ProjectDiscovery.ProjectDiscovery
  fullName: Unity.Reflect.Services.ProjectDiscovery.ProjectDiscovery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Unity.Reflect.Services.ProjectDiscovery.Start*
  commentId: Overload:Unity.Reflect.Services.ProjectDiscovery.Start
  name: Start
  nameWithType: ProjectDiscovery.Start
  fullName: Unity.Reflect.Services.ProjectDiscovery.Start
- uid: Unity.Reflect.Services.ProjectDiscovery.Stop*
  commentId: Overload:Unity.Reflect.Services.ProjectDiscovery.Stop
  name: Stop
  nameWithType: ProjectDiscovery.Stop
  fullName: Unity.Reflect.Services.ProjectDiscovery.Stop
