### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.Publisher
  commentId: T:Unity.Reflect.Publisher
  id: Publisher
  parent: Unity.Reflect
  children:
  - Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  - Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  - Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  - Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  - Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  - Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  - Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  - Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  langs:
  - csharp
  - vb
  name: Publisher
  nameWithType: Publisher
  fullName: Unity.Reflect.Publisher
  type: Class
  source:
    id: Publisher
    path: ''
    startLine: 39300
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nAn <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> factory.\n"
  example: []
  syntax:
    content: public static class Publisher
    content.vb: Public Module Publisher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  commentId: M:Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  id: OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenClient(String, String, String, String, PublisherSettings, String)
  nameWithType: Publisher.OpenClient(String, String, String, String, PublisherSettings, String)
  fullName: Unity.Reflect.Publisher.OpenClient(System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.String)
  type: Method
  source:
    id: OpenClient
    path: ''
    startLine: 19154
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects a blocking <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer.\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenClient(string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, string channelAddress = null)
    parameters:
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: channelAddress
      type: System.String
      description: The address of the SyncServer, following the format &quot;XXX.XXX.XXX.XXX:YYYYY&quot;. If null, the client will try to connect to a local SyncServer.
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are blocking.
    content.vb: Public Shared Function OpenClient(sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, channelAddress As String = Nothing) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  commentId: M:Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  id: OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenClient(TargetChannel, String, String, String, String, PublisherSettings)
  nameWithType: Publisher.OpenClient(TargetChannel, String, String, String, String, PublisherSettings)
  fullName: Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel, System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings)
  type: Method
  source:
    id: OpenClient
    path: ''
    startLine: 19172
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  example: []
  syntax:
    content: public static IPublisherClient OpenClient(TargetChannel channel, string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings)
    parameters:
    - id: channel
      type: Unity.Reflect.TargetChannel
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
    - id: destinationProjectId
      type: System.String
    - id: settings
      type: Unity.Reflect.PublisherSettings
    return:
      type: Unity.Reflect.IPublisherClient
    content.vb: Public Shared Function OpenClient(channel As TargetChannel, sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenClient*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the channel is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  commentId: M:Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  id: OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenAsyncClient(String, String, String, String, PublisherSettings, Int32, String)
  nameWithType: Publisher.OpenAsyncClient(String, String, String, String, PublisherSettings, Int32, String)
  fullName: Unity.Reflect.Publisher.OpenAsyncClient(System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.Int32, System.String)
  type: Method
  source:
    id: OpenAsyncClient
    path: ''
    startLine: 19195
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects an asynchronous <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer (experimental).\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenAsyncClient(string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, int nbWorkers = 1, string channelAddress = null)
    parameters:
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: nbWorkers
      type: System.Int32
      description: The number of worker threads allowed in the thread pool
    - id: channelAddress
      type: System.String
      description: The address of the SyncServer, following the format &quot;XXX.XXX.XXX.XXX:YYYYY&quot;. If null, the client will try to connect to a local SyncServer.
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are asynchronous.
    content.vb: Public Shared Function OpenAsyncClient(sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, nbWorkers As Integer = 1, channelAddress As String = Nothing) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenAsyncClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  commentId: M:Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  id: OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenAsyncClient(TargetChannel, String, String, String, String, PublisherSettings, Int32)
  nameWithType: Publisher.OpenAsyncClient(TargetChannel, String, String, String, String, PublisherSettings, Int32)
  fullName: Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel, System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.Int32)
  type: Method
  source:
    id: OpenAsyncClient
    path: ''
    startLine: 19213
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects an asynchronous <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer (experimental).\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenAsyncClient(TargetChannel channel, string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, int nbWorkers = 1)
    parameters:
    - id: channel
      type: Unity.Reflect.TargetChannel
      description: The target channel establishing a connection to the SyncServer. Cannot be null.
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: nbWorkers
      type: System.Int32
      description: The number of worker threads allowed in the thread pool
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are asynchronous.
    content.vb: Public Shared Function OpenAsyncClient(channel As TargetChannel, sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, nbWorkers As Integer = 1) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenAsyncClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the channel is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  commentId: M:Unity.Reflect.Publisher.OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  id: OpenClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.String)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenClient(String, String, String, String, PublisherSettings, String)
  nameWithType: Publisher.OpenClient(String, String, String, String, PublisherSettings, String)
  fullName: Unity.Reflect.Publisher.OpenClient(System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.String)
  type: Method
  source:
    id: OpenClient
    path: ''
    startLine: 39313
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects a blocking <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer.\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenClient(string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, string channelAddress = null)
    parameters:
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: channelAddress
      type: System.String
      description: The address of the SyncServer, following the format &quot;XXX.XXX.XXX.XXX:YYYYY&quot;. If null, the client will try to connect to a local SyncServer.
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are blocking.
    content.vb: Public Shared Function OpenClient(sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, channelAddress As String = Nothing) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  commentId: M:Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  id: OpenClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenClient(TargetChannel, String, String, String, String, PublisherSettings)
  nameWithType: Publisher.OpenClient(TargetChannel, String, String, String, String, PublisherSettings)
  fullName: Unity.Reflect.Publisher.OpenClient(Unity.Reflect.TargetChannel, System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings)
  type: Method
  source:
    id: OpenClient
    path: ''
    startLine: 39331
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  example: []
  syntax:
    content: public static IPublisherClient OpenClient(TargetChannel channel, string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings)
    parameters:
    - id: channel
      type: Unity.Reflect.TargetChannel
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
    - id: destinationProjectId
      type: System.String
    - id: settings
      type: Unity.Reflect.PublisherSettings
    return:
      type: Unity.Reflect.IPublisherClient
    content.vb: Public Shared Function OpenClient(channel As TargetChannel, sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenClient*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the channel is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  commentId: M:Unity.Reflect.Publisher.OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  id: OpenAsyncClient(System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32,System.String)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenAsyncClient(String, String, String, String, PublisherSettings, Int32, String)
  nameWithType: Publisher.OpenAsyncClient(String, String, String, String, PublisherSettings, Int32, String)
  fullName: Unity.Reflect.Publisher.OpenAsyncClient(System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.Int32, System.String)
  type: Method
  source:
    id: OpenAsyncClient
    path: ''
    startLine: 39354
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects an asynchronous <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer (experimental).\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenAsyncClient(string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, int nbWorkers = 1, string channelAddress = null)
    parameters:
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: nbWorkers
      type: System.Int32
      description: The number of worker threads allowed in the thread pool
    - id: channelAddress
      type: System.String
      description: The address of the SyncServer, following the format &quot;XXX.XXX.XXX.XXX:YYYYY&quot;. If null, the client will try to connect to a local SyncServer.
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are asynchronous.
    content.vb: Public Shared Function OpenAsyncClient(sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, nbWorkers As Integer = 1, channelAddress As String = Nothing) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenAsyncClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  commentId: M:Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  id: OpenAsyncClient(Unity.Reflect.TargetChannel,System.String,System.String,System.String,System.String,Unity.Reflect.PublisherSettings,System.Int32)
  parent: Unity.Reflect.Publisher
  langs:
  - csharp
  - vb
  name: OpenAsyncClient(TargetChannel, String, String, String, String, PublisherSettings, Int32)
  nameWithType: Publisher.OpenAsyncClient(TargetChannel, String, String, String, String, PublisherSettings, Int32)
  fullName: Unity.Reflect.Publisher.OpenAsyncClient(Unity.Reflect.TargetChannel, System.String, System.String, System.String, System.String, Unity.Reflect.PublisherSettings, System.Int32)
  type: Method
  source:
    id: OpenAsyncClient
    path: ''
    startLine: 39372
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect
  summary: "\nCreates and connects an asynchronous <xref href=\"Unity.Reflect.IPublisherClient\" data-throw-if-not-resolved=\"false\"></xref> to a SyncServer (experimental).\n"
  example: []
  syntax:
    content: public static IPublisherClient OpenAsyncClient(TargetChannel channel, string sourceName, string sourceId, string userId, string destinationProjectId, PublisherSettings settings, int nbWorkers = 1)
    parameters:
    - id: channel
      type: Unity.Reflect.TargetChannel
      description: The target channel establishing a connection to the SyncServer. Cannot be null.
    - id: sourceName
      type: System.String
    - id: sourceId
      type: System.String
    - id: userId
      type: System.String
      description: The ID of the Unity user publishing their project
    - id: destinationProjectId
      type: System.String
      description: The ID of the target Unity Project that is to host the data
    - id: settings
      type: Unity.Reflect.PublisherSettings
      description: Some custom publishing settings
    - id: nbWorkers
      type: System.Int32
      description: The number of worker threads allowed in the thread pool
    return:
      type: Unity.Reflect.IPublisherClient
      description: A publisher client that is connected to the SyncServer, whose transaction operations are asynchronous.
    content.vb: Public Shared Function OpenAsyncClient(channel As TargetChannel, sourceName As String, sourceId As String, userId As String, destinationProjectId As String, settings As PublisherSettings, nbWorkers As Integer = 1) As IPublisherClient
  overload: Unity.Reflect.Publisher.OpenAsyncClient*
  exceptions:
  - type: Unity.Reflect.ConnectionException
    commentId: T:Unity.Reflect.ConnectionException
    description: If the connection with the SyncServer fails
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the channel is null
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Unity.Reflect.IPublisherClient
  commentId: T:Unity.Reflect.IPublisherClient
  parent: Unity.Reflect
  name: IPublisherClient
  nameWithType: IPublisherClient
  fullName: Unity.Reflect.IPublisherClient
- uid: Unity.Reflect
  commentId: N:Unity.Reflect
  name: Unity.Reflect
  nameWithType: Unity.Reflect
  fullName: Unity.Reflect
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Unity.Reflect.ConnectionException
  commentId: T:Unity.Reflect.ConnectionException
  name: ConnectionException
  nameWithType: ConnectionException
  fullName: Unity.Reflect.ConnectionException
- uid: Unity.Reflect.Publisher.OpenClient*
  commentId: Overload:Unity.Reflect.Publisher.OpenClient
  name: OpenClient
  nameWithType: Publisher.OpenClient
  fullName: Unity.Reflect.Publisher.OpenClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Unity.Reflect.PublisherSettings
  commentId: T:Unity.Reflect.PublisherSettings
  parent: Unity.Reflect
  name: PublisherSettings
  nameWithType: PublisherSettings
  fullName: Unity.Reflect.PublisherSettings
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Unity.Reflect.TargetChannel
  commentId: T:Unity.Reflect.TargetChannel
  parent: Unity.Reflect
  name: TargetChannel
  nameWithType: TargetChannel
  fullName: Unity.Reflect.TargetChannel
- uid: Unity.Reflect.Publisher.OpenAsyncClient*
  commentId: Overload:Unity.Reflect.Publisher.OpenAsyncClient
  name: OpenAsyncClient
  nameWithType: Publisher.OpenAsyncClient
  fullName: Unity.Reflect.Publisher.OpenAsyncClient
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
