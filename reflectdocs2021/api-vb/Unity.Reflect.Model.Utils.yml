### YamlMime:ManagedReference
items:
- uid: Unity.Reflect.Model.Utils
  commentId: T:Unity.Reflect.Model.Utils
  id: Utils
  parent: Unity.Reflect.Model
  children:
  - Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  - Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  - Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  - Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  - Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  - Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  - Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  - Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: Utils
  nameWithType: Utils
  fullName: Unity.Reflect.Model.Utils
  type: Class
  source:
    id: Utils
    path: ''
    startLine: 37547
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  syntax:
    content: public static class Utils
    content.vb: Public Module Utils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  commentId: M:Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  id: Set``1(RepeatedField{``0},IEnumerable{``0})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set<T>(RepeatedField<T>, IEnumerable<T>)
  nameWithType: Utils.Set<T>(RepeatedField<T>, IEnumerable<T>)
  fullName: Unity.Reflect.Model.Utils.Set<T>(RepeatedField<T>, IEnumerable<T>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 17396
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the RepeatedField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set<T>(this RepeatedField<T> repeated, IEnumerable<T> values)
    parameters:
    - id: repeated
      type: RepeatedField{{T}}
      description: The RepeatedField that will be filled.
    - id: values
      type: IEnumerable{{T}}
      description: The content to set into the RepeatedField.
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(Of T)(repeated As RepeatedField(Of T), values As IEnumerable(Of T))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
  name.vb: Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
- uid: Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  commentId: M:Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  id: Set(RepeatedField{System.String},IEnumerable{System.String})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set(RepeatedField<String>, IEnumerable<String>)
  nameWithType: Utils.Set(RepeatedField<String>, IEnumerable<String>)
  fullName: Unity.Reflect.Model.Utils.Set(RepeatedField<System.String>, IEnumerable<System.String>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 17408
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the RepeatedField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set(this RepeatedField<string> repeated, IEnumerable<string> values)
    parameters:
    - id: repeated
      type: RepeatedField{System.String}
      description: The RepeatedField that will be filled.
    - id: values
      type: IEnumerable{System.String}
      description: The content to set into the RepeatedField.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(repeated As RepeatedField(Of String), values As IEnumerable(Of String))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(RepeatedField(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(RepeatedField(Of System.String), IEnumerable(Of System.String))
  name.vb: Set(RepeatedField(Of String), IEnumerable(Of String))
- uid: Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  commentId: M:Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  id: Set``2(MapField{``0,``1},IDictionary{``0,``1})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  nameWithType: Utils.Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  fullName: Unity.Reflect.Model.Utils.Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 17420
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the MapField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set<TKey, TValue>(this MapField<TKey, TValue> mapField, IDictionary<TKey, TValue> values)
    parameters:
    - id: mapField
      type: MapField{{TKey},{TValue}}
      description: The MapField that will be filled.
    - id: values
      type: IDictionary{{TKey},{TValue}}
      description: The content to set into the MapField.
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(Of TKey, TValue)(mapField As MapField(Of TKey, TValue), values As IDictionary(Of TKey, TValue))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
  name.vb: Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
- uid: Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  commentId: M:Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  id: PersistentHash(Unity.Reflect.Model.ISyncModel)
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: PersistentHash(ISyncModel)
  nameWithType: Utils.PersistentHash(ISyncModel)
  fullName: Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  type: Method
  source:
    id: PersistentHash
    path: ''
    startLine: 17432
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  syntax:
    content: public static string PersistentHash(this ISyncModel syncModel)
    parameters:
    - id: syncModel
      type: Unity.Reflect.Model.ISyncModel
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PersistentHash(syncModel As ISyncModel) As String
  overload: Unity.Reflect.Model.Utils.PersistentHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  commentId: M:Unity.Reflect.Model.Utils.Set``1(RepeatedField{``0},IEnumerable{``0})
  id: Set``1(RepeatedField{``0},IEnumerable{``0})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set<T>(RepeatedField<T>, IEnumerable<T>)
  nameWithType: Utils.Set<T>(RepeatedField<T>, IEnumerable<T>)
  fullName: Unity.Reflect.Model.Utils.Set<T>(RepeatedField<T>, IEnumerable<T>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 37555
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the RepeatedField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set<T>(this RepeatedField<T> repeated, IEnumerable<T> values)
    parameters:
    - id: repeated
      type: RepeatedField{{T}}
      description: The RepeatedField that will be filled.
    - id: values
      type: IEnumerable{{T}}
      description: The content to set into the RepeatedField.
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(Of T)(repeated As RepeatedField(Of T), values As IEnumerable(Of T))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
  name.vb: Set(Of T)(RepeatedField(Of T), IEnumerable(Of T))
- uid: Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  commentId: M:Unity.Reflect.Model.Utils.Set(RepeatedField{System.String},IEnumerable{System.String})
  id: Set(RepeatedField{System.String},IEnumerable{System.String})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set(RepeatedField<String>, IEnumerable<String>)
  nameWithType: Utils.Set(RepeatedField<String>, IEnumerable<String>)
  fullName: Unity.Reflect.Model.Utils.Set(RepeatedField<System.String>, IEnumerable<System.String>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 37567
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the RepeatedField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set(this RepeatedField<string> repeated, IEnumerable<string> values)
    parameters:
    - id: repeated
      type: RepeatedField{System.String}
      description: The RepeatedField that will be filled.
    - id: values
      type: IEnumerable{System.String}
      description: The content to set into the RepeatedField.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(repeated As RepeatedField(Of String), values As IEnumerable(Of String))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(RepeatedField(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(RepeatedField(Of System.String), IEnumerable(Of System.String))
  name.vb: Set(RepeatedField(Of String), IEnumerable(Of String))
- uid: Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  commentId: M:Unity.Reflect.Model.Utils.Set``2(MapField{``0,``1},IDictionary{``0,``1})
  id: Set``2(MapField{``0,``1},IDictionary{``0,``1})
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  nameWithType: Utils.Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  fullName: Unity.Reflect.Model.Utils.Set<TKey, TValue>(MapField<TKey, TValue>, IDictionary<TKey, TValue>)
  type: Method
  source:
    id: Set
    path: ''
    startLine: 37579
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  summary: "\nFills the MapField with the provided content.\n"
  example: []
  syntax:
    content: public static void Set<TKey, TValue>(this MapField<TKey, TValue> mapField, IDictionary<TKey, TValue> values)
    parameters:
    - id: mapField
      type: MapField{{TKey},{TValue}}
      description: The MapField that will be filled.
    - id: values
      type: IDictionary{{TKey},{TValue}}
      description: The content to set into the MapField.
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Set(Of TKey, TValue)(mapField As MapField(Of TKey, TValue), values As IDictionary(Of TKey, TValue))
  overload: Unity.Reflect.Model.Utils.Set*
  nameWithType.vb: Utils.Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Unity.Reflect.Model.Utils.Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
  name.vb: Set(Of TKey, TValue)(MapField(Of TKey, TValue), IDictionary(Of TKey, TValue))
- uid: Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  commentId: M:Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  id: PersistentHash(Unity.Reflect.Model.ISyncModel)
  isExtensionMethod: true
  parent: Unity.Reflect.Model.Utils
  langs:
  - csharp
  - vb
  name: PersistentHash(ISyncModel)
  nameWithType: Utils.PersistentHash(ISyncModel)
  fullName: Unity.Reflect.Model.Utils.PersistentHash(Unity.Reflect.Model.ISyncModel)
  type: Method
  source:
    id: PersistentHash
    path: ''
    startLine: 37591
  assemblies:
  - cs.temp.dll
  namespace: Unity.Reflect.Model
  syntax:
    content: public static string PersistentHash(this ISyncModel syncModel)
    parameters:
    - id: syncModel
      type: Unity.Reflect.Model.ISyncModel
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PersistentHash(syncModel As ISyncModel) As String
  overload: Unity.Reflect.Model.Utils.PersistentHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Unity.Reflect.Model
  commentId: N:Unity.Reflect.Model
  name: Unity.Reflect.Model
  nameWithType: Unity.Reflect.Model
  fullName: Unity.Reflect.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Unity.Reflect.Model.Utils.Set*
  commentId: Overload:Unity.Reflect.Model.Utils.Set
  name: Set
  nameWithType: Utils.Set
  fullName: Unity.Reflect.Model.Utils.Set
- uid: RepeatedField{{T}}
  commentId: '!:RepeatedField{``0}'
  definition: RepeatedField`1
  name: RepeatedField<T>
  nameWithType: RepeatedField<T>
  fullName: RepeatedField<T>
  nameWithType.vb: RepeatedField(Of T)
  fullName.vb: RepeatedField(Of T)
  name.vb: RepeatedField(Of T)
  spec.csharp:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RepeatedField`1
  isExternal: true
  name: RepeatedField<>
  nameWithType: RepeatedField<>
  fullName: RepeatedField<>
  nameWithType.vb: RepeatedField(Of )
  fullName.vb: RepeatedField(Of )
  name.vb: RepeatedField(Of )
  spec.csharp:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: RepeatedField{System.String}
  commentId: '!:RepeatedField{System.String}'
  definition: RepeatedField`1
  name: RepeatedField<String>
  nameWithType: RepeatedField<String>
  fullName: RepeatedField<System.String>
  nameWithType.vb: RepeatedField(Of String)
  fullName.vb: RepeatedField(Of System.String)
  name.vb: RepeatedField(Of String)
  spec.csharp:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: RepeatedField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MapField{{TKey},{TValue}}
  commentId: '!:MapField{``0,``1}'
  definition: MapField`2
  name: MapField<TKey, TValue>
  nameWithType: MapField<TKey, TValue>
  fullName: MapField<TKey, TValue>
  nameWithType.vb: MapField(Of TKey, TValue)
  fullName.vb: MapField(Of TKey, TValue)
  name.vb: MapField(Of TKey, TValue)
  spec.csharp:
  - uid: MapField`2
    name: MapField
    nameWithType: MapField
    fullName: MapField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MapField`2
    name: MapField
    nameWithType: MapField
    fullName: MapField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary{{TKey},{TValue}}
  commentId: '!:IDictionary{``0,``1}'
  definition: IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: MapField`2
  isExternal: true
  name: MapField<, >
  nameWithType: MapField<, >
  fullName: MapField<, >
  nameWithType.vb: MapField(Of , )
  fullName.vb: MapField(Of , )
  name.vb: MapField(Of , )
  spec.csharp:
  - uid: MapField`2
    name: MapField
    nameWithType: MapField
    fullName: MapField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MapField`2
    name: MapField
    nameWithType: MapField
    fullName: MapField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Unity.Reflect.Model.Utils.PersistentHash*
  commentId: Overload:Unity.Reflect.Model.Utils.PersistentHash
  name: PersistentHash
  nameWithType: Utils.PersistentHash
  fullName: Unity.Reflect.Model.Utils.PersistentHash
- uid: Unity.Reflect.Model.ISyncModel
  commentId: T:Unity.Reflect.Model.ISyncModel
  parent: Unity.Reflect.Model
  name: ISyncModel
  nameWithType: ISyncModel
  fullName: Unity.Reflect.Model.ISyncModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
