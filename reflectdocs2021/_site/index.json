{
  "api/Unity.Reflect.AxisInversion_1.html": {
    "href": "api/Unity.Reflect.AxisInversion_1.html",
    "title": "Enum AxisInversion | Unity Reflect | 2.0",
    "keywords": "Enum AxisInversion Sets options for inverting axes when exporting data to the SyncServer. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum AxisInversion Fields Name Description FlipYZ Invert the Y and Z axis None No axis inversion"
  },
  "api/Unity.Reflect.Utils.ILogReceiver.html": {
    "href": "api/Unity.Reflect.Utils.ILogReceiver.html",
    "title": "Interface ILogReceiver | Unity Reflect | 2.0",
    "keywords": "Interface ILogReceiver This interface represents a system that can log information. Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public interface ILogReceiver Methods LogReceived(Logger.Level, String) Log the provided message, knowing its log level. Declaration void LogReceived(Logger.Level level, string msg) Parameters Type Name Description Logger.Level level The log level of the message String msg The message to log"
  },
  "api/Unity.Reflect.PublisherSettings.html": {
    "href": "api/Unity.Reflect.PublisherSettings.html",
    "title": "Struct PublisherSettings | Unity Reflect | 2.0",
    "keywords": "Struct PublisherSettings This struct specifies multiple settings to customize the publisher. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct PublisherSettings Constructors PublisherSettings(LengthUnit, AxisInversion, String) Creates a PublisherSettings object. Declaration public PublisherSettings(LengthUnit unit, AxisInversion axis, string rules = \"\") Parameters Type Name Description LengthUnit unit The length unit to use when exporting data to the SyncServer AxisInversion axis The axis inversion option to use when exporting data to the SyncServer String rules The rules that the Rule Engine will handle Fields AxisInversion The axis inversion option to use when exporting data to the SyncServer Declaration public readonly AxisInversion AxisInversion Field Value Type Description AxisInversion Default Declaration public static readonly PublisherSettings Default Field Value Type Description PublisherSettings LengthUnit The length unit to use when exporting data to the SyncServer. Declaration public readonly LengthUnit LengthUnit Field Value Type Description LengthUnit Rules The rules that the Rule Engine will handle Declaration public readonly string Rules Field Value Type Description String See Also Publisher"
  },
  "api/Unity.Reflect.Model.ColorData.html": {
    "href": "api/Unity.Reflect.Model.ColorData.html",
    "title": "Class ColorData | Unity Reflect | 2.0",
    "keywords": "Class ColorData Inheritance Object ColorData Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public sealed class ColorData : pb.IMessage<ColorData> Constructors ColorData() Declaration public ColorData() ColorData(ColorData) Declaration public ColorData(ColorData other) Parameters Type Name Description ColorData other Fields AFieldNumber Field number for the \"a\" field. Declaration public const int AFieldNumber = 4 Field Value Type Description Int32 BFieldNumber Field number for the \"b\" field. Declaration public const int BFieldNumber = 3 Field Value Type Description Int32 GFieldNumber Field number for the \"g\" field. Declaration public const int GFieldNumber = 2 Field Value Type Description Int32 RFieldNumber Field number for the \"r\" field. Declaration public const int RFieldNumber = 1 Field Value Type Description Int32 Properties A Declaration public float A { get; set; } Property Value Type Description Single B Declaration public float B { get; set; } Property Value Type Description Single Descriptor Declaration public static pbr.MessageDescriptor Descriptor { get; } Property Value Type Description pbr.MessageDescriptor G Declaration public float G { get; set; } Property Value Type Description Single Parser Declaration public static pb.MessageParser<ColorData> Parser { get; } Property Value Type Description pb.MessageParser < ColorData > R Declaration public float R { get; set; } Property Value Type Description Single Methods CalculateSize() Declaration public int CalculateSize() Returns Type Description Int32 Clone() Declaration public ColorData Clone() Returns Type Description ColorData Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description Object other Returns Type Description Boolean Equals(ColorData) Declaration public bool Equals(ColorData other) Parameters Type Name Description ColorData other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 MergeFrom(pb.CodedInputStream) Declaration public void MergeFrom(pb.CodedInputStream input) Parameters Type Name Description pb.CodedInputStream input MergeFrom(ColorData) Declaration public void MergeFrom(ColorData other) Parameters Type Name Description ColorData other ToString() Declaration public override string ToString() Returns Type Description String WriteTo(pb.CodedOutputStream) Declaration public void WriteTo(pb.CodedOutputStream output) Parameters Type Name Description pb.CodedOutputStream output"
  },
  "api/Unity.Reflect.Model.SyncPrefab.html": {
    "href": "api/Unity.Reflect.Model.SyncPrefab.html",
    "title": "Class SyncPrefab | Unity Reflect | 2.0",
    "keywords": "Class SyncPrefab This class specifies information about a collection of SyncObjectInstance . Inheritance Object SyncPrefab Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncPrefab : ISyncModel Constructors SyncPrefab() Creates an empty SyncPrefab. Declaration public SyncPrefab() SyncPrefab(SyncId, String) Creates a SyncPrefab. Declaration public SyncPrefab(SyncId id, string name) Parameters Type Name Description SyncId id The unique ID of the collection String name The name of the collection Fields Extension The file extension for this type Declaration public static string Extension Field Value Type Description String Properties Id The unique identifier of the object instance. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Instances The instances included in the collection. Declaration public List<SyncObjectInstance> Instances { get; set; } Property Value Type Description List < SyncObjectInstance > Name The name of the collection. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name"
  },
  "api/Unity.Reflect.Model.ColorReflection.html": {
    "href": "api/Unity.Reflect.Model.ColorReflection.html",
    "title": "Class ColorReflection | Unity Reflect | 2.0",
    "keywords": "Class ColorReflection Holder for reflection information generated from Color.proto Inheritance Object ColorReflection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class ColorReflection Properties Descriptor File descriptor for Color.proto Declaration public static pbr.FileDescriptor Descriptor { get; } Property Value Type Description pbr.FileDescriptor"
  },
  "api/Unity.Reflect.NoTransactionPendingException.html": {
    "href": "api/Unity.Reflect.NoTransactionPendingException.html",
    "title": "Class NoTransactionPendingException | Unity Reflect | 2.0",
    "keywords": "Class NoTransactionPendingException This exception is thrown by StartTransaction() when a transaction is already pending. Inheritance Object NoTransactionPendingException Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class NoTransactionPendingException : Exception"
  },
  "api/Unity.Reflect.IO.File.html": {
    "href": "api/Unity.Reflect.IO.File.html",
    "title": "Class File | Unity Reflect | 2.0",
    "keywords": "Class File This class provides some methods to save or load models from files. Inheritance Object File Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.IO <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class File Properties Version The current Reflect file version. Declaration public static Version Version { get; } Property Value Type Description Version Methods IsSupportedVersion(Version) Checks if a specific file version is supported by the current Reflect file version. Declaration public static bool IsSupportedVersion(Version version) Parameters Type Name Description Version version The file version that needs to be checked Returns Type Description Boolean Whether the provided file version is supported by the current Reflect file version. Load<T>(String) Loads an from a file. Declaration public static T Load<T>(string path) where T : class, ISyncModel Parameters Type Name Description String path The path of the file to read Returns Type Description T A model of the desired type, created by parsing the provided file Type Parameters Name Description T The type of model that you want to load LoadManifest(String) Loads a from a file. Declaration public static SyncManifest LoadManifest(string path) Parameters Type Name Description String path The path of the file to read Returns Type Description SyncManifest A created parsing the provided file Save(ISyncModel, String) Saves an in a file. Declaration public static void Save(ISyncModel syncModel, string fullPath) Parameters Type Name Description ISyncModel syncModel The model to save String fullPath The path of the file to create or overwrite"
  },
  "api/Unity.Reflect.Data.SyncManifest.html": {
    "href": "api/Unity.Reflect.Data.SyncManifest.html",
    "title": "Class SyncManifest | Unity Reflect | 2.0",
    "keywords": "Class SyncManifest This class specifies information about a project Manifest. Inheritance Object SyncManifest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Data <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncManifest Fields FileName The file name that is to be used to store a manifest Declaration public static readonly string FileName Field Value Type Description String Properties Content A dictionary representation of the manifest Declaration public IReadOnlyDictionary<PersistentKey, ManifestEntry> Content { get; } Property Value Type Description IReadOnlyDictionary < PersistentKey , ManifestEntry > Remaps Gets the remaps dictionary. Declaration public Dictionary<PersistentKey, string> Remaps { get; } Property Value Type Description Dictionary < PersistentKey , String > Methods Append(PersistentKey, String, String, String, SyncBoundingBox) Appends a new line in the manifest. Declaration public void Append(PersistentKey key, string srcHash, string dstPath, string dstHash, SyncBoundingBox bbox) Parameters Type Name Description PersistentKey key The key value String srcHash The source hash String dstPath The destination path String dstHash The destination hash SyncBoundingBox bbox The bounding box ComputeDiff(SyncManifest, out IList<ManifestEntry>, out IList<ManifestEntry>) Compute the diff between the current SyncManifest and a second one. Declaration public void ComputeDiff(SyncManifest other, out IList<ManifestEntry> changed, out IList<ManifestEntry> removed) Parameters Type Name Description SyncManifest other The compared SyncManifest. IList < ManifestEntry > changed The entries that changed in the other manifest IList < ManifestEntry > removed The entries that were removed in the other manifest ExpectedManifestPath(String) Gets the expected absolute path for a relative destination folder. Declaration public static string ExpectedManifestPath(string destinationFolder) Parameters Type Name Description String destinationFolder A path relative to the manifest root path. Returns Type Description String An absolute path for the destination folder. Save(String) Save the manifest in the provided destination folder. Declaration public void Save(string destinationFolder) Parameters Type Name Description String destinationFolder A path relative to the manifest root path."
  },
  "api/Unity.Reflect.Utils.html": {
    "href": "api/Unity.Reflect.Utils.html",
    "title": "Namespace Unity.Reflect.Utils | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect.Utils Classes FileLogReceiver This class is an implementation of ILogReceiver that writes the logs to a file. FileUtils This class provides some utility methods for file handling. Logger Use this class to write and read logs. Interfaces ILogReceiver This interface represents a system that can log information. Enums Logger.Level Sets the level of verbosity of the logger."
  },
  "api/Unity.Reflect.Model.SyncMetadata.html": {
    "href": "api/Unity.Reflect.Model.SyncMetadata.html",
    "title": "Class SyncMetadata | Unity Reflect | 2.0",
    "keywords": "Class SyncMetadata This class specifies a collection of SyncParameter , that can be included in a SyncObject or a SyncObjectInstance . Inheritance Object SyncMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncMetadata Constructors SyncMetadata() Creates an empty SyncMetadata. Declaration public SyncMetadata() SyncMetadata(IDictionary<String, SyncParameter>) Creates a SyncMetadata filled with the provided values. Declaration public SyncMetadata(IDictionary<string, SyncParameter> values) Parameters Type Name Description IDictionary < String , SyncParameter > values The initial values of the SyncMetadata Properties Item[String] Gets or sets a parameter in the collection via its key. Declaration public SyncParameter this[string key] { get; set; } Parameters Type Name Description String key The key of the parameter Property Value Type Description SyncParameter Parameters A dictionary representation of the collection. Declaration public Dictionary<string, SyncParameter> Parameters { get; set; } Property Value Type Description Dictionary < String , SyncParameter > Methods Add(String, SyncParameter) Adds a parameter to the collection, using the specified key. Declaration public void Add(string key, SyncParameter parameter) Parameters Type Name Description String key The parameter key SyncParameter parameter The parameter to add in the collection ContainsKey(String) Checks whether the specified key is present in the collection. Declaration public bool ContainsKey(string key) Parameters Type Name Description String key The searched key Returns Type Description Boolean Whether the specified key is present in the collection Count() Retrieves the number of parameters in the collection. Declaration public int Count() Returns Type Description Int32"
  },
  "api/Unity.Reflect.UI.WebviewForm.html": {
    "href": "api/Unity.Reflect.UI.WebviewForm.html",
    "title": "Class WebviewForm | Unity Reflect | 2.0",
    "keywords": "Class WebviewForm Inheritance Object WebviewForm Namespace : Unity.Reflect.UI <!--h6><strong>Assembly</strong>: CommonUI.dll</h6--> Syntax public class WebviewForm : Form Constructors WebviewForm(String) Declaration public WebviewForm(string resourcesPath) Parameters Type Name Description String resourcesPath Fields OnMessageAccessible Declaration public bool OnMessageAccessible Field Value Type Description Boolean Methods Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. GetSelectedProject(out UnityUser, out UnityProject) Declaration public bool GetSelectedProject(out UnityUser unityUser, out UnityProject unityProject) Parameters Type Name Description UnityUser unityUser UnityProject unityProject Returns Type Description Boolean GetSyncServerWebApiUrl() Declaration public string GetSyncServerWebApiUrl() Returns Type Description String OnMessage(String) Declaration public void OnMessage(string message) Parameters Type Name Description String message"
  },
  "api/Unity.Reflect.Data.PersistentKey.html": {
    "href": "api/Unity.Reflect.Data.PersistentKey.html",
    "title": "Struct PersistentKey | Unity Reflect | 2.0",
    "keywords": "Struct PersistentKey This struct specifies unique information about a specific model, allowing its use as an index in dictionaries. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect.Data <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct PersistentKey Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Equals(PersistentKey) Declaration public bool Equals(PersistentKey other) Parameters Type Name Description PersistentKey other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() GetKey(ISyncModel) Gets the persistent key for a given model. Declaration public static PersistentKey GetKey(ISyncModel model) Parameters Type Name Description ISyncModel model The model whose persistent key is desired Returns Type Description PersistentKey The persistent key of the model GetKey<T>(String) Gets the persistent key for a given model name and type. Declaration public static PersistentKey GetKey<T>(string name) where T : ISyncModel Parameters Type Name Description String name The name of the model Returns Type Description PersistentKey The persistent key of the model Type Parameters Name Description T ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Equality(PersistentKey, PersistentKey) Declaration public static bool operator ==(PersistentKey k1, PersistentKey k2) Parameters Type Name Description PersistentKey k1 PersistentKey k2 Returns Type Description Boolean Inequality(PersistentKey, PersistentKey) Declaration public static bool operator !=(PersistentKey k1, PersistentKey k2) Parameters Type Name Description PersistentKey k1 PersistentKey k2 Returns Type Description Boolean"
  },
  "api/Unity.Reflect.UnityProjectHost.html": {
    "href": "api/Unity.Reflect.UnityProjectHost.html",
    "title": "Class UnityProjectHost | Unity Reflect | 2.0",
    "keywords": "Class UnityProjectHost This class specifies information about a server that can host Unity Projects data. Inheritance Object UnityProjectHost Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class UnityProjectHost Constructors UnityProjectHost(String, String, IEnumerable<String>, String) Creates a UnityProjectHost. Declaration public UnityProjectHost(string serverId, string serverName, IEnumerable<string> endpointAddresses, string accessToken) Parameters Type Name Description String serverId String serverName IEnumerable < String > endpointAddresses String accessToken Properties EndpointAddresses The exposed public addresses of the host. Declaration public IEnumerable<string> EndpointAddresses { get; } Property Value Type Description IEnumerable < String > LocalService A local server host. Declaration public static UnityProjectHost LocalService { get; } Property Value Type Description UnityProjectHost ServerId The ID of the server. Declaration public string ServerId { get; } Property Value Type Description String ServerName The name of the server. Declaration public string ServerName { get; } Property Value Type Description String SyncServerAccessToken The Sync server's access token. Declaration public string SyncServerAccessToken { get; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Model.SyncMap.html": {
    "href": "api/Unity.Reflect.Model.SyncMap.html",
    "title": "Class SyncMap | Unity Reflect | 2.0",
    "keywords": "Class SyncMap This class specifies information about a texture and the associated operations that should be applied on it in Unity. It can be included in a SyncMaterial . Inheritance Object SyncMap Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncMap Constructors SyncMap() Creates an empty SyncMap. Declaration public SyncMap() SyncMap(SyncId, float2, float2, Single, Boolean, Single) Creates a SyncMap. Declaration public SyncMap(SyncId texture, float2 offset, float2 tiling, float brightness = 1F, bool invert = false, float rotation = 0F) Parameters Type Name Description SyncId texture float2 offset float2 tiling Single brightness Boolean invert Single rotation Properties Brightness The brightness to apply to the texture. Declaration public float Brightness { get; set; } Property Value Type Description Single Invert Whether the texture needs to be inverted or not. Declaration public bool Invert { get; set; } Property Value Type Description Boolean Offset An offset to apply to the texture. Declaration public float2 Offset { get; set; } Property Value Type Description float2 RotationDegrees A rotation to apply to the texture, in degrees. Declaration public float RotationDegrees { get; set; } Property Value Type Description Single TextureId The associated texture ID. Declaration public SyncId TextureId { get; set; } Property Value Type Description SyncId Tiling A tiling to apply to the texture. Declaration public float2 Tiling { get; set; } Property Value Type Description float2 Methods Empty() Returns an empty map. Declaration public static SyncMap Empty() Returns Type Description SyncMap Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode()"
  },
  "api/Unity.Reflect.Model.SyncCamera.html": {
    "href": "api/Unity.Reflect.Model.SyncCamera.html",
    "title": "Class SyncCamera | Unity Reflect | 2.0",
    "keywords": "Class SyncCamera This class specifies information about a camera, that can be included in a SyncObject . Inheritance Object SyncCamera Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncCamera Properties Aspect The aspect ratio of the camera. Declaration public float Aspect { get; set; } Property Value Type Description Single Bottom The bottom value of the camera. Declaration public float Bottom { get; set; } Property Value Type Description Single Far The far plane value of the camera. Declaration public float Far { get; set; } Property Value Type Description Single Fov The field of view of the camera. Declaration public float Fov { get; set; } Property Value Type Description Single Left The left value of the camera. Declaration public float Left { get; set; } Property Value Type Description Single Name The name of the camera. Declaration public string Name { get; set; } Property Value Type Description String Near The near plane value of the camera. Declaration public float Near { get; set; } Property Value Type Description Single Orthographic Whether the camera is orthographic or perspective. Declaration public bool Orthographic { get; set; } Property Value Type Description Boolean Right The right value of the camera. Declaration public float Right { get; set; } Property Value Type Description Single Size The size of the camera. Declaration public float Size { get; set; } Property Value Type Description Single Top The top value of the camera. Declaration public float Top { get; set; } Property Value Type Description Single Methods FromOrthographic(String, Single, Single, Single, Single) Creates an orthographic camera. Declaration public static SyncCamera FromOrthographic(string name, float aspect, float size, float near, float far) Parameters Type Name Description String name The name of the camera Single aspect The aspect ratio of the camera Single size The size of the camera Single near The near plane of the camera Single far The far plane of the camera Returns Type Description SyncCamera A generated orthographic camera FromOrthographicFrustum(String, Single, Single, Single, Single, Single, Single) Creates an orthographic frustum camera. Declaration public static SyncCamera FromOrthographicFrustum(string name, float left, float right, float bottom, float top, float near, float far) Parameters Type Name Description String name The name of the camera Single left The left value of the camera Single right The right value of the camera Single bottom The bottom value of the camera Single top The top value of the camera Single near The near plane of the camera Single far The far plane of the camera Returns Type Description SyncCamera A generated orthographic frustum camera FromPerspective(String, Single, Single, Single, Single) Creates a perspective camera. Declaration public static SyncCamera FromPerspective(string name, float aspect, float fov, float near, float far) Parameters Type Name Description String name The name of the camera Single aspect The aspect ratio of the camera Single fov The field of view of the camera Single near The near plane of the camera Single far The far plane of the camera Returns Type Description SyncCamera A generated perspective camera FromPerspectiveFrustum(String, Single, Single, Single, Single, Single, Single) Creates a perspective frustum camera. Declaration public static SyncCamera FromPerspectiveFrustum(string name, float left, float right, float bottom, float top, float near, float far) Parameters Type Name Description String name The name of the camera Single left The left value of the camera Single right The right value of the camera Single bottom The bottom value of the camera Single top The top value of the camera Single near The near plane of the camera Single far The far plane of the camera Returns Type Description SyncCamera A generated perspective frustum camera"
  },
  "api/Unity.Reflect.IPublisherClient.html": {
    "href": "api/Unity.Reflect.IPublisherClient.html",
    "title": "Interface IPublisherClient | Unity Reflect | 2.0",
    "keywords": "Interface IPublisherClient This interface provides some Publishing client features to communicate with a SyncServer. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public interface IPublisherClient Methods Abort() Closes the session and immediately returns without waiting for the SyncServer's acknowledgement. Declaration void Abort() Exceptions Type Condition SessionClosedException If the session has already been closed CloseAndWait() Properly closes the session. This call blocks until the SyncServer acknowledges the call. Declaration void CloseAndWait() Exceptions Type Condition SessionClosedException If the session has already been closed CommitTransaction() Commits the pending transaction. This call blocks until the SyncServer acknowledges the commit (which means that all the transaction operations have to be acknowledged as well). Declaration void CommitTransaction() Exceptions Type Condition NoTransactionPendingException If no transaction is pending SessionClosedException If the session has already been closed RemoveObjectInstance(String) Removes an Object Instance. Declaration Task RemoveObjectInstance(string objectInstanceName) Parameters Type Name Description String objectInstanceName The name of the ObjectInstance to remove Returns Type Description Task A that is resolved whenever the SyncServer acknowledges the deletion, regardless of whether it has been commited or not. Exceptions Type Condition NoTransactionPendingException If no transaction is pending SessionClosedException If the session has already been closed Send(ISyncModel) Sends an to the SyncServer. The server will then create or overwrite the model, depending on whether the model was already in the project or not. Declaration Task Send(ISyncModel model) Parameters Type Name Description ISyncModel model The model to send to the server Returns Type Description Task A that is resolved whenever the SyncServer acknowledges the reception of the model, regardless of whether it has been commited or not. Exceptions Type Condition NoTransactionPendingException If no transaction is pending SessionClosedException If the session has already been closed StartTransaction() Starts a new transaction. This call blocks until the SyncServer acknowledges the call. Declaration void StartTransaction() Exceptions Type Condition TransactionAlreadyPendingException If a transaction is already pending SessionClosedException If the session has already been closed"
  },
  "api/Unity.Reflect.SessionClosedException.html": {
    "href": "api/Unity.Reflect.SessionClosedException.html",
    "title": "Class SessionClosedException | Unity Reflect | 2.0",
    "keywords": "Class SessionClosedException This exception is thrown by StartTransaction() when a transaction is already pending. Inheritance Object SessionClosedException Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SessionClosedException : Exception"
  },
  "api/Unity.Reflect.AxisInversion.html": {
    "href": "api/Unity.Reflect.AxisInversion.html",
    "title": "Enum AxisInversion | Unity Reflect | 2.0",
    "keywords": "Enum AxisInversion Sets options for inverting axes when exporting data to the SyncServer. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum AxisInversion Fields Name Description FlipYZ Invert the Y and Z axis None No axis inversion"
  },
  "api/Unity.Reflect.UnityProject.html": {
    "href": "api/Unity.Reflect.UnityProject.html",
    "title": "Class UnityProject | Unity Reflect | 2.0",
    "keywords": "Class UnityProject This class specifies information about a target Unity Project. Inheritance Object UnityProject Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class UnityProject Constructors UnityProject(UnityProjectHost, String, String) Creates a UnityProject object. Declaration public UnityProject(UnityProjectHost host, string projectId, string projectName) Parameters Type Name Description UnityProjectHost host String projectId String projectName Properties Host The host of the project. Declaration public UnityProjectHost Host { get; } Property Value Type Description UnityProjectHost Name The name of the project. Declaration public string Name { get; } Property Value Type Description String ProjectId The unique identifier of the project. Declaration public string ProjectId { get; } Property Value Type Description String Source The source of the project. Declaration public UnityProject.SourceOption Source { get; } Property Value Type Description UnityProject.SourceOption"
  },
  "api/Unity.Reflect.Model.SyncMesh.html": {
    "href": "api/Unity.Reflect.Model.SyncMesh.html",
    "title": "Class SyncMesh | Unity Reflect | 2.0",
    "keywords": "Class SyncMesh This class specifies information about a mesh, that can be included in a SyncObject and which can be converted into a Unity Mesh. Inheritance Object SyncMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncMesh : ISyncModel, ISyncSendable Constructors SyncMesh() Creates an empty SyncMesh. Declaration public SyncMesh() SyncMesh(SyncId, String) Creates a basic SyncMesh. Declaration public SyncMesh(SyncId id, string name) Parameters Type Name Description SyncId id The unique ID of the SyncMesh String name The name of the SyncMesh SyncMesh(SyncId, String, float3[], float3[], float2[], SyncSubMesh[]) Creates a SyncMesh. Declaration public SyncMesh(SyncId id, string name, float3[] vertices, float3[] normals, float2[] uvs, SyncSubMesh[] subMeshes) Parameters Type Name Description SyncId id The unique ID of the mesh String name The name of the mesh float3 [] vertices The vertices of the mesh float3 [] normals The normals of the mesh float2 [] uvs The UVs of the mesh SyncSubMesh [] subMeshes The submeshes of the mesh Fields Extension The file extension for this type Declaration public static string Extension Field Value Type Description String Properties Id The unique identifier of the mesh. Note that it needs to be unique only amongst the other SyncMeshes. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Name The name of the mesh. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name Normals The normals of the mesh, following the same order as the Vertices list. Declaration public List<float3> Normals { get; set; } Property Value Type Description List < float3 > SubMeshes The different submeshes of this mesh. You can use multiple submeshes to apply multiple materials to the mesh (exactly one material per submesh). The material assignation is done in the SyncObject 's MaterialIds . Declaration public List<SyncSubMesh> SubMeshes { get; set; } Property Value Type Description List < SyncSubMesh > Uvs The UVs of the mesh, following the same order as the Vertices list. Declaration public List<float2> Uvs { get; set; } Property Value Type Description List < float2 > Vertices The vertices of the mesh. Declaration public List<float3> Vertices { get; set; } Property Value Type Description List < float3 >"
  },
  "api/Unity.Reflect.Model.ISyncModel.html": {
    "href": "api/Unity.Reflect.Model.ISyncModel.html",
    "title": "Interface ISyncModel | Unity Reflect | 2.0",
    "keywords": "Interface ISyncModel This interface represents any base Reflect type, that can be serialized or deserialized. Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public interface ISyncModel Properties Id The unique identifier of the model. Note that it needs to be unique only amongst the models of the same type. Declaration SyncId Id { get; } Property Value Type Description SyncId Name The name of the model. Declaration string Name { get; set; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Utils.Logger.LogReceiver_1.html": {
    "href": "api/Unity.Reflect.Utils.Logger.LogReceiver_1.html",
    "title": "Delegate Logger.LogReceiver | Unity Reflect | 2.0",
    "keywords": "Delegate Logger.LogReceiver Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public delegate void LogReceiver(Logger.Level level, string msg); Parameters Type Name Description Logger.Level level String msg"
  },
  "api/Unity.Reflect.IPlayerClient.html": {
    "href": "api/Unity.Reflect.IPlayerClient.html",
    "title": "Interface IPlayerClient | Unity Reflect | 2.0",
    "keywords": "Interface IPlayerClient This interface provides some Player client features to communicate with a Sync Server. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public interface IPlayerClient : IDisposable Methods GetManifest(String) Gets a specific manifest from its source ID. Declaration ManifestAsset GetManifest(string sourceId) Parameters Type Name Description String sourceId The source ID of the desired manifest. Returns Type Description ManifestAsset GetManifests() Gets all the accessible manifests from the Sync server. Declaration IEnumerable<ManifestAsset> GetManifests() Returns Type Description IEnumerable < ManifestAsset > GetSyncModel(String, String) Gets an from a specific project. Declaration ISyncModel GetSyncModel(string sourceId, string relativePath) Parameters Type Name Description String sourceId The source ID of the project String relativePath The relative path of the SyncModel to retrieve Returns Type Description ISyncModel Events ConnectionStatusChanged Triggers when the connection status changes. Declaration event Action<ConnectionStatus> ConnectionStatusChanged Event Type Type Description Action < ConnectionStatus > ManifestUpdated Triggers when a manifest changes in the Sync server. Declaration event EventHandler<ManifestUpdatedEventArgs> ManifestUpdated Event Type Type Description EventHandler < ManifestUpdatedEventArgs >"
  },
  "api/Unity.Reflect.ConnectionStatus.html": {
    "href": "api/Unity.Reflect.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | Unity Reflect | 2.0",
    "keywords": "Enum ConnectionStatus Lists the possible connection status with a Sync server. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ConnectionStatus Fields Name Description Connected Disconnected"
  },
  "api/Unity.Reflect.UI.WebviewForm.DpiType.html": {
    "href": "api/Unity.Reflect.UI.WebviewForm.DpiType.html",
    "title": "Enum WebviewForm.DpiType | Unity Reflect | 2.0",
    "keywords": "Enum WebviewForm.DpiType Namespace : Unity.Reflect.UI <!--h6><strong>Assembly</strong>: CommonUI.dll</h6--> Syntax public enum DpiType : int Fields Name Description Angular Effective Raw"
  },
  "api/Unity.Reflect.Utils.FileUtils.html": {
    "href": "api/Unity.Reflect.Utils.FileUtils.html",
    "title": "Class FileUtils | Unity Reflect | 2.0",
    "keywords": "Class FileUtils This class provides some utility methods for file handling. Inheritance Object FileUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class FileUtils Methods SanitizeName(String, Int32, Int32) Makes a \"dirty name\" sanitized for any file system. Declaration public static string SanitizeName(string dirtyName, int maxLength = 50, int maxLengthTolerance = 6) Parameters Type Name Description String dirtyName The file name that you want to sanitize (without extension) Int32 maxLength The maximum length of the sanitized string Int32 maxLengthTolerance The sanitization process starts truncating if the string size exceeds maxLength + maxLengthTolerance Returns Type Description String A sanitized name"
  },
  "api/Unity.Reflect.UI.html": {
    "href": "api/Unity.Reflect.UI.html",
    "title": "Namespace Unity.Reflect.UI | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect.UI Classes UI This class provides some ways to display some common UI WebviewForm Enums WebviewForm.DpiType"
  },
  "api/Unity.Reflect.Data.html": {
    "href": "api/Unity.Reflect.Data.html",
    "title": "Namespace Unity.Reflect.Data | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect.Data Classes ManifestEntry This class specifies information about an entry in a SyncManifest . SyncManifest This class specifies information about a project Manifest. Structs PersistentKey This struct specifies unique information about a specific model, allowing its use as an index in dictionaries."
  },
  "api/Unity.Reflect.Utils.Logger.html": {
    "href": "api/Unity.Reflect.Utils.Logger.html",
    "title": "Class Logger | Unity Reflect | 2.0",
    "keywords": "Class Logger Use this class to write and read logs. Inheritance Object Logger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class Logger Fields minLevel This value indicates which minimum level of log triggers the OnLog event. Declaration public static Logger.Level minLevel Field Value Type Description Logger.Level Methods AddReceiver(ILogReceiver) Subscribes an ILogReceiver to the logger. Declaration public static void AddReceiver(ILogReceiver receiver) Parameters Type Name Description ILogReceiver receiver The Log Receiver that subscribes to the logger events. Debug(String) Logs a message at Debug level. Declaration public static void Debug(string msg) Parameters Type Name Description String msg Error(String) Logs a message at Error level. Declaration public static void Error(string msg) Parameters Type Name Description String msg Fatal(String) Logs a message at Fatal level. Declaration public static void Fatal(string msg) Parameters Type Name Description String msg Info(String) Logs a message at Info level. Declaration public static void Info(string msg) Parameters Type Name Description String msg RemoveReceiver(ILogReceiver) Unsubscribes an ILogReceiver from the logger. Declaration public static void RemoveReceiver(ILogReceiver receiver) Parameters Type Name Description ILogReceiver receiver The Log Receiver that stops receiving logger events. Warn(String) Logs a message at Warn level. Declaration public static void Warn(string msg) Parameters Type Name Description String msg"
  },
  "api/Unity.Reflect.IO.LocalStorage.html": {
    "href": "api/Unity.Reflect.IO.LocalStorage.html",
    "title": "Class LocalStorage | Unity Reflect | 2.0",
    "keywords": "Class LocalStorage This class helps manage Reflect projects in local storage. Inheritance Object LocalStorage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.IO <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class LocalStorage Constructors LocalStorage(String, Boolean, Boolean) Creates the local storage. Declaration public LocalStorage(string root, bool useServerFolder, bool useProjectNameAsFolderName) Parameters Type Name Description String root The path of the root folder (which will hold all the Reflect projects) Boolean useServerFolder Whether to add the server name at the end of the root path Boolean useProjectNameAsFolderName Whether to use the project name as the folder name. If false, the storage will use the project id instead Methods GetLocalSourceProjectIds(UnityProject) Gets all the IDs of all the source projects that are locally stored in an Unity Project. Declaration public string[] GetLocalSourceProjectIds(UnityProject project) Parameters Type Name Description UnityProject project The Unity Project Returns Type Description String [] An array of source project IDs GetProjectFolder(UnityProject) Gets the folder path of a specific Unity Project. Declaration public string GetProjectFolder(UnityProject project) Parameters Type Name Description UnityProject project The Unity Project Returns Type Description String The folder path of the provided project GetSourceProjectFolder(UnityProject, String) Gets the folder path of a specific source project in an Unity Project. Declaration public string GetSourceProjectFolder(UnityProject project, string sourceId) Parameters Type Name Description UnityProject project The Unity Project String sourceId The source project ID Returns Type Description String The folder path of the provided project HasLocalData(UnityProject) Indicates whether there is local data for a specific Unity Project. Declaration public bool HasLocalData(UnityProject project) Parameters Type Name Description UnityProject project The Unity Project Returns Type Description Boolean LoadManifest(UnityProject, String) Loads the manifest for a locally stored source project in an Unity Project. Declaration public SyncManifest LoadManifest(UnityProject project, string sourceId) Parameters Type Name Description UnityProject project The UnityProject String sourceId The source project ID Returns Type Description SyncManifest The source project's manifest LoadProjectManifests(UnityProject) Loads all the local source projects in a specific Unity Project. Declaration public IEnumerable<SourceProject> LoadProjectManifests(UnityProject project) Parameters Type Name Description UnityProject project The Unity Project Returns Type Description IEnumerable < SourceProject > All the source projects that are locally stored in the provided Unity Project. OpenOrCreateManifest() Opens or creates a manifest for the root folder. Declaration public SyncManifest OpenOrCreateManifest() Returns Type Description SyncManifest A manifest that manages the root folder Sanitize(String) Sanitizes the file name. Declaration public static string Sanitize(string name) Parameters Type Name Description String name A file name to sanitize (without extension) Returns Type Description String A sanitized file name SaveManifest(UnityProject, String, SyncManifest) Saves a manifest in a specific source project. Declaration public void SaveManifest(UnityProject project, string sourceId, SyncManifest syncManifest) Parameters Type Name Description UnityProject project The Unity Project String sourceId The source project ID SyncManifest syncManifest The manifest to save SaveProjectData(UnityProject) Save the project data for a specific Unity Project. Declaration public void SaveProjectData(UnityProject project) Parameters Type Name Description UnityProject project"
  },
  "api/Unity.Reflect.Model.SyncBoundingBox.html": {
    "href": "api/Unity.Reflect.Model.SyncBoundingBox.html",
    "title": "Struct SyncBoundingBox | Unity Reflect | 2.0",
    "keywords": "Struct SyncBoundingBox This struct specifies information about a bounding box. Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct SyncBoundingBox Constructors SyncBoundingBox(float3, float3) Creates a bounding box from its min and max values. Declaration public SyncBoundingBox(float3 min, float3 max) Parameters Type Name Description float3 min The min value of the bounding box float3 max The max value of the bounding box Properties initialized Whether the bounding box includes at least one point. Declaration public bool initialized { get; } Property Value Type Description Boolean Max The max value of the bounding box. Declaration public float3 Max { get; } Property Value Type Description float3 Min The min value of the bounding box. Declaration public float3 Min { get; } Property Value Type Description float3 Methods Encapsulate(float3) Encapsulates a point in the bounding box. Declaration public void Encapsulate(float3 pt) Parameters Type Name Description float3 pt The point to encapsulate in the bounding box Encapsulate(SyncBoundingBox) Encapsulate another bounding box in the current bounding box. Declaration public void Encapsulate(SyncBoundingBox bbox) Parameters Type Name Description SyncBoundingBox bbox The other bounding box to encapsulate in the current one Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Transform(SyncTransform) Applies a transform to the bounding box. Declaration public SyncBoundingBox Transform(SyncTransform transform) Parameters Type Name Description SyncTransform transform The transform to apply to the bounding box Returns Type Description SyncBoundingBox The result of the transform operation."
  },
  "api/Unity.Reflect.Model.SyncId.html": {
    "href": "api/Unity.Reflect.Model.SyncId.html",
    "title": "Struct SyncId | Unity Reflect | 2.0",
    "keywords": "Struct SyncId This struct specifies a unique ID which allows to identify a ISyncModel . Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct SyncId Constructors SyncId(String) Creates a SyncID. Declaration public SyncId(string value) Parameters Type Name Description String value The text value of the ID Properties None The default null ID. Declaration public static SyncId None { get; } Property Value Type Description SyncId Value The text value of the ID. Declaration public string Value { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Equality(SyncId, SyncId) Declaration public static bool operator ==(SyncId id1, SyncId id2) Parameters Type Name Description SyncId id1 SyncId id2 Returns Type Description Boolean Inequality(SyncId, SyncId) Declaration public static bool operator !=(SyncId id1, SyncId id2) Parameters Type Name Description SyncId id1 SyncId id2 Returns Type Description Boolean"
  },
  "api/Unity.Reflect.Model.SyncLight.html": {
    "href": "api/Unity.Reflect.Model.SyncLight.html",
    "title": "Class SyncLight | Unity Reflect | 2.0",
    "keywords": "Class SyncLight This class specifies information about a light that can be included in a SyncObject . Inheritance Object SyncLight Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncLight Constructors SyncLight(SyncLightType, SyncColor, Single, Single, SyncLightIntensityUnit, Single, Single) Creates a SyncLight. Declaration public SyncLight(SyncLightType type, SyncColor color, float temperature, float intensity, SyncLightIntensityUnit intensityUnit, float range, float spotAngle) Parameters Type Name Description SyncLightType type The light type SyncColor color The light color Single temperature The light temperature Single intensity The light intensity SyncLightIntensityUnit intensityUnit The light intensity unit Single range The light range Single spotAngle The light spot angle Properties Color The light color. Declaration public SyncColor Color { get; set; } Property Value Type Description SyncColor Intensity The light intensity, for the provided IntensityUnit . Declaration public float Intensity { get; set; } Property Value Type Description Single IntensityUnit The light intensity unit. Declaration public SyncLightIntensityUnit IntensityUnit { get; set; } Property Value Type Description SyncLightIntensityUnit Range The light range. Declaration public float Range { get; set; } Property Value Type Description Single SpotAngle The light spot angle. Declaration public float SpotAngle { get; set; } Property Value Type Description Single Temperature The light temperature. Declaration public float Temperature { get; set; } Property Value Type Description Single Type The light type. Declaration public SyncLightType Type { get; set; } Property Value Type Description SyncLightType"
  },
  "api/Unity.Reflect.LengthUnit.html": {
    "href": "api/Unity.Reflect.LengthUnit.html",
    "title": "Enum LengthUnit | Unity Reflect | 2.0",
    "keywords": "Enum LengthUnit Sets the length unit to use when exporting data to the SyncServer. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum LengthUnit Fields Name Description Feet Inches Meters"
  },
  "api/Unity.Reflect.ConnectionStatus_1.html": {
    "href": "api/Unity.Reflect.ConnectionStatus_1.html",
    "title": "Enum ConnectionStatus | Unity Reflect | 2.0",
    "keywords": "Enum ConnectionStatus Options for the current connection status of the client. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ConnectionStatus Fields Name Description Connected The client is connected to the SyncServer. Disconnected The client is disconnected from the SyncServer."
  },
  "api/Unity.Reflect.Utils.FileLogReceiver.html": {
    "href": "api/Unity.Reflect.Utils.FileLogReceiver.html",
    "title": "Class FileLogReceiver | Unity Reflect | 2.0",
    "keywords": "Class FileLogReceiver This class is an implementation of ILogReceiver that writes the logs to a file. Inheritance Object FileLogReceiver Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class FileLogReceiver : ILogReceiver Constructors FileLogReceiver(String) Creates a FileLogReceiver. Declaration public FileLogReceiver(string pathWithoutExtension) Parameters Type Name Description String pathWithoutExtension The path of the file to write, without extension. Remarks The File Logger will create a file whose path starts with the provided pathWithoutExtension, and ends with a timestamp, followed by a .log extension. Methods GetLogFileContent() Gets the whole content of the current log file. Declaration public string GetLogFileContent() Returns Type Description String LogReceived(Logger.Level, String) Log the provided message, knowing its log level. Declaration public void LogReceived(Logger.Level level, string msg) Parameters Type Name Description Logger.Level level The log level of the message String msg The message to log Implements ILogReceiver.LogReceived(Logger.Level, String)"
  },
  "api/Unity.Reflect.ProjectServerClient.CloudEnvironment.html": {
    "href": "api/Unity.Reflect.ProjectServerClient.CloudEnvironment.html",
    "title": "Enum ProjectServerClient.CloudEnvironment | Unity Reflect | 2.0",
    "keywords": "Enum ProjectServerClient.CloudEnvironment Sets the possible cloud environments of the Project Server. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum CloudEnvironment Fields Name Description Production Staging Test"
  },
  "api/Unity.Reflect.UnityProjectCollection.StatusOption.html": {
    "href": "api/Unity.Reflect.UnityProjectCollection.StatusOption.html",
    "title": "Enum UnityProjectCollection.StatusOption | Unity Reflect | 2.0",
    "keywords": "Enum UnityProjectCollection.StatusOption Sets the possible status for a collection request. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum StatusOption Fields Name Description AuthenticationError ComplianceError ConnectionError Success"
  },
  "api/Unity.Reflect.Model.SyncLight.Types.Shape_1.html": {
    "href": "api/Unity.Reflect.Model.SyncLight.Types.Shape_1.html",
    "title": "Enum SyncLight.Types.Shape | Unity Reflect | 2.0",
    "keywords": "Enum SyncLight.Types.Shape Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum Shape Fields Name Description Circle Line Point Rectangle"
  },
  "api/Unity.Reflect.IO.SourceProject.html": {
    "href": "api/Unity.Reflect.IO.SourceProject.html",
    "title": "Class SourceProject | Unity Reflect | 2.0",
    "keywords": "Class SourceProject This class specifies information about a Reflect source project. Inheritance Object SourceProject Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.IO <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SourceProject Fields manifest The manifest of the source project. Declaration public SyncManifest manifest Field Value Type Description SyncManifest sourceId The ID of the source project. Declaration public string sourceId Field Value Type Description String"
  },
  "viewerapi/rework/Constructor.html": {
    "href": "viewerapi/rework/Constructor.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "viewerapi/rework/Complex.html": {
    "href": "viewerapi/rework/Complex.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "manual/devguide/NewRadial.html": {
    "href": "manual/devguide/NewRadial.html",
    "title": "Adding a new radial dial widget | Unity Reflect | 2.0",
    "keywords": "Adding a new radial dial widget This walkthrough shows you how to add a new radial widget and respond to a user’s changes in the viewer. The example we use adds a dial to set the time of day and time of year with the Sun Study feature. Model, View, Controller Reflect Viewer uses the unity.touch-framework package to implement the UI, based on centralized MVC. We use UGUI as our View framework, MonoBehaviours as the Controller basis, and we have a centralized Model using UIDATA structs. We are also using Flux C# implementation SharpFlux to manipulate the Model. Model Create new UI Data Model If necessary, create a new UI Data Struct and add to UIStateData, UISessionStateData or UIProjectStateData depending on the data usage. In the example, the TimeOfDayYearDial uses the already-existing SunStudyData, so nothing new was created. View We need to create the outer month dial and inner hour dial. Create a New Radial Prefab Create the prefab and add all the necessary UI controls using the Dial Control prefab from the unity.touch-framework package. The Time of Day Year Radial prefab includes two Dial Control prefabs, one for each of the inner and outer dials, along with three buttons. To create similar radial dials, you can copy and paste the prefabs in the “Assets/Prefabs/UI/Controls/Radial Dials” folder, perhaps as a prefab variant. Place your prefab in this folder as well. Controller Since the Time of Day Year Radial completely replaces the right-side toolbars (such as the Orbit Sidebar) when opened, it was added as a new ToolbarType and controlled via ActiveToolbarController.cs. Note: This may not be applicable to other radial widgets, particularly those that do not replace other toolbars. Add your new ToolbarType Add a new ToolbarType in UIStateData as shown below: Path: Assets/Scripts/UI/UIStateData.cs UIStateData is used in UIStateManager.cs, allowing centralized access to the active toolbar. Path: Assets/Scripts/UI/UIStateData.cs Add Your New Radial to ActiveToolbarController Open ActiveToolbarController.cs and add your new dial with the following steps: Add a new member for the new dial. Update the OnStateDataChanged() event handler. Add your switch case for your DialogType. Now you can create the controller class to handle all the changes and data modifications. Create the TimeRadialUIController.cs class. Every Radial prefab has a controller. Controllers are used to respond to UIData changes and to support UI user events (button presses, sliders, etc.). Do not hesitate to duplicate an existing radial controller (named ___RadialUIController.cs) and rename it. The AltitudeAzimuthRadialUIController.cs or ARScaleRadialUIController.cs scripts are recommended for copying because they are simpler than TimeRadialController.cs. Add member controls for the UI with [SerializeField]. Also add local private members like previousToolbar to display the most recent toolbar on closing the dial. See the code below OnStateDataChanged(): using System; using SharpFlux; Using Unity.TouchFramework; using UnityEngine; using UnityEngine.UI; namespace Unity.Reflect.Viewer.UI { public class TimeRadialUIController : MonoBehaviour { #pragma warning disable CS0649 [SerializeField] DialControl m_HourDialControl; [SerializeField] DialControl m_MonthDialControl; [SerializeField] Button m_MainButton; [SerializeField] Button m_SecondaryButton; [SerializeField] Button m_ResetButton; #pragma warning restore CS0649 int m_DefaultHour; int m_DefaultMonth; public static ToolbarType m_previousToolbar; // display previous toolbar on dial closed readonly MonthLabelConverter m_MonthLabels = new MonthLabelConverter(); readonly HourLabelConverter m_HourLabels = new HourLabelConverter(); Add Listener to UI controls in Start(). void Awake() { UIStateManager.stateChanged += OnStateDataChanged; m_MonthDialControl.labelConverter = m_MonthLabels; m_HourDialControl.labelConverter = m_HourLabels; } void Start() { m_HourDialControl.onSelectedValueChanged.AddListener(OnHourDialValueChanged); m_MonthDialControl.onSelectedValueChanged.AddListener(OnMonthDialValueChanged); m_ResetButton.onClick.AddListener(OnResetButtonClicked); m_MainButton.onClick.AddListener(OnMainButtonClicked); m_SecondaryButton.onClick.AddListener(OnSecondaryButtonClicked); int min, day; (m_DefaultHour, min) = SunStudyUIController.GetHourMinute(UIStateManager.current.stateData.sunStudyData.timeOfDay); (m_DefaultMonth, day) = SunStudyUIController.GetMonthDay(DateTime.Now.Year, UIStateManager.current.stateData.sunStudyData.timeOfYear); m_HourDialControl.selectedValue = m_DefaultHour; m_MonthDialControl.selectedValue = m_DefaultMonth; } OnStateDataChanged, remember to set the Dials’ selectedValue. This moves the dials whenever the appropriate state data is changed, such as sunStudyData.timeOfDay via the Sun Study Dialog time sliders. OnMonthDialValueChanged changes the Sun Study Data via dispatching the SetSunStudy action. void OnStateDataChanged(UIStateData data) { m_HourDialControl.selectedValue = GetFloatFromMin(data.sunStudyData.timeOfDay); m_MonthDialControl.selectedValue = GetFloatFromDay(data.sunStudyData.timeOfYear); if (data.activeToolbar != ToolbarType.TimeOfDayYearDial && data.activeToolbar != ToolbarType.AltitudeAzimuthDial) { m_previousToolbar = data.activeToolbar; } } void OnMonthDialValueChanged(float value) { var data = UIStateManager.current.stateData.sunStudyData; data.timeOfYear = GetDayFromFloat(value); UIStateManager.current.Dispatcher.Dispatch(Payload<ActionTypes>.From(ActionTypes.SetSunStudy, data)); } // … code not shown, see full script for reference } } Path: Assets/Scripts/UI/Controllers/TimeRadialUIController.cs At this stage, you can tie everything together. Add the TimeRadialUIController Component to the Prefab Edit the prefab (enter nested prefab edition mode). In the Inspector, add the component. If you created your Radial prefab from scratch instead of copying an existing prefab, make sure you have all required components (Canvas, Canvas Group, Graphic Raycaster, and Dialog Window). Put your Prefab In the Scene Place your Options Dialog under UI Main in the Reflect scene next to other sidebar prefabs. Select “UI Root” GameObject. There is an Active Toolbar Controller in the Inspector window. Drag and drop the Time of Day Year Radial Variant to the Inspector window to set the value. Disable the Canvas component to hide the radial by default. Visibility is controlled by DialogWindow component and the ActiveToolbarController. Create the button in the toolbar and link to the radial The Time Dial is opened via the Sun Study button on the right toolbar (Orbit Sidebar). Make sure to create the button on the Orbit Sidebar prefab and add in necessary code to RightSidebarController.cs. The dial opens when the Sun Study button is clicked. Compile and Run Compile and run. Check to make sure that the new dial opens when you click it. If so, keep going to implement the rest of your UI controller. Congratulations, you just added your own custom dial to the Unity Reflect Viewer!"
  },
  "manual/devguide/NewMapping.html": {
    "href": "manual/devguide/NewMapping.html",
    "title": "Adding a new input mapping | Unity Reflect | 2.0",
    "keywords": "Adding a new input mapping Sometimes users will need to change or add new Input Mappings. In this document, we will show how we add a new mapping. The viewer uses Unity’s new Input System. Adding a Quick Pan Mapping It was requested that the middle mouse button in the viewer be mapped to a PAN action. Opening the Input Action Editor Go to Assets/Settings and double-click on the UnityEditorMapping: This opens the Input Action Editor. Adding a new Quick Pan Action We see the similar Quick Zoom Action which is mapped to the scroll wheel. We will add a new Action by pressing + next to the Actions header. Rename it to Quick Pan Action . Select the Right-Click and delete binding. On the right hand side, in the Action Type dropdown, select Value”, and Control Type “Vector 2”, then click the “+” next to the Quick Pan Action header, this will let you choose a new “Mouse Drag Composite”. Now, configure the Mouse Drag: Select Mouse/Middle Button Select Axis 1/Delta/X Select Axis 2/Delta/Y We also need to scale the Delta/X/Y values. Click on the Mouse Drag line, and press on “+” next to Processors on the right-hand side. Pick “Scale”. Enter 0.003 for both X, Y values. Your entry should look like this: Note: Don't forget to press Save Asset . Coding the New Action Callback Now you need to add the code for this new action: Open UINavigationController.cs, and go to the Awake() method. You will need to add this line: m_InputActionAsset[\"Quick Pan Action\"].performed += OnQuickPan; And implement the OnQuickPan() callback. You can look at the OnQuickZoom() method as an example. private void OnQuickPan(InputAction.CallbackContext context) { StopCoroutine(\"DelayEndQuickTool\" ); StartCoroutine(\"DelayEndQuickTool\", new QuickToolData() { delay = k_ToolDebounceTime, toolType = ToolType.PanTool }); var delta = context.ReadValue<Vector2>(); Pan(delta); } Compile and Run Compile and Run and try your new Action Mapping. You should see the Toolbar on the right look like this, and be able to PAN when you press the middle mouse button and move the mouse around."
  },
  "manual/commondocs/plugins/SketchUp.html": {
    "href": "manual/commondocs/plugins/SketchUp.html",
    "title": "The Reflect plugin for SketchUp | Unity Reflect | 2.0",
    "keywords": "The Reflect plugin for SketchUp The Reflect plugin supports the following versions of SketchUp: 2019 2020 Installing To install the plugin, run the Reflect installer and select your version or versions of SketchUp. Syncing and exporting Syncing To begin real-time syncing with Reflect, go to Extensions > Unity > Sync or click the toolbar button: Exporting To export the current model to a Unity project, go to Extensions > Unity > Export or click the toolbar button: Syncing and exporting Reflect offers multiple storage locations for your projects. To create a new Reflect project, click New Project in the bottom left corner of the window. Local You can publish data to a project on your local computer: Network You can publish data to a local network: Click the drop-down menu to select your desired sync server. For more information about configuring a local network, see Network Configuration . Cloud Reflect also gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "manual/commondocs/plugins/Rhino.html": {
    "href": "manual/commondocs/plugins/Rhino.html",
    "title": "The Reflect plugin for Rhino | Unity Reflect | 2.0",
    "keywords": "The Reflect plugin for Rhino The Reflect plugin supports Rhino 6. Installing the plugin To install the plugin, run the Reflect installer and select McNeel Rhino plugins . Managing the plugin To enable or disable the Reflect plugin in Rhino, run the command PlugInManager and locate Reflect in the list of available plugins. Showing the GUI To open the Reflect plugin, run the Rhino command ReflectGUI . Double-sided materials are disabled by default. To enable double-sided materials for every object in this scene, check Double Sided. <!--* To enable double-sided materials for a specific object, select the object --> Syncing and exporting Reflect offers multiple storage locations for your projects. To create a new Reflect project, click New Project in the bottom left corner of the window. Local You can publish data to a project on your local computer: Network You can publish data to a local network: Click the drop-down menu to select your desired sync server. For more information about configuring a local network, see Network Configuration . Cloud Reflect also gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "manual/commondocs/ReflectViewer.html": {
    "href": "manual/commondocs/ReflectViewer.html",
    "title": "Using the Reflect Viewer | Unity Reflect | 2.0",
    "keywords": "Using the Reflect Viewer This page provides an overview of the default Unity Reflect Viewer. Opening a project The Viewer opens to the Projects screen by default. To refresh the list of projects, click the Refresh button ( ) in the top right corner of the screen. To open a project, click its name in the projects list. For more information about the options on the Projects screen and how Reflect projects are stored and synced, see Managing your storage . The Viewer interface 1. Main menu The main menu is located in the top left corner of the Viewer. Logging in or out To log in or out or to access the BIM 360 Dashboard, click the Account icon. Opening the Projects screen To open the Projects screen, click the Projects icon. <!--<img src=\"Projects.png\" style=\"width: 150px; padding: 5px;\">--> Enabling Help Mode For assistance with the Viewer tools, click the Help Mode icon. To return to the Viewer, click the Help Mode icon again. Turning the sync service on or off Click the Sync status icon to turn the sync service on or off. <!--<img src=\".png\" style=\"width: 150px; padding: 5px;\">--> When the service is active , the icon looks like this: When the service is inactive , the icon looks like this: 2. Scene settings Filtering BIM visibility Click the Filters button ( ) to toggle the visibility of BIM data. Tap the eye icon next to each filter to turn it on or off. To see a different group of filters, click Category and select a category from the drop-down menu. Toggling texture and light data Click the Scene Options button ( ) to turn texture and light data on or off. Adjusting the position of the sun The Sun Study buttons ( ) let you adjust the position of the sun based on a specific time, date, and location. Entering specific values The Sun Study button on the left-hand side of the screen lets you adjust the position of the sun by entering specific values. You can control any of the following parameters: Parameter Description Time of Day The time of day in 24-hour format. Time of Year The day and month of the year. UTC Offset The time difference from UTC in hours and minutes. Latitude Latitude of the desired location. (0 degrees is the equator, 90 degrees is the North Pole, and -90 degrees is the South Pole.) Longitude Longitude of the desired location. (0 degrees is Greenwich, with positive values to the east and negative values to the west.) North Angle The direction of north in degrees. Using the radial menu The Sun Study button on the right-hand side of the screen lets you adjust the position of the sun by rotating the radial menu. Click to switch to the date and time dials. The outer dial sets the date in months and the inner dial sets the time of day in 24-hour format. Click to switch to the coordinate dials. The outer dial sets the solar azimuth and the inner dial sets the solar altitude. These coordinates are translated into the directional light’s rotation. Click to reset the dials to their starting position. 3. Stats menu Showing the Stats Info menu To display statistics about your scene, click the Stats Info button: 4. Navigation cube Click the navigation cube for easy access to left, right, and top views of your model. Click the house icon to return to the default view. 5. Contextual menu The Reflect Viewer lets you move, orbit, or zoom around your scene. The currently selected navigation control is shown in the right-hand menu. Move (Pan) To move the camera from your current position, use the WASD keys to move left/right/forward/backward and the Q and E keys to move up and down. You can also pan the camera freely by clicking and dragging with the middle mouse button or by holding the Alt key while you click and drag. Orbit To rotate the view around your current position, right-click and drag inside the Viewer. Zoom Use your scroll wheel to zoom in and out. You can also double-click a point inside the Viewer to jump there quickly. Seeing BIM information about a particular object Click the BIM Info button ( ) and click on an object in your scene to highlight it and display its metadata. To switch between metadata categories, click the down arrow: 6. Device menu The button in the lower right corner of the Viewer displays the current device mode. Click this button to expand or collapse the device mode menu. Enabling VR or AR mode Click one of the device mode buttons to switch to the corresponding device mode. For more information, see: Viewer AR Viewer VR"
  },
  "manual/commondocs/ReflectNewProject.html": {
    "href": "manual/commondocs/ReflectNewProject.html",
    "title": "Creating a project in Reflect WIP | Unity Reflect | 2.0",
    "keywords": "Creating a project in Reflect WIP Reflect offers a new way to manage your projects. This system leverages Unity’s existing Organization & Project structure. To create a new project in Reflect: Open Unity Reflect and click New Project. Enter a project name and click Create."
  },
  "manual/commondocs/ViewerVR.html": {
    "href": "manual/commondocs/ViewerVR.html",
    "title": "VR mode in the Reflect Viewer | Unity Reflect | 2.0",
    "keywords": "VR mode in the Reflect Viewer Enabling VR Note: You can only enable VR if your Unity Project is set up for a VR headset. Unity Reflect currently supports the HTC Vive and Oculus Rift. For more information, see the Unity Manual . To enable VR mode in the Viewer: Click the button in the lower right corner of the Viewer to expand the device mode menu. Click the VR button. Using VR HTC Vive controls Teleport : Use the right trackpad to display the teleport beam and select a location and use the right trigger to teleport. Fly : Use the left trackpad. Oculus Rift controls Teleport : A + right trigger Fly : X Turn 45 degrees : Right thumbstick Interact with UI : Triggers"
  },
  "manual/commondocs/ProjectsPermissions.html": {
    "href": "manual/commondocs/ProjectsPermissions.html",
    "title": "Managing project permissions | Unity Reflect | 2.0",
    "keywords": "Managing project permissions By default, only you have permission to see and push data to your projects. To invite others to collaborate on a project, add them through Unity’s developer portal: Log in to https://dashboard.unity3d.com/ and navigate to Settings > Projects . Select your project. In the left navigation bar, select Users . Enter the email address of the person you want to invite and click Add ."
  },
  "api/Unity.Reflect.TransactionAlreadyPendingException.html": {
    "href": "api/Unity.Reflect.TransactionAlreadyPendingException.html",
    "title": "Class TransactionAlreadyPendingException | Unity Reflect | 2.0",
    "keywords": "Class TransactionAlreadyPendingException This exception is thrown by StartTransaction() when a transaction is already pending. Inheritance Object TransactionAlreadyPendingException Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class TransactionAlreadyPendingException : Exception"
  },
  "api/Unity.Reflect.IO.html": {
    "href": "api/Unity.Reflect.IO.html",
    "title": "Namespace Unity.Reflect.IO | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect.IO Classes File This class provides some methods to save or load models from files. LocalStorage This class helps manage Reflect projects in local storage. ReflectVersionException This exception is thrown whenever an unsupported Reflect file version is used. SourceProject This class specifies information about a Reflect source project."
  },
  "api/Unity.Reflect.Utils.Logger.Level_1.html": {
    "href": "api/Unity.Reflect.Utils.Logger.Level_1.html",
    "title": "Enum Logger.Level | Unity Reflect | 2.0",
    "keywords": "Enum Logger.Level Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum Level Fields Name Description Debug Error Fatal Info Warn"
  },
  "api/Unity.Reflect.UnityProject.SourceOption.html": {
    "href": "api/Unity.Reflect.UnityProject.SourceOption.html",
    "title": "Enum UnityProject.SourceOption | Unity Reflect | 2.0",
    "keywords": "Enum UnityProject.SourceOption Sets the possible sources for a UnityProject. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum SourceOption Fields Name Description LocalStorage ProjectServer Unspecifified"
  },
  "api/Unity.Reflect.Model.SyncTransform.html": {
    "href": "api/Unity.Reflect.Model.SyncTransform.html",
    "title": "Struct SyncTransform | Unity Reflect | 2.0",
    "keywords": "Struct SyncTransform This struct specifies information about a transform. Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct SyncTransform Constructors SyncTransform(float3, quaternion, float3) Creates a SyncTransform. Declaration public SyncTransform(float3 position, quaternion rotation, float3 scale) Parameters Type Name Description float3 position The position of the transform quaternion rotation The rotation of the transform float3 scale The scale of the transform SyncTransform(float4x4) Creates a SyncTransform. Declaration public SyncTransform(float4x4 matrix) Parameters Type Name Description float4x4 matrix A matrix to convert into a transform. Properties Identity Gets the identity transform. Declaration public static SyncTransform Identity { get; } Property Value Type Description SyncTransform Position The position of the transform. Declaration public float3 Position { get; set; } Property Value Type Description float3 Rotation The rotation of the transform. Declaration public quaternion Rotation { get; set; } Property Value Type Description quaternion Scale The scale of the transform. Declaration public float3 Scale { get; set; } Property Value Type Description float3 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) FlipYZ() Creates a new transform by flipping the Y and Z axes. Declaration public SyncTransform FlipYZ() Returns Type Description SyncTransform The result of the operation. GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Inverse() Computes the inverse transform. Declaration public SyncTransform Inverse() Returns Type Description SyncTransform The result of the operation. TransformPoint(float3) Applies the transform to a provided point. Declaration public float3 TransformPoint(float3 pt) Parameters Type Name Description float3 pt The point to apply the transform to Returns Type Description float3 The result of the operation. TransformVector(float3) Applies the transform to a provided vector. Declaration public float3 TransformVector(float3 vec) Parameters Type Name Description float3 vec The vector to apply the transform to Returns Type Description float3 The result of the operation. Operators Equality(SyncTransform, SyncTransform) Declaration public static bool operator ==(SyncTransform t1, SyncTransform t2) Parameters Type Name Description SyncTransform t1 SyncTransform t2 Returns Type Description Boolean Inequality(SyncTransform, SyncTransform) Declaration public static bool operator !=(SyncTransform t1, SyncTransform t2) Parameters Type Name Description SyncTransform t1 SyncTransform t2 Returns Type Description Boolean Multiply(SyncTransform, SyncTransform) Declaration public static SyncTransform operator *(SyncTransform left, SyncTransform right) Parameters Type Name Description SyncTransform left SyncTransform right Returns Type Description SyncTransform"
  },
  "api/Unity.Reflect.Player.html": {
    "href": "api/Unity.Reflect.Player.html",
    "title": "Class Player | Unity Reflect | 2.0",
    "keywords": "Class Player An IPlayerClient factory. Inheritance Object Player Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class Player Methods CreateClient(UnityProject, UnityUser, ProjectServerClient) Creates and connects an IPlayerClient to a Sync Server, for a specific user and targeting a specific Unity Project. Declaration public static IPlayerClient CreateClient(UnityProject project, UnityUser user, ProjectServerClient projectServerClient) Parameters Type Name Description UnityProject project The Unity Project to fetch data from. UnityUser user The desired Unity User. ProjectServerClient projectServerClient A Project Server client that points to the desired Project Server. Returns Type Description IPlayerClient A player client that is connected to the SyncServer. Exceptions Type Condition ConnectionException If the connection with the SyncServer fails"
  },
  "api/Unity.Reflect.ProjectServer.Services.Authentication.ProjectAccessType_1.html": {
    "href": "api/Unity.Reflect.ProjectServer.Services.Authentication.ProjectAccessType_1.html",
    "title": "Enum ProjectAccessType | Unity Reflect | 2.0",
    "keywords": "Enum ProjectAccessType Namespace : Unity.Reflect.ProjectServer.Services.Authentication <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ProjectAccessType Fields Name Description Publish View"
  },
  "viewerapi/Colliders.html": {
    "href": "viewerapi/Colliders.html",
    "title": "Colliders WIP | Unity Reflect | 2.0",
    "keywords": "Colliders WIP Overview Key points highlighted example Annotated sample code public class AddColliderNode : ReflectNode<AddCollider> { public GameObjectInput input = new GameObjectInput(); protected override AddCollider Create(ISyncModelProvider provider, IExposedPropertyTable resolver) { var node = new AddCollider(); input.streamEvent = node.OnGameObjectEvent; return node; } } public class AddCollider : IReflectNodeProcessor { public void OnGameObjectEvent(SyncedData<GameObject> stream, StreamEvent streamEvent) { if (streamEvent == StreamEvent.Added) { var gameObject = stream.data; if (!gameObject.TryGetComponent(out MeshFilter meshFilter)) return; // We add this safety check in case the object already has its own collider if (gameObject.TryGetComponent(out MeshCollider _)) return; var collider = gameObject.AddComponent<MeshCollider>(); collider.sharedMesh = meshFilter.sharedMesh; } } public void OnPipelineInitialized() { // not needed } public void OnPipelineShutdown() { // not needed } } public class AddingCollidersSample : MonoBehaviour { void Start() { // Create a pipeline asset var pipelineAsset = ScriptableObject.CreateInstance<PipelineAsset>(); // Create the nodes required for this sample var addColliderNode = pipelineAsset.CreateNode<AddColliderNode>(); // Create the rest of the pipeline var projectStreamer = pipelineAsset.CreateNode<ProjectStreamerNode>(); var instanceProvider = pipelineAsset.CreateNode<SyncObjectInstanceProviderNode>(); var dataProvider = pipelineAsset.CreateNode<DataProviderNode>(); var meshConverter = pipelineAsset.CreateNode<MeshConverterNode>(); var materialConverter = pipelineAsset.CreateNode<MaterialConverterNode>(); var textureConverter = pipelineAsset.CreateNode<TextureConverterNode>(); var instanceConverter = pipelineAsset.CreateNode<InstanceConverterNode>(); // Inputs / Outputs pipelineAsset.CreateConnection(projectStreamer.assetOutput, instanceProvider.input); pipelineAsset.CreateConnection(instanceProvider.output, dataProvider.instanceInput); pipelineAsset.CreateConnection(dataProvider.syncMeshOutput, meshConverter.input); pipelineAsset.CreateConnection(dataProvider.syncMaterialOutput, materialConverter.input); pipelineAsset.CreateConnection(dataProvider.syncTextureOutput, textureConverter.input); pipelineAsset.CreateConnection(dataProvider.instanceDataOutput, instanceConverter.input); pipelineAsset.CreateConnection(instanceConverter.output, addColliderNode.input); // Params pipelineAsset.SetParam(dataProvider.hashCacheParam, projectStreamer); pipelineAsset.SetParam(materialConverter.textureCacheParam, textureConverter); pipelineAsset.SetParam(instanceConverter.materialCacheParam, materialConverter); pipelineAsset.SetParam(instanceConverter.meshCacheParam, meshConverter); // Add a ReflectPipeline node and start the pipeline var reflectBehaviour = gameObject.AddComponent<ReflectPipeline>(); reflectBehaviour.pipelineAsset = pipelineAsset; reflectBehaviour.InitializeAndRefreshPipeline(new SampleSyncModelProvider()); } }"
  },
  "manual/devguide/DevGuide.html": {
    "href": "manual/devguide/DevGuide.html",
    "title": "Unity Reflect developer guide | Unity Reflect | 2.0",
    "keywords": "Unity Reflect developer guide <!--<h4 class=\"red\">Introduction</h2>--> Customizing the Viewer Start coding with Unity Reflect Importing data from Reflect Tutorials Adding a new dialog Adding a new input mapping Adding a new radial dial API documentation Publisher API Viewer API <!-- * Reflect packages * Importing data to the Unity Editor * Customizing the Viewer * Creating custom pipelines (> Viewer API) * [Installing the Reflect package](PackageInstall.md) ## Reflect packages ## Viewer API -->"
  },
  "manual/commondocs/plugins/Revit.html": {
    "href": "manual/commondocs/plugins/Revit.html",
    "title": "The Reflect plugin for Revit | Unity Reflect | 2.0",
    "keywords": "The Reflect plugin for Revit The Reflect plugin is available for the following versions of Revit: 2018* 2019 2020 2021 Revit 2018 is still supported but is not maintained due to Autodesk’s policy of supporting only the most recent three versions. Installation To install the plugin, run the Reflect installer and select your version or versions of Revit. Once the Revit plugin is installed on your computer, you can start the Reflect service from inside Revit to begin real-time syncing. <!---**Create a Unity Project to sync with Reflect** The beta version of Reflect requires you to create a Project from the Hub. Future versions will allow you to create projects within Reflect. 1. Open the Unity Hub. 2. Click **Projects** and then click the drop-down arrow next to **New**. 3. Select version 2019.x (or later) and create your Project.---> Syncing To start syncing Revit data with the Unity Editor: Open Revit. If prompted to grant permissions to the Unity plugin, select Load Once (or Always Load to avoid future prompts). Open the Revit project you want to sync with Reflect. If the Reflect plugin is installed, the ribbon includes a Unity tab: Select a 3D view to publish with Reflect, either in the project browser or the default Revit 3D view. Selecting a view in the project browser Selecting the default view Click Start to launch the Reflect service. <!-- 5. In the **Destination Project** field, select the Unity Project you just created. 6. Open the Reflect Viewer. 8. Click the folder icon ![Annotation1](../images/Annotation1.png) and open your Unity Project. 9. Click the sync icon ![Annotation2](../images//Annotation2.png) to begin real-time syncing. When this icon is green, syncing is active: ![ReflectSyncGreen](../images/ReflectSyncGreen.png) <span style=\"color: red;\">+ stop syncing, etc.</span> ## <span style=\"color: red;\">Exporting</span> <span style=\"color: red;\">TO UPDATE</span> --> Syncing and exporting Reflect offers multiple storage locations for your projects. To create a new Reflect project, click New Project in the bottom left corner of the window. Local You can publish data to a project on your local computer: Network You can publish data to a local network: Click the drop-down menu to select your desired sync server. For more information about configuring a local network, see Network Configuration . Cloud Reflect also gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "manual/commondocs/ViewerAR.html": {
    "href": "manual/commondocs/ViewerAR.html",
    "title": "AR modes in the Reflect Viewer | Unity Reflect | 2.0",
    "keywords": "AR modes in the Reflect Viewer The Reflect Viewer for iOS and Android devices offers the ability to view your models in AR. <!-- > **Note:** On desktop, you can enable AR in a simulated view using Project MARS. For more information about configuring the simulation, see the [Unity MARS documentation](https://docs.unity3d.com/Packages/com.unity.mars@1.2/manual/GettingStarted.html#setting-up-the-mars-device-and-simulation-views). --> To enable AR mode in the Viewer: Tap the button in the lower right corner of the Reflect Viewer to expand the device mode menu. Tap the AR button. You can now select your AR mode of choice. AR modes View Match This mode displays your model at 1:1 scale based on your camera view. To set up View Match: Tap the View Match tile. Follow the instructions on screen to match your model to your environment. Corner Match This mode matches the walls in your model to the real world at 1:1 scale. To set up Corner Match: Tap the Corner Match tile. Follow the instructions on screen to match your model to your environment. Tabletop AR This mode lets you display your model on a surface. To set up Tabletop AR: Open a model in the Viewer, enable AR, and tap the Tabletop AR tile. Move your device back and forth to find a horizontal surface. Tap OK. Use the contextual menu on the right-hand side of the screen to rotate and scale the model to your satisfaction. Tap OK."
  },
  "manual/commondocs/SystemRequirements.html": {
    "href": "manual/commondocs/SystemRequirements.html",
    "title": "Reflect compatibility | Unity Reflect | 2.0",
    "keywords": "Reflect compatibility This page lists the software compatibility and recommended specifications for the latest version of Unity Reflect. Compatible Unity version Unity 2019.4 Compatible third-party software Software Supported versions Autodesk Revit 2018*, 2019, 2020, 2021 Autodesk Navisworks Manage and Simulate 2018*, 2019, 2020, 2021 Rhino 6 SketchUp 2019, 2020 *Still supported but not be maintained due to Autodesk’s policy of supporting only the past 3 versions. Recommended system specifications Note: Hardware requirements may increase depending on the model you are running. Recommended for Windows OS: Windows 10 CPU: Intel Core i5 7th Gen or equivalent RAM: 16GB GPU: Nvidia GeForce GTX 1050ti Recommended for MacOS OS: Mojave CPU: Intel Core i5 7th Gen or equivalent RAM: 16GB GPU: Radeon Pro 555X"
  },
  "manual/commondocs/ReflectLicenseAssign.html": {
    "href": "manual/commondocs/ReflectLicenseAssign.html",
    "title": "Managing project permissions | Unity Reflect | 2.0",
    "keywords": "Managing project permissions By default, only you have permission to see and push data to your projects. To invite others to collaborate on a project, add them through Unity’s developer portal: Log in to https://dashboard.unity3d.com/ and navigate to Settings > Projects . Select your project. In the left navigation bar, select Users . Enter the email address of the person you want to invite and click Add . <!-- 5. By default, Unity will assign a Unity Teams seat to users you invite. If you do not want to assign them a seat, deselect this option: ![Deselect seat assignment](images/ReflectDeselectSeat.png) If the users you invite will use Reflect with the Unity Editor, they must be assigned a Unity Pro license. 6. Click **Add**. -->"
  },
  "viewerapi/rework/NavMesh.html": {
    "href": "viewerapi/rework/NavMesh.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "viewerapi/rework/MetadataFilter.html": {
    "href": "viewerapi/rework/MetadataFilter.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "viewerapi/rework/Material.html": {
    "href": "viewerapi/rework/Material.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "viewerapi/samples.html": {
    "href": "viewerapi/samples.html",
    "title": "Samples | Unity Reflect | 2.0",
    "keywords": "Samples The Reflect development team provides sample code for common use cases. This code can be opened and executed from the Unity Editor without an internet connection, authentication, or cloud access. Locating the sample code To access the sample code, you need to have the Reflect package installed: see Installing the Reflect package for instructions. To import the samples to the Unity Editor, open Unity Reflect in the Package Manager and click Import . Once the samples are imported, you can access the code from the Projects menu in the Unity Editor under Assets > Samples > Reflect . 01 - Basic Pipeline The simplest pipeline with the minimum number of required elements. 02 - Adding Colliders Adds a node at the end of the pipeline to add colliders to the GameObject generated by the pipeline. 03 - Material Replacement (Basic) Replaces Material after the GameObject is created. 04 - Material Replacement (Advanced) Replaces Material using metadata, without downloading the original. 05 - Vegetation Replacement Leverages metadata to replace some objects with a custom Prefab: in this sample, replacing Revit's vegetation RPC. 06 - Instance Replacement Uses metadata to replace objects with a custom Prefab in a memory-efficient way. 07 - Filtering And Replacement Combines two custom nodes to filter and replace some objects with a custom Prefab. 08 - Metadata Soft Filtering Leverages Metadata on each object to create a visibility filter. 09 - Metadata Hard Filtering Leverages Metadata early in the pipeline to prevent some objects from being generated in the scene. 10 - Shader Replacement Replaces and customizes the Shader used to create the Material."
  },
  "api/Unity.Reflect.Model.SyncRPC.html": {
    "href": "api/Unity.Reflect.Model.SyncRPC.html",
    "title": "Class SyncRPC | Unity Reflect | 2.0",
    "keywords": "Class SyncRPC This class specifies information about a RPC that can be included in a SyncObject . Inheritance Object SyncRPC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncRPC Constructors SyncRPC(String) Creates a SyncRPC. Declaration public SyncRPC(string name) Parameters Type Name Description String name The name of the RPC Properties Name The name of the RPC. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Model.SyncSubMesh.html": {
    "href": "api/Unity.Reflect.Model.SyncSubMesh.html",
    "title": "Class SyncSubMesh | Unity Reflect | 2.0",
    "keywords": "Class SyncSubMesh This class specifies information about a single submesh, that can be included in a SyncMesh . Inheritance Object SyncSubMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncSubMesh Constructors SyncSubMesh() Creates an empty SyncSubMesh. Declaration public SyncSubMesh() SyncSubMesh(IEnumerable<Int32>) Creates a SyncSubMesh. Declaration public SyncSubMesh(IEnumerable<int> triangles) Parameters Type Name Description IEnumerable < Int32 > triangles The triangles of the submesh Fields Triangles The triangles in the submesh. A triangle should be a sequence of 3 integers, each pointing to a correct vertex ID of the parent SyncMesh . Therefore, the list count should be a multiple of 3. Declaration public List<int> Triangles Field Value Type Description List < Int32 >"
  },
  "api/Unity.Reflect.Model.SyncMaterial.html": {
    "href": "api/Unity.Reflect.Model.SyncMaterial.html",
    "title": "Class SyncMaterial | Unity Reflect | 2.0",
    "keywords": "Class SyncMaterial This class specifies information about a material that can be used in a SyncObject and that can be converted into a Unity Material. Inheritance Object SyncMaterial Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncMaterial : ISyncModel, ISyncSendable Constructors SyncMaterial() Creates an empty SyncMaterial. Declaration public SyncMaterial() SyncMaterial(SyncId, String) Creates a SyncMaterial. Declaration public SyncMaterial(SyncId id, string name) Parameters Type Name Description SyncId id The unique ID of the material String name The name of the material SyncMaterial(SyncId, String, SyncColor, SyncMap, SyncColor, Single, Single, SyncMap, SyncMap, Single, SyncMap, Single, Single, SyncMap, Single, SyncMap, SyncColor, Single, SyncMap) Creates a SyncMaterial. Declaration public SyncMaterial(SyncId id, string name, SyncColor tint, SyncMap albedoMap, SyncColor albedoColor, float albedoFade, float alpha, SyncMap alphaMap, SyncMap normalMap, float normalScale, SyncMap cutoutMap, float cutoutThreshold, float glossiness, SyncMap glossinessMap, float metallic, SyncMap metallicMap, SyncColor emission, float emissionTemperature, SyncMap emissionMap) Parameters Type Name Description SyncId id The unique ID of the material String name The name of the material SyncColor tint The tint of the material SyncMap albedoMap The albedo map of the material SyncColor albedoColor The albedo color of the material Single albedoFade The albedo fade value of the material Single alpha The alpha value of the material SyncMap alphaMap The alpha map of the material SyncMap normalMap The normal map of the material Single normalScale The normal scale of the material SyncMap cutoutMap The cutout map of the material Single cutoutThreshold The cutout threshold of the material Single glossiness The glossiness of the material SyncMap glossinessMap The glossiness map of the material Single metallic The metallicness of the material SyncMap metallicMap The metallic map of the material SyncColor emission The emission color of the material Single emissionTemperature The emission temperature of the material SyncMap emissionMap The emission map of the material Fields Extension The file extension for this type Declaration public static string Extension Field Value Type Description String Properties AlbedoColor The albedo color of the material. Declaration public SyncColor AlbedoColor { get; set; } Property Value Type Description SyncColor AlbedoFade The amount of albedo fading of the material, from 0 to 1. The highest the value, the more the albedo map takes importance over the albedo color. Declaration public float AlbedoFade { get; set; } Property Value Type Description Single AlbedoMap The albedo map of the material. Declaration public SyncMap AlbedoMap { get; set; } Property Value Type Description SyncMap Alpha The alpha value of the material, from 0 to 1. Declaration public float Alpha { get; set; } Property Value Type Description Single AlphaMap The alpha map of the material. Declaration public SyncMap AlphaMap { get; set; } Property Value Type Description SyncMap CutoutMap The cutout map of the material. Declaration public SyncMap CutoutMap { get; set; } Property Value Type Description SyncMap CutoutThreshold The cutout threshold of the material, from 0 to 1. Declaration public float CutoutThreshold { get; set; } Property Value Type Description Single Emission The emission color of the material. Declaration public SyncColor Emission { get; set; } Property Value Type Description SyncColor EmissionMap The emission map of the material. Declaration public SyncMap EmissionMap { get; set; } Property Value Type Description SyncMap EmissionTemperature The emission temperature of the material, from 0 to 1. Declaration public float EmissionTemperature { get; set; } Property Value Type Description Single Glossiness The glossiness of the material, from 0 to 1. Declaration public float Glossiness { get; set; } Property Value Type Description Single GlossinessMap The glossiness map of the material. Declaration public SyncMap GlossinessMap { get; set; } Property Value Type Description SyncMap Id The unique identifier of the material. Note that it needs to be unique only amongst the other SyncMaterials. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Metallic The metallicness of the material, from 0 to 1. Declaration public float Metallic { get; set; } Property Value Type Description Single MetallicMap The metallic map of the material. Declaration public SyncMap MetallicMap { get; set; } Property Value Type Description SyncMap Name The name of the material. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name NormalMap The normal map of the material. Declaration public SyncMap NormalMap { get; set; } Property Value Type Description SyncMap NormalScale The amount of normal scale of the material. Declaration public float NormalScale { get; set; } Property Value Type Description Single Tint The tint of the material. Declaration public SyncColor Tint { get; set; } Property Value Type Description SyncColor"
  },
  "api/Unity.Reflect.IO.ReflectVersionException.html": {
    "href": "api/Unity.Reflect.IO.ReflectVersionException.html",
    "title": "Class ReflectVersionException | Unity Reflect | 2.0",
    "keywords": "Class ReflectVersionException This exception is thrown whenever an unsupported Reflect file version is used. Inheritance Object ReflectVersionException Namespace : Unity.Reflect.IO <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ReflectVersionException : Exception Constructors ReflectVersionException(String) Declaration public ReflectVersionException(string message) Parameters Type Name Description String message ReflectVersionException(String, Exception) Declaration public ReflectVersionException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Unity.Reflect.ManifestAsset.html": {
    "href": "api/Unity.Reflect.ManifestAsset.html",
    "title": "Class ManifestAsset | Unity Reflect | 2.0",
    "keywords": "Class ManifestAsset This class holds information about a and its corresponding source ID. Inheritance Object ManifestAsset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ManifestAsset Properties Manifest The actual manifest. Declaration public SyncManifest Manifest { get; } Property Value Type Description SyncManifest SourceId The source ID of the project that is described by the manifest. Declaration public string SourceId { get; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Model.SyncParameter.html": {
    "href": "api/Unity.Reflect.Model.SyncParameter.html",
    "title": "Class SyncParameter | Unity Reflect | 2.0",
    "keywords": "Class SyncParameter This class specifies information about a single metadata parameter, that can be added to a SyncMetadata collection. Inheritance Object SyncParameter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncParameter Constructors SyncParameter(String, String, Boolean) Creates a SyncParameter '. Declaration public SyncParameter(string value, string parameterGroup, bool visible) Parameters Type Name Description String value The value of the parameter String parameterGroup The group of the parameter Boolean visible Whether the parameter is visible or not Properties ParameterGroup The group of the parameter (allowing parameter gathering by group) Declaration public string ParameterGroup { get; set; } Property Value Type Description String Value The value of the parameter Declaration public string Value { get; set; } Property Value Type Description String Visible Whether the parameter is visible or not Declaration public bool Visible { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Reflect.Model.SyncLightType.html": {
    "href": "api/Unity.Reflect.Model.SyncLightType.html",
    "title": "Enum SyncLightType | Unity Reflect | 2.0",
    "keywords": "Enum SyncLightType Sets the light type. Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum SyncLightType Fields Name Description Directional Point Spot"
  },
  "viewerapi/index.html": {
    "href": "viewerapi/index.html",
    "title": "Unity Reflect Viewer API | Unity Reflect | 2.0",
    "keywords": "Unity Reflect Viewer API Pipeline Overview <!-- <span class=\"red\">[Revit/Naviswork/Sketchup] -> [Reflect Publisher API] -> [SyncService] -> [Reflect Pipeline API] -> [GameObjects] <br> *to replace with image*</span> --> The Pipeline API is used to convert Reflect models into Unity GameObjects at runtime. It's also used to sync any changes happening at the same time to the original CAD model source. Reflect models are represented by different types of ISyncModel: SyncObjectInstance represents an object in the model with its transform and metadata. SyncMesh , SyncTexture and SyncMaterials represent the different types of asset that can be used by a SyncObjectInstance. <!--**Note:** For more about the Unity Reflect classes, see <span class=\"red\">tbd</span>--> The Pipeline API uses a node-based approach where each node manipulates Reflect models in order to filter or convert them. As in any node-based API, the pipeline can be extended and customized using new nodes or by changing the pipeline connection structure. Pipelines can be saved into Assets and reused across multiple Scenes and Projects. Nodes communicate between each other using Stream Events: StreamBegin : Beginning of a batch of StreamEvents. StreamEvents : Add/Changed/Removed StreamEnd : End of the batch Pipeline diagram Nodes Node Description ProjectStreamer Reads a Reflect Project content and streams the data as lightweight entries (Type, BoundingBox); reacts to live changes in the Reflect Project and streams the deltas. SyncInstanceProvider Gets a more detailed description of the instance (Transform, Metadata, Dependencies). DataProvider Loads all the dependencies of a given SyncInstance and streams them to the rest of the pipeline; manages the data so no duplicate information is loaded. The dependencies are SyncObjects, SyncMeshes, SyncTextures and SyncMaterials. MeshConverter, MaterialConverter, TextureConverter Convert the Reflect data into a Unity Object. InstanceConverter The last node that generates the final GameObject representing the SyncInstance. <!--### Example #### Adding a chair (in Revit) <div class=\"red\"> 1. SendBegin is propagated to all Nodes 2. Stream entry : { Id : 123, Name : Stacking_Chair, BBox } 3. Stream instance : { Id : 123, Name : Stacking_Chair, BBox, Transform, Metadata, ObjectId } 4. SyncInstance dependencies are sent to the Converter nodes </div> #### Moving the chair <div class=\"red\"> pending </div> ## Pipeline settings <span class=\"red\">tbd</span> ## Scripting API <span class=\"red\">tbd</span> ### Connections Strongly typed Input / Output classes ### Pipeline Params * Ability to send additional Data to nodes * Share values between nodes --> Running a Reflect Pipeline PipelineAsset is a ScriptableObject that contains the ReflectNodes and connections that describe the Reflect pipeline. ReflectPipeline is a MonoBehaviour that takes a PipelineAsset. When assigning a PipelineAsset to the ReflectPipeline, the inspector displays all public and serializable fields found in the pipeline nodes. The method ReflectPipeline.InitializeAndRefreshPipeline can start the Pipeline. If there are any changes to the data after the PipelineAsset is started, ReflectPipeline.RefreshPipeline can trigger a refresh."
  },
  "manual/userguide/WelcomeReflect.html": {
    "href": "manual/userguide/WelcomeReflect.html",
    "title": "Unity Reflect user guide | Unity Reflect | 2.0",
    "keywords": "Unity Reflect user guide Getting started Compatibility Network configuration Managing seats Installing and uninstalling Using the Viewer and Dashboard Using the Viewer AR mode VR mode Using the Dashboard Using the Reflect plugins Autodesk BIM 360 Autodesk Navisworks Autodesk Revit Rhino SketchUp Managing your storage Managing your storage Managing project permissions <!-- ## What you can do with Reflect ## Terms to know Unity Reflect components: **Installer**: **Viewer**: **Dashboard**: | Term | Definition | | --- | --- | | **Unity Reflect Viewer** | The interface that lets you sync, export, and visually manage data. | | **Unity Reflect Dashboard** | The interface that lets you sync, export, and visually manage data. | | **Unity Reflect Dashboard** | The interface that lets you sync, export, and visually manage data. | | **Project** | | | **Source** | | ## Ready to install? * [Installing and uninstalling Reflect](ReflectInstaller.md) -->"
  },
  "manual/devguide/PackageSync.html": {
    "href": "manual/devguide/PackageSync.html",
    "title": "Importing Reflect data to the Editor | Unity Reflect | 2.0",
    "keywords": "Importing Reflect data to the Editor To see the contents of your Reflect folder in the Editor, go to Window > Reflect . The Reflect window displays the current project by default. To see all your projects, select Show All Projects. The Projects window does not automatically refresh. If you create a new project while the window is open, click Refresh to see it. To see any changes from a synced application (such as Revit), click Update while editing a model in the prefab. Your model is imported to a newly created Reflect folder, inside a folder named after your project. Drag the prefab named after your project into an empty scene."
  },
  "manual/devguide/NewDialog.html": {
    "href": "manual/devguide/NewDialog.html",
    "title": "Adding a new dialog | Unity Reflect | 2.0",
    "keywords": "Adding a new dialog This walkthrough shows you how to add a new dialog and respond to a user’s changes in the viewer. Adding a Scene Options Dialog The example we use adds a Scene Options dialog. Model, View, Controller Reflect Viewer uses the unity.touch-framework package to implement the UI, based on centralized MVC. We use UGUI as our View framework, MonoBehaviours as the Controller basis, and we have a centralized Model using UIDATA structs. We are also using Flux C# implementation SharpFlux to manipulate the Model. Model If necessary, create a new UI Data Struct and add to UIStateData, UISessionStateData or UIProjectStateData depending on the data usage. In the example, the SceneOptionData would be in the UIStateData. Note: This is a smaller example with only one Boolean variable. Please see the full code in the existing file. [Serializable] public struct SceneOptionData : IEquatable<SceneOptionData> { // View Options public bool enableTexture; public bool Equals(SceneOptionData other) { return enableTexture == other.enableTexture; } public override bool Equals(object obj) { return obj is SceneOptionData other && Equals(other); } public override int GetHashCode() { return enableTexture.GetHashCode(); } public static bool operator ==(SceneOptionData a, SceneOptionData b) { return a.Equals(b); } public static bool operator !=(SceneOptionData a, SceneOptionData b) { return !(a == b); } } Path: Assets/Scripts/Data/SceneOptionData.cs Add the data to UIStateData which is used in the UIStateManager.cs so we can centralize access to SceneOptionData in the UI callbacks. This will be modified later using Actions. Path: Assets/Scripts/UI/UIStateData.cs View We need a Scene Options dialog. Create Dialog Prefab Create the prefab and add all the necessary UI controls. You can refer to Scene Options Dialog, Filter Options Dialog, or Camera Options Dialog for ideas. Most widgets are taken from the unity.touch-framework package. Another way to create a new dialog is to start from another existing dialog: find an existing .prefab file, press ctrl-D (command-D on macOS) to duplicate, and rename the prefab to the desired name. Path: Assets/Prefabs/UI/Dialogs Controller Modify an existing ActiveDialogController to support your new dialog. Add your new DialogType You need to add a new DialogType here. We like using enums so it is easy to debug later on. This is an extra step, but down the line it will help greatly to debug UI issues. Path: Assets/Scripts/UI/UIStateData.cs Add Your New Dialog to ActiveDialogController Open ActiveDialogController.cs and add your new dialog. These are 3 simple steps: Add a new member for your scene options dialog: Update the OnStateDataChanged() event handler: Add your switch case for your DialogType: Now you can create the controller class to handle all the changes and data modifications. Create the SceneOptionsUIController.cs class Every dialog has a Controller. Controllers are used to respond to UIData changes, and to support UI user events (button presses, sliders, etc.). This is the basic template of the UI controller class. (Don’t forget to add “[RequireComponent(typeof(DialogWindow))]” ). You can duplicate an existing controller and rename it: Path: Assets/Scripts/UI/Controllers Add member controls for the UI with [SerializeField]. Also add local private members like SceneOptionData to cache it and compare if it has changed or not. See the code below OnStateDataChanged(): using System; using SharpFlux; using UnityEngine; using UnityEngine.UI; namespace Unity.Reflect.Viewer.UI { [RequireComponent(typeof(DialogWindow))] public class SceneOptionsUIController : MonoBehaviour { #pragma warning disable 649 [SerializeField] Button m_DialogButton; [SerializeField] SlideToggle m_TextureToggle; #pragma warning restore 649 DialogWindow m_DialogWindow; Image m_DialogButtonImage; SceneOptionData m_CurrentsSceneOptionData; Add Listener to UI controls in Start(). When the Dialog is destroyed, all sub UI controls are destroyed too, so we don’t need to RemoveListener in OnDestroy(). void Awake() { UIStateManager.stateChanged += OnStateDataChanged; m_DialogButtonImage = m_DialogButton.GetComponent<Image>(); m_DialogWindow = GetComponent<DialogWindow>(); } void Start() { m_DialogButton.onClick.AddListener(OnDialogButtonClicked); m_TextureToggle.onValueChanged.AddListener(OnTextureToggleChanged); } We can compare cached data to check if it's changed or not and only update the UI when it’s changed. Be aware that updated UI code in OnStateDataChanged must not call its own valueChanged callback again. void OnDialogButtonClicked() { var dialogType = m_DialogWindow.open ? DialogType.None : DialogType.SceneOptions; UIStateManager.current.Dispatcher.Dispatch(Payload<ActionTypes>.From(ActionTypes.OpenDialog, dialogType)); } void OnTextureToggleChanged(bool on) { // this will be added on “Add an Action to Control and Update UI” section. } void OnStateDataChanged(UIStateData data) { m_DialogButtonImage.enabled = data.activeDialog == DialogType.SceneOptions; m_DialogButton.interactable = data.toolbarsEnabled; if (m_CurrentsSceneOptionData == data.sceneOptionData) return; if (m_CurrentsSceneOptionData.texture != data.sceneOptionData.texture) m_TextureToggle.on = data.sceneOptionData.texture; } } } Path: Assets/Scripts/UI/Controllers/SceneOptionsUIController.cs At this stage, you can tie everything together. Add the SceneOptionsUIController Component to the Prefab Edit the prefab (enter nested prefab edition mode). In the Inspector, add the component: This automatically adds all required components if missing (Canvas, Canvas Group, Graphic Raycaster, and Dialog Window). Put your Prefab in the Scene Place your Options Dialog under UI Main in the Reflect scene next to other dialog prefabs. Select “UI Root” GameObject, and there is a “Active Dialog Controller” in the inspector window. Drag and drop the “Scene Options Dialog” to the inspector window to set the value. Disable the Canvas component to hide the dialog by default. Visibility is controlled by DialogWindow component and the ActiveDialogController. Create the button in the toolbar and link to the dialog Drag and drop the button item into the SceneOptionsController field for Dialog Button. Add an Action to Control and Update UI Here is an example for the “Texture Toggle” AddListener to the toggle control. In the callback method, we dispatch with the ActionType and the UI Data (SceneOptionData): Add new SetViewOption ActionType in the ActionTypes.cs: Implement the Action in the UIStateManager.cs. Go to UIStateManager:OnDispatch(Payload payload) method and add your new action in the switch/case. We need to handle the modification of the centralized data here and Invoke the equivalent stateChanged. This is also where you will usually invoke the Pipeline API . Compile and Run Compile and run. Check to make sure that the new dialog opens when you click the button. If so, keep going to implement the rest of your UI controller. Congratulations, you just added your own custom dialog to the Unity Reflect Viewer!"
  },
  "manual/devguide/DevIntro.html": {
    "href": "manual/devguide/DevIntro.html",
    "title": "Start coding with Unity Reflect | Unity Reflect | 2.0",
    "keywords": "Start coding with Unity Reflect This document provides the first steps to set up your environment to code with Unity Reflect. Cloning the repository Create a local clone of the following Git repository: https://github.com/Unity-Technologies/com.unity.reflect.viewer For more information about how to clone a repository, refer to the GitHub documentation . Opening a Reflect project in the Unity Hub Open the Unity Hub and click Add . Browse to the UnityReflect folder you created in Cloning the repository . Double-click on the project to open it. Open a Reflect scene in the Unity Editor Open the Reflect scene inside the Unity Editor hierarchy. You can now click Play and upload new projects. Open a C# project in the Unity Editor Click Assets > Open C# Project. Note : Make sure that you have selected the correct External Script Editor in Edit > Preferences > External Tools . You can now access the whole scripts hierarchy and start making changes to the Reflect viewer. When you save your changes, Unity automatically recompiles it inside the Editor and show you any compiling errors in the Console ( Window > General > Console ). Make a build Go to File > Build Settings (or use the shortcut Ctrl-Alt-B) to access the Build Settings dialog. Be sure to set up your target in Standalone. You can also select options for Development Build and Script Debugging. You're ready to begin updating your custom Reflect viewer."
  },
  "manual/commondocs/plugins/ReflectPlugins.html": {
    "href": "manual/commondocs/plugins/ReflectPlugins.html",
    "title": "Reflect plugins | Unity Reflect | 2.0",
    "keywords": "Reflect plugins Reflect plugins are available for the following applications: Autodesk BIM 360 Autodesk Navisworks Autodesk Revit Rhino SketchUp"
  },
  "manual/commondocs/plugins/Navisworks.html": {
    "href": "manual/commondocs/plugins/Navisworks.html",
    "title": "The Reflect plugin for Navisworks | Unity Reflect | 2.0",
    "keywords": "The Reflect plugin for Navisworks The Reflect plugin is available for the following versions of Navisworks: 2018 2019 2020 2021 Installation To install the plugin, run the Reflect installer and select your version or versions of Navisworks. Opening Reflect From the Unity Reflect tab in Navisworks, click the Reflect icon. Exporting The Navisworks plugin offers two options for exporting to Unity. From the Unity Reflect tab in Navisworks, click Export Document and select either: Export Document to send the entire project to the Reflect server Export Selection to send selected items to the Reflect server Note: If you experience slow export speeds, this may be caused by a conflict with your antivirus software. This is a known issue. Syncing Real-time syncing is not currently available due to the way Navisworks handles object IDs. This feature will be added in a future release of Unity Reflect."
  },
  "manual/commondocs/SyncExport.html": {
    "href": "manual/commondocs/SyncExport.html",
    "title": "Syncing and exporting | Unity Reflect | 2.0",
    "keywords": "Syncing and exporting Reflect offers multiple storage locations for your projects. To create a new Reflect project, click New Project in the bottom left corner of the window. Local You can publish data to a project on your local computer: Network You can publish data to a local network: Click the drop-down menu to select your desired sync server. For more information about configuring a local network, see Network Configuration . Cloud Reflect also gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": "<!-- BEGIN ERROR INCLUDE: Unable to resolve [!include[index](/manual/index.md)] : Absolute path \"/manual/index.md\" is not supported. --> [!include[index](/manual/index.md)] <!--END ERROR INCLUDE -->"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Reflect Publisher API | Unity Reflect | 2.0",
    "keywords": "Reflect Publisher API Getting started This documentation is intended for anyone who wants to create a plugin to publish data to Unity Reflect. For general information about using Unity Reflect, see the user manual . Recommended developer setup Unity Reflect To use the Publisher API, Unity Reflect must be installed on your machine, including both the local sync service and the Reflect UI. See Installing Reflect for instructions. Licenses To run the plugin you create, you need a valid Reflect license . To use the Editor workflow, you also need a valid Unity Pro license. Local sync service When running your plugin, you can choose which server to export your project to. You can test your plugin by exporting data to the Reflect cloud server, but this option doesn't allow you to see the service logs if anything goes wrong during the export session. For this reason, we recommend sending data to a local sync service instead. This service is automatically installed when you install the Reflect Core component in the Reflect installer. When installed, the local sync service runs as a Windows service. To manage the service, go to Task Manager > Services > Unity Reflect. To access your local service logs, go to C:\\ProgramData\\Unity\\Reflect\\Logs\\SyncService . Editor workflow There are multiple ways to confirm that your plugin sends the correct data, the most straightforward of which is to use the default Reflect Viewer (which can be installed with the Reflect installer). However, the default Viewer offers limited options for inspecting and debugging data. For this reason, we suggest using the Editor workflow instead. With this workflow, you can closely inspect the assets your data has been converted into from the Unity Editor. Note: Unity Reflect is currently focusing its support on Unity 2019.4 LTS. The Editor workflow requires a valid Unity Pro license. For more information about the Editor workflow, see the developer guide . <!-- ## Getting started in C# The Reflect team provides a sample project repository to demonstrate how to use the C# Publisher API in a real plugin environment. Any C# plugin will depend on two Reflect NuGet packages : Unity.Reflect : a multiplatform .NET Standard 2.0 library containing the core Reflect API, Unity.Reflect.UI : a Windows only .NET Standard 2.0 library exposing endpoints to communicate with the Reflect UI. This UI is an external process, and the well functioning of your plugin depends on it being installed in your user’s machine (through the Reflect Core component). You can retrieve the Reflect packages directly in the C# Publisher Sample repository. --> Reflect plugin architecture Usual plugin flow The Unity Reflect plugin is integrated into the publisher software as a native add-on. When the user wants to export a source project, the plugin can invoke the Reflect UI to retrieve settings for the export session including the user’s Unity account, target project and sync server (whether local, on a local network, or hosted in the cloud). The plugin can then connect to the selected sync server and query the publisher software for model data (meshes, textures, materials, objects, instances) to send to the server immediately through transactions. When the plugin has finished sending the model data, it can close communication with the server and free the export process. Native plugin prerequisites A Reflect plugin is typically an add-on of the desired publisher software, which means: The plugin needs the ability to retrieve model information (geometry, materials, metadata, or anything relevant), potentially through the software API, and Ideally, the plugin can integrate seamlessly into the software’s UI, to display export and sync buttons for example. Note that this is just the usual Reflect plugin UX, but your plugin can still work without this. Publisher transactions & flows Transactions In Reflect, a transaction is an atomic and self-contained set of elements that the plugin sends to the sync server. When committed, it contains the complete state of the source model. Simple export flow The simple export is the most basic Reflect flow: The user opens a project in the publisher software. The user clicks the Reflect Export button. The Reflect UI appears for the user to select a target Unity project and sync server. The plugin parses and sends the project to Reflect. This may take some time. Once the simple export has been performed, any viewer with the proper read access can open the exported project. In order to perform a simple export, the plugin should use a single transaction to send the whole project at one time. Sync flow The sync is an advanced flow that can be leveraged by the user to save a lot of time when iterating over their source project. The user opens a project in the publisher software. The user clicks the Reflect Export button. The Reflect UI appears for the user to select a target Unity project and sync server. The plugin parses and sends the project to Reflect ( sync first export ). This may take some time. After the first export is complete, the plugin stays alert to any changes in the source model (via the software’s API). When there is a change in the source project, the plugin automatically sends this information to the server without any additional UX steps for the user. Each of these steps are called sync updates and typically take less time than the initial export. The plugin stops observing changes when the user disables the sync mode in their publisher software. Once the first export is performed, any viewer with read access can open the exported project and be up to date with the latest publisher changes. The user can also click the sync button to enable Sync Mode in the Viewer to automatically reflect any subsequent changes in the Viewer. To perform a sync: The first export should behave exactly like a first export, but the plugin should not close the publisher client when the export is complete (as it will be used in subsequent transactions). Whenever the plugin is notified of a change, it should send the delta information through a new transaction to the same publisher client. To reduce parsing time, there is no need to send unchanged data, but only the following: RemoveObjectInstance when an object instance has just been deleted Send when an item has just been added or modified. If the sent item already exists in the server, it will be overridden. The publisher client can be closed when the user disables Sync Mode. Reflect UI The Reflect Publisher API provides an endpoint to display the Reflect UI as an external process and to retrieve whatever settings the user has chosen for their export session. Note that this assumes that the Reflect Core component has been installed into the user’s machine: if not, an exception is thrown. This method takes a the following input arguments: pluginName , pluginVersion : These indicate the name and the version of the plugin you’re developing, which are used by the Reflect UI to display and filter exported projects. publishType : This enum indicates what publish flow the user is going to use (simple export or sync). Finally, this method returns a PublisherSettings instance containing user settings data. If null, it means that the user cancelled the operation: otherwise, it contains useful information such as target project and sync service. Note that this instance can be programmatically modified after being returned: for example, to enforce additional Reflect rules. See (Customize PublisherSettings)[#customize-publishersettings] for more details. <!-- The C# API provides an additional and advanced flow to skip the Reflect UI, replacing it by a config file. See [TODO].--> The publisher client Purpose and life cycle In Reflect, the publisher client abstracts a connection between your plugin and its target project and sync server during an export session. This means that its life cycle is tightly linked to the export session’s: the publisher client should be opened immediately after the user provides their settings in the Reflect UI and closed as soon as the export session (either simple export or sync) is done. The client’s OpenClient method takes 3 input arguments to specify information about the upcoming publish session: sourceName : This is the public name of the source project. It doesn’t necessarily have to be unique, but it will be used throughout Reflect for the user to identify this project. sourceId : This identifies the source project and should be unique and persistent over multiple publishing sessions. Our recommendation is to use the (sanitized) source file name. settings : This is where you should provide the PublisherSettings instance that you retrieved from the Reflect UI. You can customize the settings further before providing them to the OpenClient method. Customize PublisherSettings After the Reflect UI call, the returned PublisherSettings instance already contains some information about the upcoming publish session. However, it is possible to customize it further by tweaking some values in this instance before you open the Publisher Client. Native settings The settings you can modify in the PublisherSettings instance are: LengthUnit & CustomUnitCoefficient : Specify which length unit will be used for geometry and transforms. PreserveUvs : Specify whether the unit conversion should be applied to UV. AxisInversion : Specify the mathematical basis your vertex and transform info come from. Rules The PublisherSettings instance exposes a Rules property that you can feed with JSON content to specify which rules you want the sync server’s rule engine to apply automatically. We currently support only a limited number of predefined conditions and actions. <!--To see a template file, as well as an example use case, see [TODO].--> Conditions Conditions must be fulfilled in order for the action to take place in the sync server. Name Can be applied on Description Inputs ConditionGroup Anything Groups multiple conditions with a satisfaction criteria. GroupCriteria : Any or All Conditions : Condition[] ParameterValueComparison SyncObject, SyncObjectInstance Detects whether the metadata contains a specific key, or if this parameter equals a specific value. ComparisonCriteria : Equals or Contains IsCaseSensitive : bool ParameterName : string ParameterValue : string SyncTypeComparison Anything Returns true if the model has the expected type. SyncType : String Actions Actions are applied on a model only if the corresponding condition has been validated for this model. An immediate action takes place instantly and a delayed action takes place when the transaction is committed. Name Type Can be applied on Description Inputs GroupRootObjects Delayed SyncObjectInstance Groups or merges instances by metadata value for a specific key. BaseName : String ParameterName : String Method : Group or Merge MergeChildObjects Immediate SyncObject Merges the object’s children. ReparentInstances Delayed SyncObjectInstance Reparents instances under a single parent object. ParentCondition : Condition ChildrenCondition : Condition Method : Group or Merge ParameterNamePairs : { ParentParameterName : string ChildrenParameterName : string } ScaleAndFlipInstance Immediate SyncObjectInstance Applies a scale and a YZ axis flip. ScaleFactor : Float FlipYZ : Bool ScaleAndFlipObject Immediate SyncObject Applies a scale and a YZ axis flip. ScaleFactor : Float FlipYZ : Bool Transactions This section of the document covers technical details about transactions: see Publisher transactions and flows for a broader overview. Once your publisher client is opened, you can create a transaction from it. Note that you cannot start a transaction if there already is a pending transaction attached to your client: transactions are not to be used concurrently. After your transaction is started, you can begin parsing the source and perform the following actions along the way: Send an item If the item already exists in the server, it is overridden by the new version. Remove an instance This is only needed for a sync update transaction to remove instances that have been created in previous transactions. Note that you don’t need to remove assets (other than instances) because the sync server automatically determines what is no longer a dependency. When your transaction contains every desired change, you’ll need to commit it to confirm and officially push the changes to Reflect. Before the transaction is committed, the transaction remains “internal” and cannot be seen by viewers. <!-- ### Activity report (C# API only) This part is to cover technical details about activity reporting in C# ; see [TODO] for more information about activities in the Reflect Dashboard. Report message The publisher client exposes an endpoint to report messages that will be displayed in the Dashboard’s activity report. We recommend using this with parsimony in order not to flood the user with messages. These messages should be understandable by your plugin users (thus, mostly non developers), and when you’re reporting an issue, you should always suggest an action the user can perform to fix it. Report progress Parsing the scene can take some time ; it can be good for your users to know how far they have come. For this reason, the publisher client exposes a method to report the current parsing progress, so that the Dashboard’s activity report can track a percentage of the export process. Note that the provided parsing progress is not displayed as is in the Dashboard ; instead, Reflect uses an formula to combine parsing progress and internal transaction computation progress. Also note that reporting the parsing progress is not necessary, but rather a UX bonus for your plugin. If no parsing progress is provided, the Dashboard will display a generic loading icon instead. --> Reflect data SyncModel and SyncId A SyncModel is a model that can be sent through Reflect from the Publisher to the Viewer. When the Viewer downloads a SyncModel, it converts it into the correct Unity asset. The following SyncModels are supported: SyncObject SyncObjectInstance SyncMesh SyncMaterial SyncTexture Any SyncModel needs a name, used in the Viewer to properly display and identify the model, and an ID, represented by the SyncId class. This ID is used by Reflect to identify a specific model, and it is the plugin’s responsibility to provide a valid ID that meets the following requirements: The ID must be unique amongst the models of the same type in a specific source project. Otherwise, models will override each other when sent to the server. The ID must be persistent over multiple publishing sessions, otherwise: The plugin may waste time sending a model that the server has already stored under a different ID. The Sync flow will not work as expected, as the Viewer relies upon the IDs to retrieve and modify existing models. SyncObject A SyncObject is the Reflect equivalent of a Prefab in Unity: it’s an object definition that you can reference multiple times without duplicating data, thanks to SyncObjectInstances. When SyncObjects are downloaded in Unity, they are converted into cached GameObjects (or prefabs in the Editor workflow). Hierarchy SyncObjects have a children list property that you can use to support hierarchy in your plugin. Any child is converted directly to a child GameObject in Unity and doesn’t need to be referenced by a SyncObjectInstance. Note that nested SyncObjects suffer from data duplication, as they are not instantiated and we don’t support nested instantiating. However, keep in mind that the default Viewer is instance-oriented: some of its features (like streaming, BIM filtering, and BIM information) work on a per-instance basis. These features won't benefit the children of a SyncObject as they do not directly rely on a SyncObjectInstance to be instantiated. The best way to design your plugin is to make any object that makes sense as a whole a root SyncObject. For example, if you think there is value in having all the screws of a chair separated and independent in the Viewer, then you should send each screw as a SyncObjectInstance. If the screws have the same model definition, then you can use only one SyncObject and reference it in all your instances. However, if screws are too precise a granularity for you, you might prefer sending the chair itself as a SyncObject, and have screws as children SyncObjects. Then, the chair would be the only object you’d be able to select and inspect from the viewer. Mesh and materials A single SyncObject can only reference one mesh: however, it can apply several materials to this mesh. This is possible because a SyncMesh can have multiple submeshes, each of which can be assigned to a different material. SyncObjectInstance A SyncObjectInstance is to the SyncObject what a GameObject is to the Prefab. When SyncObjectInstances are downloaded in Unity, they are converted into GameObjects (assuming its referenced SyncObject is provided: otherwise, an exception is thrown). SyncObjectInstances are the only models you need to remove during a sync, because they are the Viewer’s root assets. If during a sync a mesh asset is not an instance dependency anymore, for any reason, Reflect automatically determines that it doesn’t need to download it. The SyncObjectInstance is where you should provide metadata. The Viewer leverages this information to filter and reorder downloaded instances. Metadata is represented by a simple dictionary of key/pair values. SyncMesh A SyncMesh is converted to a Unity mesh in the Viewer. A SyncObject can only reference one single mesh, but the mesh can contain multiple submeshes, which allows multiple materials for one mesh. The SyncMesh class exposes the Vertices, Normals, and Uvs properties to populate vertex geometry information, whereupon the SyncSubMesh class can provide the triangles data. SyncMaterial A SyncMaterial is converted to a Unity material in the Viewer. The materials rely upon a custom Reflect shader that is built on top of Physically Based Rendering (PBR), hence the usual PBR properties it exposes. When designing a SyncTexture, SyncMaterials should use SyncMaps, which add additional post-processing settings to the texture such as UV tiling and offset. This allows your plugin to send one single texture instead of sending a separate texture for each post-processing variant. SyncTexture A SyncTexture is converted to a Unity texture in the Viewer. This asset exposes a Source property as a byte array, so you only need to read the bytes from your JPG or PNG texture file and write them in the SyncTexture."
  },
  "api/Unity.Reflect.Publisher.html": {
    "href": "api/Unity.Reflect.Publisher.html",
    "title": "Class Publisher | Unity Reflect | 2.0",
    "keywords": "Class Publisher An IPublisherClient factory. Inheritance Object Publisher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public static class Publisher Methods OpenClient(UnityProject, UnityUser, String, String, PublisherSettings) Creates and connects a blocking IPublisherClient to a SyncServer, for a specific user and targeting a specific Unity Project. Declaration public static IPublisherClient OpenClient(UnityProject project, UnityUser user, string sourceName, string sourceId, PublisherSettings settings) Parameters Type Name Description UnityProject project The Unity Project to export data to. UnityUser user The desired Unity User. String sourceName The name of the source project. String sourceId A persistent source project ID. PublisherSettings settings Some custom publishing settings. Returns Type Description IPublisherClient A publisher client that is connected to the SyncServer, whose transaction operations are blocking. Exceptions Type Condition ConnectionException If the connection with the SyncServer fails."
  },
  "api/Unity.Reflect.Model.SyncTransform.ValueOneofCase_1.html": {
    "href": "api/Unity.Reflect.Model.SyncTransform.ValueOneofCase_1.html",
    "title": "Enum SyncTransform.ValueOneofCase | Unity Reflect | 2.0",
    "keywords": "Enum SyncTransform.ValueOneofCase Enum of possible cases for the \"value\" oneof. Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum ValueOneofCase Fields Name Description Matrix None Trs"
  },
  "api/Unity.Reflect.Model.SyncObject.html": {
    "href": "api/Unity.Reflect.Model.SyncObject.html",
    "title": "Class SyncObject | Unity Reflect | 2.0",
    "keywords": "Class SyncObject This class specifies information about an object that can be converted into a Prefab in Unity. Inheritance Object SyncObject Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncObject : ISyncModel, ISyncSendable Constructors SyncObject() Creates an empty SyncObject. Declaration public SyncObject() SyncObject(SyncId, String) Creates a basic SyncObject. Declaration public SyncObject(SyncId id, string name) Parameters Type Name Description SyncId id The unique ID of this object String name The name of this object Fields Extension The file extension for this type Declaration public static string Extension Field Value Type Description String Properties Camera The object's camera, if any. Declaration public SyncCamera Camera { get; set; } Property Value Type Description SyncCamera Children The object's children. Declaration public List<SyncObject> Children { get; set; } Property Value Type Description List < SyncObject > Id The unique identifier of the object. Note that it needs to be unique only amongst the other SyncObjects. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Light The object's light, if any. Declaration public SyncLight Light { get; set; } Property Value Type Description SyncLight MaterialIds The material IDs associated with the object's mesh. They follow the same order as the submeshes in the included mesh. Declaration public List<SyncId> MaterialIds { get; set; } Property Value Type Description List < SyncId > MeshId The unique ID of the included mesh, if any. Declaration public SyncId MeshId { get; set; } Property Value Type Description SyncId Metadata The object's metadata, if any. Declaration public SyncMetadata Metadata { get; set; } Property Value Type Description SyncMetadata Name The object's name. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name Rpc The object's RPC, if any. Declaration public SyncRPC Rpc { get; set; } Property Value Type Description SyncRPC Transform The object's transform. Declaration public SyncTransform Transform { get; set; } Property Value Type Description SyncTransform Methods IsEmpty() Checks whether the object is empty. Declaration public bool IsEmpty() Returns Type Description Boolean Whether the object is empty"
  },
  "api/Unity.Reflect.ConnectionException.html": {
    "href": "api/Unity.Reflect.ConnectionException.html",
    "title": "Class ConnectionException | Unity Reflect | 2.0",
    "keywords": "Class ConnectionException This exception is thrown by a IPublisherClient or a IPlayerClient if the connection to the SyncServer fails. Inheritance Object ConnectionException Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ConnectionException : Exception Constructors ConnectionException() Declaration public ConnectionException() ConnectionException(String) Declaration public ConnectionException(string message) Parameters Type Name Description String message ConnectionException(String, Exception) Declaration public ConnectionException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/Unity.Reflect.UnityProjectCollection.html": {
    "href": "api/Unity.Reflect.UnityProjectCollection.html",
    "title": "Class UnityProjectCollection | Unity Reflect | 2.0",
    "keywords": "Class UnityProjectCollection This class holds information about a collection of UnityProject . Inheritance Object UnityProjectCollection Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class UnityProjectCollection : IEnumerable<UnityProject> Properties ErrorMessage The error message, if any. Else, it stays an empty string. Declaration public string ErrorMessage { get; } Property Value Type Description String Status The status of the collection request. Declaration public UnityProjectCollection.StatusOption Status { get; } Property Value Type Description UnityProjectCollection.StatusOption Methods GetEnumerator() Declaration public IEnumerator<UnityProject> GetEnumerator() Returns Type Description IEnumerator < UnityProject >"
  },
  "api/Unity.Reflect.ManifestUpdatedEventArgs.html": {
    "href": "api/Unity.Reflect.ManifestUpdatedEventArgs.html",
    "title": "Class ManifestUpdatedEventArgs | Unity Reflect | 2.0",
    "keywords": "Class ManifestUpdatedEventArgs This class is used by the ManifestUpdated event to add information about the event that occurred. Inheritance Object ManifestUpdatedEventArgs Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ManifestUpdatedEventArgs : EventArgs Properties SourceId The source ID of the project whose manifest just updated. Declaration public string SourceId { get; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Model.SyncColor.html": {
    "href": "api/Unity.Reflect.Model.SyncColor.html",
    "title": "Struct SyncColor | Unity Reflect | 2.0",
    "keywords": "Struct SyncColor This struct specifies information about a color. Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public struct SyncColor Constructors SyncColor(Single, Single, Single, Single) Creates a SyncColor from floats. Declaration public SyncColor(float r, float g, float b, float a = 1F) Parameters Type Name Description Single r Red value (between 0 and 1) Single g Green value (between 0 and 1) Single b Blue value (between 0 and 1) Single a Alpha value (between 0 and 1) Properties A The alpha value of the color. Declaration public float A { get; set; } Property Value Type Description Single B The blue value of the color. Declaration public float B { get; set; } Property Value Type Description Single Black Creates a black color. Declaration public static SyncColor Black { get; } Property Value Type Description SyncColor G The green value of the color. Declaration public float G { get; set; } Property Value Type Description Single R The red value of the color. Declaration public float R { get; set; } Property Value Type Description Single White Creates a white color. Declaration public static SyncColor White { get; } Property Value Type Description SyncColor Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) From256(Int32, Int32, Int32, Int32) Creates a SyncColor from ints. Declaration public static SyncColor From256(int r, int g, int b, int a = 255) Parameters Type Name Description Int32 r Red value (between 0 and 255) Int32 g Green value (between 0 and 255) Int32 b Blue value (between 0 and 255) Int32 a Alpha value (between 0 and 255) Returns Type Description SyncColor The generated SyncColor. GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Lerp(SyncColor, SyncColor, Single) Lerps between two colors using a float cursor. Declaration public static SyncColor Lerp(SyncColor c1, SyncColor c2, float u) Parameters Type Name Description SyncColor c1 The first color (corresponding to u=0) SyncColor c2 The second color (corresponding to u=1) Single u The cursor (between 0 and 1) Returns Type Description SyncColor The result of the color lerp. Operators Addition(SyncColor, SyncColor) Declaration public static SyncColor operator +(SyncColor c1, SyncColor c) Parameters Type Name Description SyncColor c1 SyncColor c Returns Type Description SyncColor Equality(SyncColor, SyncColor) Declaration public static bool operator ==(SyncColor c1, SyncColor c2) Parameters Type Name Description SyncColor c1 SyncColor c2 Returns Type Description Boolean Implicit(float4 to SyncColor) Declaration public static implicit operator SyncColor(float4 v) Parameters Type Name Description float4 v Returns Type Description SyncColor Implicit(SyncColor to float4) Declaration public static implicit operator float4(SyncColor c) Parameters Type Name Description SyncColor c Returns Type Description float4 Inequality(SyncColor, SyncColor) Declaration public static bool operator !=(SyncColor c1, SyncColor c2) Parameters Type Name Description SyncColor c1 SyncColor c2 Returns Type Description Boolean Multiply(Single, SyncColor) Declaration public static SyncColor operator *(float f, SyncColor c) Parameters Type Name Description Single f SyncColor c Returns Type Description SyncColor Multiply(SyncColor, SyncColor) Declaration public static SyncColor operator *(SyncColor c1, SyncColor c) Parameters Type Name Description SyncColor c1 SyncColor c Returns Type Description SyncColor"
  },
  "manual/commondocs/NetworkConfiguration.html": {
    "href": "manual/commondocs/NetworkConfiguration.html",
    "title": "Network configuration | Unity Reflect | 2.0",
    "keywords": "Network configuration This document provides the configuration information you might need to run the Reflect service. Configuring the Sync Service on a specific port By default, the Reflect service uses a random available port every time it is started. To host the Reflect service on a static port: Open the file %ProgramData%\\Unity\\Reflect\\syncServiceConfig.json . If this file does not exist, create it now. Set the ExternalPort property to the desired value. { \"ExternalPort\": 59876 } The change takes effect the next time the service is restarted. Configuring your firewall The Reflect installation will automatically create an inbound rule in your Windows Firewall. This rule allows other devices to download Reflect models hosted on your PC. If the creation of the rule fails for any reason, or if you want to make it more stringent and allow connections on the port configured in the syncServiceConfig.json file, run the following command in an elevated command prompt. (Port 59876 is used as an example in the localport argument.) netsh advfirewall firewall add rule name=\"Unity Reflect Service\" protocol=TCP dir=in action=allow program=\"%programfiles%\\Unity\\Reflect\\SyncService.exe\" localport=59876 You may then delete the default rule (also named Unity Reflect Service) using the Windows Firewall interface. Note: These configurations do not take effect if traffic is blocked at the router level. A network administrator may need to unblock a port in the network-level firewall. URLS to whitelist If your network limits access to unauthorized websites, see this link for a list of URLs to whitelist."
  },
  "manual/commondocs/ManagingLicenses.html": {
    "href": "manual/commondocs/ManagingLicenses.html",
    "title": "Managing Reflect seats | Unity Reflect | 2.0",
    "keywords": "Managing Reflect seats Your organization must have Reflect seats available for you to assign seats to users. Assigning seats to users Go to https://id.unity.com/ and select Organizations. Click the name of the organization with unassigned seats. In the Subscription section, click the gear icon next to Unity Reflect. Verify that you've selected the correct user, subscription, and organization and then click Assign Seat(s). The end user receives an email invitation."
  },
  "manual/commondocs/Support.html": {
    "href": "manual/commondocs/Support.html",
    "title": "Support | Unity Reflect | 2.0",
    "keywords": "Support Need more help with Unity Reflect? Contact reflect-support@unity3d.com . This document includes some frequently requested support topics. Delete Reflect data (Windows) To remove all Reflect data for the Viewer and Editor, delete all of the following folders from your home folder: AppData\\Local\\Unity\\Reflect AppData\\LocalLow\\Unknown Vendor AppData\\LocalLow\\Unity AppData\\LocalLow\\Unity Technologies\\Unity Reflect Note: If you don't see AppData in your home folder, go to the View tab in Windows Explorer and check Hidden items . Finally, delete the following folder: C:\\ProgramData\\Unity\\Reflect Select your region (iOS, Windows) Unity Reflect 2.0 allows users in China to use Reflect on iOS and Windows. Reflect selects its default region based on the location specified in your device settings. To change this setting, follow the instructions for your platform below. iOS To change your region for Unity Reflect: Go to Settings > Unity Reflect and in the Server section, tap Region . Select your preferred region setting. Auto lets Reflect choose based on your device localization settings. Default connects to the GCP server for users outside China. China connects to the server stack for users in China. Windows To change your region settings on Windows, run the following application: Program Files/Unity/Reflect/RegionSelector/RegionSelector.exe This program allows you to override the previous setting."
  },
  "manual/commondocs/fullindex.html": {
    "href": "manual/commondocs/fullindex.html",
    "title": "All Reflect & Chasm Bridge documentation | Unity Reflect | 2.0",
    "keywords": "All Reflect & Chasm Bridge documentation Common docs Reflect Chasm Bridge"
  },
  "manual/commondocs/CloudSyncing.html": {
    "href": "manual/commondocs/CloudSyncing.html",
    "title": "Cloud syncing with Reflect | Unity Reflect | 2.0",
    "keywords": "Cloud syncing with Reflect Reflect now gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. For more information, see Managing your storage . <!--<span style=\"color: red;\">[high-level diagram/schematic here]</span> **Note:** Cloud syncing is in beta and should not be relied upon for production. --> What data is sent to the cloud when doing an export? If you export to a Local or Network server, there is no model data sent over the internet. If you export to the Cloud, then the input file is processed locally, and derivative model data (geometry, materials and so on) is sent to Unity. Project names are always sent over the internet to Unity. This happens even when publishing to Local or Network servers."
  },
  "manual/commondocs/ReflectDashboard.html": {
    "href": "manual/commondocs/ReflectDashboard.html",
    "title": "Unity Reflect Dashboard | Unity Reflect | 2.0",
    "keywords": "Unity Reflect Dashboard <!--<span style=\"color: red;\">(UPDATE IN PROGRESS. Breaking this into multiple docs and expanding, adding system tray options, etc.)</span>--> The Unity Reflect dashboard is a standalone application that lets you manage your projects, local server settings, installed Reflect components, and recent activity log. Opening the dashboard To open the standalone Unity Reflect dashboard, click the Unity Reflect icon in your system tray: You can also open the Unity Reflect Dashboard from the Start menu. Managing your projects The Unity Reflect Dashboard lets you manage where your projects are stored. The Projects tab displays your projects in a list: The list includes icons indicate where each project is currently stored: locally ( ), on a local network ( ), or in the cloud ( ). Click the down arrow see all the instances of the project in its linked sources. Click the name of a source to see additional details. To delete a project instance from a linked source, click . To see a log of recent activity for this project, click Project Activities in the left sidebar. Managing your server settings The Local Settings tab lets you update the settings of your local sync server. Make Public makes your local server public to users that have access to the projects it contains. Allow Publishing New Projects allows users to publish new projects to this server. If unchecked, users can only publish to projects already present on this server. Be sure to click Save after making any changes. Managing installed components The Components tab shows a list of all Reflect components installed on your computer. If you want to uninstall a particular component, click and then click Uninstall. Accessing your activity log The Activities tab shows a log of your recent Reflect activity. To resume an activity, click open . To expand any alerts associated with an activity, click . To hide an activity in the log, click . To hide all activities, click Clear . To reveal hidden activities, click Show All ."
  },
  "manual/commondocs/ReflectInstaller.html": {
    "href": "manual/commondocs/ReflectInstaller.html",
    "title": "Installing and uninstalling Reflect | Unity Reflect | 2.0",
    "keywords": "Installing and uninstalling Reflect Installing Reflect Windows Note: This may require administrator privileges. To install Unity Reflect on Windows: Download and open the installer from the link that you received upon purchase. Select any optional components and click Install . Click Install . When the installation is complete, confirm that your desired components are installed and click Finish . Reflect Viewer only Download and open the .msi file. iOS and Android For mobile devices, the Unity Reflect Viewer is available in the Apple App Store and on Google Play . Uninstalling Reflect You can manage your installation of Unity Reflect from Windows Settings > Add or remove programs . To uninstall Unity Reflect and all of its components, click Unity Reflect Setup > Uninstall . To uninstall specific components, click the name of the component > Uninstall ."
  },
  "manual/commondocs/ManagingStorage.html": {
    "href": "manual/commondocs/ManagingStorage.html",
    "title": "Managing your storage in Reflect | Unity Reflect | 2.0",
    "keywords": "Managing your storage in Reflect The Unity Reflect Dashboard lets you manage where your projects are stored. The Projects tab displays your projects in a list: The list includes icons indicate where each project is currently stored: locally ( ), on a local network ( ), or in the cloud ( ). <!--## Local storage To open a project, click its name. (local, local network, or cloud) <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/DashboardDelete.png\"> Click the down arrow <img style=\"padding: 0\" width=\"25\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectExpandDetails.png\"> to expand project details. <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/DashboardDropdown.png\"> The list of linked sources is displayed: <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectExpandedProject.png\"> To see further details on a source, click on its name. <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectProjectDetails.png\"> To delete a source, click <img style=\"width: 25px\" alt=\"Trash can\" src=\"images/1.3/DeleteIcon.png\">.## Network storage --> Cloud storage Reflect gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "manual/commondocs/ManagingStorageInsert.html": {
    "href": "manual/commondocs/ManagingStorageInsert.html",
    "title": "Managing your storage in Reflect | Unity Reflect | 2.0",
    "keywords": "Managing your storage in Reflect The Unity Reflect Dashboard lets you manage where your projects are stored. The Projects tab displays your projects in a list: The list includes icons indicate where each project is currently stored: locally ( ), on a local network ( ), or in the cloud ( ). To open a project, click its name. <!--## Local storage (local, local network, or cloud) <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/DashboardDelete.png\"> Click the down arrow <img style=\"padding: 0\" width=\"25\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectExpandDetails.png\"> to expand project details. <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/DashboardDropdown.png\"> The list of linked sources is displayed: <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectExpandedProject.png\"> To see further details on a source, click on its name. <img style=\"padding: 1em 0\" width=\"650\" alt=\"Unity Reflect dashboard\" src=\"images/ReflectProjectDetails.png\"> To delete a source, click <img style=\"width: 25px\" alt=\"Trash can\" src=\"images/1.3/DeleteIcon.png\">.## Network storage --> Cloud storage Reflect gives you the option to host your projects in the cloud, letting you push data to your mobile devices even when you're on a different network. What data is sent to the cloud when doing an export? If you export to a local or network server, no model data is sent over the internet. If you export to the cloud, then the input file is processed locally and derivative model data (geometry, materials, etc.) is sent to Unity. Project names are always sent over the internet to Unity."
  },
  "api/Unity.Reflect.Data.ManifestEntry.html": {
    "href": "api/Unity.Reflect.Data.ManifestEntry.html",
    "title": "Class ManifestEntry | Unity Reflect | 2.0",
    "keywords": "Class ManifestEntry This class specifies information about an entry in a SyncManifest . Inheritance Object ManifestEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Data <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ManifestEntry Properties BoundingBox The bounding box of the entry. Declaration public SyncBoundingBox BoundingBox { get; set; } Property Value Type Description SyncBoundingBox DstHash The destination hash of the entry. Declaration public string DstHash { get; set; } Property Value Type Description String DstPath The destination path of the entry. Declaration public string DstPath { get; set; } Property Value Type Description String SrcHash The source hash of the entry. Declaration public string SrcHash { get; set; } Property Value Type Description String"
  },
  "api/Unity.Reflect.Utils.Logger.Level.html": {
    "href": "api/Unity.Reflect.Utils.Logger.Level.html",
    "title": "Enum Logger.Level | Unity Reflect | 2.0",
    "keywords": "Enum Logger.Level Sets the level of verbosity of the logger. Namespace : Unity.Reflect.Utils <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum Level Fields Name Description Debug Error Fatal Info Warn"
  },
  "api/Unity.Reflect.Model.SyncLight.Types.IntensityUnit_1.html": {
    "href": "api/Unity.Reflect.Model.SyncLight.Types.IntensityUnit_1.html",
    "title": "Enum SyncLight.Types.IntensityUnit | Unity Reflect | 2.0",
    "keywords": "Enum SyncLight.Types.IntensityUnit Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum IntensityUnit Fields Name Description Candela CandelaPerSquareMeter Lumen Lux Unknown Watt"
  },
  "api/Unity.Reflect.LengthUnit_1.html": {
    "href": "api/Unity.Reflect.LengthUnit_1.html",
    "title": "Enum LengthUnit | Unity Reflect | 2.0",
    "keywords": "Enum LengthUnit Sets the length unit to use when exporting data to the SyncServer. Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum LengthUnit Fields Name Description Feet Inches Meters"
  },
  "api/Unity.Reflect.UnityUser.html": {
    "href": "api/Unity.Reflect.UnityUser.html",
    "title": "Class UnityUser | Unity Reflect | 2.0",
    "keywords": "Class UnityUser This class specifies information about a Unity user. Inheritance Object UnityUser Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class UnityUser Constructors UnityUser(String, String, String) Creates a UnityUser object. Declaration public UnityUser(string accessToken, string displayName, string userId) Parameters Type Name Description String accessToken String displayName String userId Properties AccessToken The access token of the user. Declaration public string AccessToken { get; } Property Value Type Description String DisplayName The name of the user. Declaration public string DisplayName { get; } Property Value Type Description String LogoutUrl The logout url of the user. Declaration public Uri LogoutUrl { get; } Property Value Type Description Uri UserId The unique identifier of the user. Declaration public string UserId { get; } Property Value Type Description String"
  },
  "api/Unity.Reflect.UI.UI.html": {
    "href": "api/Unity.Reflect.UI.UI.html",
    "title": "Class UI | Unity Reflect | 2.0",
    "keywords": "Class UI This class provides some ways to display some common UI Inheritance Object UI Namespace : Unity.Reflect.UI <!--h6><strong>Assembly</strong>: CommonUI.dll</h6--> Syntax public static class UI : object Methods ShowUnityProjects(out UnityUser, out UnityProject, Boolean, String) Displays the Reflect project selection window and waits for its completion. Declaration public static bool ShowUnityProjects(out UnityUser unityUser, out UnityProject unityProject, bool startSTAThread = false, string resourcesPath = null) Parameters Type Name Description UnityUser unityUser If the project selection was successful, contains information about the logged in user UnityProject unityProject If the project selection was successful, contains information about the selected project Boolean startSTAThread Whether to launch the form as a new STA thread String resourcesPath The absolute path to the Resources folder. If null, defaults to the directory of the CommonUI assembly. Returns Type Description Boolean True if the project selection was successful (ie the user is properly logged in and they selected a proper project)."
  },
  "license.html": {
    "href": "license.html",
    "title": "Terms | Unity Reflect | 2.0",
    "keywords": "Terms Terms for Unity Reflect Terms for Unity Reflect Viewer"
  },
  "viewerapi/rework/DataType.html": {
    "href": "viewerapi/rework/DataType.html",
    "title": "| Unity Reflect | 2.0",
    "keywords": ""
  },
  "viewerapi/rework/CustomNode.html": {
    "href": "viewerapi/rework/CustomNode.html",
    "title": "Choosing the right data type | Unity Reflect | 2.0",
    "keywords": "Choosing the right data type Implementing IPipelineNode, IStreamInput and IStreamOutput Passing IPipelineSettings via constructor"
  },
  "manual/devguide/PackageInstall.html": {
    "href": "manual/devguide/PackageInstall.html",
    "title": "Installing the Reflect package | Unity Reflect | 2.0",
    "keywords": "Installing the Reflect package The Reflect Viewer package If you want to use the Reflect Viewer inside the Unity Editor, add the Reflect package: Open a Unity Project from the Hub. In the Unity Editor, make sure Show preview packages is enabled under the Advanced drop-down menu on the Package Manager window. If Unity asks you to confirm your selection, click Yes . Locate Unity Reflect in the list of available packages and click Install ."
  },
  "manual/devguide/PackageCustomize.html": {
    "href": "manual/devguide/PackageCustomize.html",
    "title": "Customizing the Reflect Viewer | Unity Reflect | 2.0",
    "keywords": "Customizing the Reflect Viewer The package folder contains the source code for the Viewer application and the scripts and resources it needs. The Reflect Prefab attaches the scripts and resources directly. To customize the Reflect Viewer in the Unity Editor, add the Reflect Prefab to your scene. From the Project view, go to Packages > Unity Reflect > Runtime . Drag the Reflect prefab into an empty scene and press the Play button. Note: Because the scripts and resources for Reflect are in the package and not in your Project, they will not show up in Visual Studio. One possible workaround to this is to copy the content into your Project, but note that this will prevent the package manager from updating the package."
  },
  "manual/commondocs/plugins/SketchUpOverview.html": {
    "href": "manual/commondocs/plugins/SketchUpOverview.html",
    "title": "Reflect for SketchUp | Unity Reflect | 2.0",
    "keywords": "Reflect for SketchUp Coming soon!"
  },
  "manual/commondocs/plugins/SketchUpInstall.html": {
    "href": "manual/commondocs/plugins/SketchUpInstall.html",
    "title": "Reflect for SketchUp | Unity Reflect | 2.0",
    "keywords": "Reflect for SketchUp Coming soon!"
  },
  "manual/commondocs/plugins/BIM360.html": {
    "href": "manual/commondocs/plugins/BIM360.html",
    "title": "The BIM 360 plugin for Reflect | Unity Reflect | 2.0",
    "keywords": "The BIM 360 plugin for Reflect Authorizing the plugin Getting started The app allows Unity Reflect to access your Autodesk BIM 360 files. Before you can install the plugin, you need to link Unity Reflect to your Autodesk BIM 360 account. Note: You must be a BIM 360 account administrator to continue. Go to the Account Admin page ( https://apps.b360.autodesk.com/ ) and select your account. In the left panel, click My Apps . Click Add Applications > Unity Reflect > Add to BIM 360 > Authorize . Click Open to open Reflect and sign in to your Unity account. In the sidebar, click Autodesk BIM 360. Click Sign In > Allow . Unity Reflect has access to your BIM 360 files. Using the plugin To use the BIM 360 plugin, go to the Unity Reflect Dashboard and navigate to Autodesk BIM 360 in the sidebar. Export BIM 360 files to Reflect From the Unity Reflect Dashboard, navigate to Autodesk BIM 360 > Publish Files in the sidebar. In the Source column, select a BIM 360 Hub and Project. Navigate to your desired file and select a 3D View to export. In the Destination column, select a Unity Reflect Project as the export destination. Note: If you need to create a new Project, click + and enter the Project name and organization. Click the Export button. To monitor your export, navigate to Task Status in the sidebar. <!--<img style=\"padding: 1em 0\" width=\"450\" alt=\"Task Status\" src=\"../images/1.4/BIM3604.png\">--> If you already have Reflect installed, completed exports appear in the Reflect Viewer. If you don’t have Reflect, install Unity Reflect or the standalone Unity Reflect Viewer to see your completed exports. The Unity Reflect Viewer is also available on iOS and Android. How-to video"
  },
  "manual/commondocs/index.html": {
    "href": "manual/commondocs/index.html",
    "title": "Unity Reflect Manual | Unity Reflect | 2.0",
    "keywords": "Unity Reflect Manual Unity Reflect enables designers, architects, and engineers in the AEC industry to easily create immersive real-time 3D experiences in a collaborative way. To learn more about what Reflect can do for you or to purchase a license, visit the product website . This manual provides information about Reflect to users and developers. <!--To learn more about what Reflect can do for you, see [Welcome to Reflect](WelcomeReflect.md).--> <!--For information about the Reflect Viewer, click here.--> Chasm Bridge Unity Reflect <!--<div style=\"width: 90%; margin: 2em 0;\"> <div style=\"display: inline-block; border: 1px solid; height: 15em; padding: 2em; width: 35%;\"><h3><a href=\"WelcomeReflect.html\">User guide</a></h3> </a></div> <div style=\"display: inline-block; border: 1px solid; margin-left: 1em; height: 15em; padding: 2em; width: 35%;\"><h3 style=\"color: red;\"><a href=\"DevGuide.html\">Developer guide</a></h3> </div> </div>--> Reflect plugins are now available for the following applications: Autodesk BIM 360 Autodesk Navisworks Autodesk Revit Rhino SketchUp <!--| [Getting started](ReflectViewer.md) <br> <span style=\"color: red;\">(more links TBD)</span><br><span style=\"color: red;\">(more links TBD)</span>| <span style=\"color: red;\">(more links TBD)</span><br><span style=\"color: red;\">(more links TBD)</span><br><span style=\"color: red;\">(more links TBD)</span> |--> Support Still looking for help? Contact reflect-support@unity3d.com . Last modified: February 8, 2021"
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog | Unity Reflect | 2.0",
    "keywords": "Changelog What's new in Unity Reflect 2.0? This release sees the new Reflect App taken out of beta and made it widely available on all platforms. The addition of BIM 360 integration allows Reflect to bridge the gap between technical and non-technical audiences. New plugin BIM 360 : Users now have the ability to publish models from BIM 360. A link to the BIM 360 dashboard is available in the Viewer. Viewer improvements Selection : Selected objects are outlined rather than fully highlighted. Help mode Project sorting Navigation cube Visual quality upgrades Expanded platform support : New apps have been released for PC, OSX, iOS, and Android. We also support Oculus Rift and HTC Vive on PC and AR functionality on mobile platforms. Known issues Navisworks metadata in the Editor sometimes combines both imperial and metric measurements. Changing Revit elements while the live sync is active can sometimes cause issues with the blue preview boxes in the new beta viewer. Models with a very large coordinate range may not open in the correct place: sometimes, the model will be very far away and appear to not load. In this event, reduce the coordinate range and center the model. See this forum post for details on the workaround. Looking for docs for a previous version of Reflect? Version 1.3 (autumn 2020) Version 1.2 (mid-2020) Version 1.1 (early 2020) Version 1.0 (late 2019)"
  },
  "api/Unity.Reflect.Model.SyncObjectInstance.html": {
    "href": "api/Unity.Reflect.Model.SyncObjectInstance.html",
    "title": "Class SyncObjectInstance | Unity Reflect | 2.0",
    "keywords": "Class SyncObjectInstance This class specifies information about a SyncObject instance. Inheritance Object SyncObjectInstance Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncObjectInstance : ISyncModel, ISyncSendable Constructors SyncObjectInstance() Creates an empty SyncObjectInstance. Declaration public SyncObjectInstance() SyncObjectInstance(SyncId, String, SyncId) Creates a basic SyncObjectInstance. Declaration public SyncObjectInstance(SyncId id, string name, SyncId objectId) Parameters Type Name Description SyncId id The unique ID of the SyncObjectInstance String name The name of the SyncObjectInstance SyncId objectId The target object ID Properties Id The unique identifier of the object instance. Note that it needs to be unique only amongst the other SyncObjectInstances. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Metadata The metadata of the object instance. All the already existing keys in the target SyncObject 's Metadata are overriden. Declaration public SyncMetadata Metadata { get; set; } Property Value Type Description SyncMetadata Name The instance's name. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name ObjectId The unique ID of the instance's target SyncObject . Declaration public SyncId ObjectId { get; set; } Property Value Type Description SyncId Transform The transform of the object instance. It overrides the target SyncObject 's Transform . Declaration public SyncTransform Transform { get; set; } Property Value Type Description SyncTransform"
  },
  "api/Unity.Reflect.Model.SyncLight.Types.Type_1.html": {
    "href": "api/Unity.Reflect.Model.SyncLight.Types.Type_1.html",
    "title": "Enum SyncLight.Types.Type | Unity Reflect | 2.0",
    "keywords": "Enum SyncLight.Types.Type Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum Type Fields Name Description Directional PointType Spot"
  },
  "api/Unity.Reflect.html": {
    "href": "api/Unity.Reflect.html",
    "title": "Namespace Unity.Reflect | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect Classes ConnectionException This exception is thrown by a IPublisherClient or a IPlayerClient if the connection to the SyncServer fails. ManifestAsset This class holds information about a and its corresponding source ID. ManifestUpdatedEventArgs This class is used by the ManifestUpdated event to add information about the event that occurred. NoTransactionPendingException This exception is thrown by StartTransaction() when a transaction is already pending. Player An IPlayerClient factory. ProjectServerClient This class offers a few features to communicate with the Project Server. Publisher An IPublisherClient factory. SessionClosedException This exception is thrown by StartTransaction() when a transaction is already pending. TransactionAlreadyPendingException This exception is thrown by StartTransaction() when a transaction is already pending. UnityProject This class specifies information about a target Unity Project. UnityProjectCollection This class holds information about a collection of UnityProject . UnityProjectHost This class specifies information about a server that can host Unity Projects data. UnityUser This class specifies information about a Unity user. Structs PublisherSettings This struct specifies multiple settings to customize the publisher. Interfaces IPlayerClient This interface provides some Player client features to communicate with a Sync Server. IPublisherClient This interface provides some Publishing client features to communicate with a SyncServer. Enums AxisInversion Sets options for inverting axes when exporting data to the SyncServer. ConnectionStatus Options for the current connection status of the client. LengthUnit Sets the length unit to use when exporting data to the SyncServer. ProjectServerClient.CloudEnvironment Sets the possible cloud environments of the Project Server. UnityProject.SourceOption Sets the possible sources for a UnityProject. UnityProjectCollection.StatusOption Sets the possible status for a collection request."
  },
  "api/Unity.Reflect.Model.html": {
    "href": "api/Unity.Reflect.Model.html",
    "title": "Namespace Unity.Reflect.Model | Unity Reflect | 2.0",
    "keywords": "Namespace Unity.Reflect.Model Classes ColorData ColorReflection Holder for reflection information generated from Color.proto SyncCamera This class specifies information about a camera, that can be included in a SyncObject . SyncLight This class specifies information about a light that can be included in a SyncObject . SyncMap This class specifies information about a texture and the associated operations that should be applied on it in Unity. It can be included in a SyncMaterial . SyncMaterial This class specifies information about a material that can be used in a SyncObject and that can be converted into a Unity Material. SyncMesh This class specifies information about a mesh, that can be included in a SyncObject and which can be converted into a Unity Mesh. SyncMetadata This class specifies a collection of SyncParameter , that can be included in a SyncObject or a SyncObjectInstance . SyncObject This class specifies information about an object that can be converted into a Prefab in Unity. SyncObjectInstance This class specifies information about a SyncObject instance. SyncParameter This class specifies information about a single metadata parameter, that can be added to a SyncMetadata collection. SyncPrefab This class specifies information about a collection of SyncObjectInstance . SyncRPC This class specifies information about a RPC that can be included in a SyncObject . SyncSubMesh This class specifies information about a single submesh, that can be included in a SyncMesh . SyncTexture This class specifies information about a texture that can be included in a SyncMap and which can be converted into a Unity Texture. Structs SyncBoundingBox This struct specifies information about a bounding box. SyncColor This struct specifies information about a color. SyncId This struct specifies a unique ID which allows to identify a ISyncModel . SyncTransform This struct specifies information about a transform. Interfaces ISyncModel This interface represents any base Reflect type, that can be serialized or deserialized. Enums SyncLightIntensityUnit Sets the light intensity unit. SyncLightType Sets the light type."
  },
  "api/Unity.Reflect.Model.SyncLightIntensityUnit.html": {
    "href": "api/Unity.Reflect.Model.SyncLightIntensityUnit.html",
    "title": "Enum SyncLightIntensityUnit | Unity Reflect | 2.0",
    "keywords": "Enum SyncLightIntensityUnit Sets the light intensity unit. Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public enum SyncLightIntensityUnit Fields Name Description Candela CandelaPerSquareMeter Lumen Lux Unknown Watt"
  },
  "api/Unity.Reflect.ProjectServerClient.html": {
    "href": "api/Unity.Reflect.ProjectServerClient.html",
    "title": "Class ProjectServerClient | Unity Reflect | 2.0",
    "keywords": "Class ProjectServerClient This class offers a few features to communicate with the Project Server. Inheritance Object ProjectServerClient Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class ProjectServerClient Constructors ProjectServerClient(ProjectServerClient.CloudEnvironment, String) Creates a ProjectServerClient. Declaration public ProjectServerClient(ProjectServerClient.CloudEnvironment cloudEnvironment, string userDataFolder) Parameters Type Name Description ProjectServerClient.CloudEnvironment cloudEnvironment The cloud environment of the project server String userDataFolder The folder in which user data is to be stored Methods GetUserInfo(String) Asynchronously gets the Unity User from its token. Declaration public Task<UnityUser> GetUserInfo(string token) Parameters Type Name Description String token The user's access token Returns Type Description Task < UnityUser > The Unity User corresponding to the provided token ListProjects(UnityUser, LocalStorage) Asynchronously gets the list of available Unity Projects for a given Unity User and their . Declaration public Task<UnityProjectCollection> ListProjects(UnityUser user, LocalStorage localStorage) Parameters Type Name Description UnityUser user The logged in Unity User LocalStorage localStorage The local storage that the user is using Returns Type Description Task < UnityProjectCollection > A collection of available Unity Projects for the provided Unity User."
  },
  "api/Unity.Reflect.Model.SyncTexture.html": {
    "href": "api/Unity.Reflect.Model.SyncTexture.html",
    "title": "Class SyncTexture | Unity Reflect | 2.0",
    "keywords": "Class SyncTexture This class specifies information about a texture that can be included in a SyncMap and which can be converted into a Unity Texture. Inheritance Object SyncTexture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unity.Reflect.Model <!--h6><strong>Assembly</strong>: cs.temp.dll.dll</h6--> Syntax public class SyncTexture : ISyncModel, ISyncSendable Constructors SyncTexture() Creates an empty SyncTexture. Declaration public SyncTexture() SyncTexture(SyncId, String) Creates a basic SyncTexture. Declaration public SyncTexture(SyncId id, string name) Parameters Type Name Description SyncId id The unique ID of the SyncTexture String name The name of the SyncTexture Fields Extension The file extension for this type Declaration public static string Extension Field Value Type Description String Properties ConvertToNormalMap Whether the texture has to be converted to normal map in Unity. Declaration public bool ConvertToNormalMap { get; set; } Property Value Type Description Boolean Id The unique identifier of the texture. Note that it needs to be unique only amongst the other SyncTextures. Declaration public SyncId Id { get; } Property Value Type Description SyncId Implements ISyncModel.Id Name The name of the texture. Declaration public string Name { get; set; } Property Value Type Description String Implements ISyncModel.Name Source The content of the texture, as a raw array of bytes. You just need to read all the bytes from the chosen image file. Declaration public byte[] Source { get; set; } Property Value Type Description Byte []"
  }
}