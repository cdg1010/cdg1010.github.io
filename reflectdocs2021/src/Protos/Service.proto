syntax = "proto3";
package Reflect;

option java_multiple_files = true;
option java_package = "io.grpc.unitysyncservices";
option java_outer_classname = "Unity.Reflect.Services";
option objc_class_prefix = "HLW";
option csharp_namespace = "Unity.Reflect.Services";

import "Manifest.proto";
import "Object.proto";
import "Texture.proto";
import "Material.proto";
import "Mesh.proto";

service SyncAgent
{
	rpc HealthCheck (Empty) returns (ResponseStatus) {}
	rpc CloseService (CloseRequest) returns (ResponseStatus) {}

	// HubService relay start
	rpc ListUnityProject (UnityProjectRequest) returns (UnityProjectResponse) {}
	rpc CreateUnityProject(Empty) returns (ResponseStatus) {}
	rpc GetUnityUser (Empty) returns (UnityUserResponse) {}
	rpc UserLogin(Empty) returns (ResponseStatus) {}
	// HubService relay end

	rpc BeginSession (Session) returns (ResponseSession) {}
	
	rpc SendTexture (TextureAsset) returns (ResponseStatus) {}
	rpc SendMaterial (MaterialAsset) returns (ResponseStatus) {}
	rpc SendMesh (MeshAsset) returns (ResponseStatus) {}
	rpc SendObject (ObjectAsset) returns (ResponseStatus) {}
	rpc SendObjectInstance (ObjectInstanceAsset) returns (ResponseStatus) {}
	rpc RemoveObjectInstance (ObjectInstanceIdAsset) returns (ResponseStatus) {}

	rpc Push (SessionAsset) returns (ResponseStatus) {}
	rpc EndSession (SessionAsset) returns (ResponseStatus) {}
	
	rpc Observe(ObserveRequest) returns (stream ObserveNotification) {}
	rpc AddObservable(ObserveRequest) returns (ResponseStatus) {}
	rpc Release(ReleaseRequest) returns (ReleaseStatus) {}

	rpc GetManifests(ManifestsRequest) returns (ResponseManifests) {}
	rpc GetManifest(ManifestRequest) returns (ManifestAsset) {}

	rpc GetTexture(SyncModelRequest) returns (TextureAsset) {}
	rpc GetMaterial(SyncModelRequest) returns (MaterialAsset) {}
	rpc GetMesh(SyncModelRequest) returns (MeshAsset) {}
	rpc GetObject(SyncModelRequest) returns (ObjectAsset) {}
	rpc GetPrefab(SyncModelRequest) returns (PrefabAsset) {}
}

enum Status {
	SUCCESS = 0;
	FAILURE = 1;
}

enum UnitConversion {
	UNIT_NONE = 0;
	UNIT_FEET_TO_METER = 1;
	UNIT_INCHES_TO_METER = 2;
}

enum AxisConversion {
	AXIS_NONE = 0;
	AXIS_FLIP_Y_Z = 1;
}

enum Observable {
	KEEP_ALIVE = 0;
	USER_UPDATE = 1;
	SESSION_BEGIN = 2;
	SESSION_END = 3;
	UNITY_PROJECT_LIST_UPDATE = 4;
	MANIFEST_UPDATE = 5;
}

message Empty {
}

message CloseRequest 
{
	string processId = 1;
}

message ResponseStatus {
	Status status = 1;
}

message ResponseSession {
	Status status = 1;
	string sourceId = 2;
}

message Session {
	string sourceId = 1;
	string userId = 2;
	string projectId = 3;
	string name = 4;
	UnitConversion unitConversion = 5;
	AxisConversion axisConversion = 6;
	string rules = 7;
}

message SessionAsset {
	string sourceId = 1;
}

message ObjectAsset {
	string sourceId = 1;
	string hash = 2;
	SyncObject object = 3;
}

message ObjectInstanceIdAsset {
	string sourceId = 1;
	string instance = 2;
}

message ObjectInstanceAsset {
	string sourceId = 1;
	SyncObjectInstance instance = 2;
}

message PrefabAsset {
	string sourceId = 1;
	string hash = 2;
	SyncPrefab prefab = 3;
}

message MeshAsset {
	string sourceId = 1;
	string hash = 2;
	SyncMesh mesh = 3;
}

message MaterialAsset {
	string sourceId = 1;
	string hash = 2;
	SyncMaterial material = 3;
}

message TextureAsset {
	string sourceId = 1;
	string hash = 2;
	SyncTexture texture = 3;
}

message ManifestsRequest {
	string projectId = 1;
}

message ResponseManifests {
	repeated ManifestAsset manifests = 1;
}

message ManifestAsset {
	string projectId = 1;
	string sourceId = 2;
	SyncManifest manifest = 3;
}

message ManifestRequest {
	string projectId = 1;
	string sourceId = 2;
}

message UnityProjectRequest {
	string userId = 1;
	string organisationId = 2;
	bool includeCloudProject = 3;
	bool includeRemoteProjects = 4;
}

message UnityProjectResponse {
	bool success = 1;
	repeated UnityProject projects = 2;
}

message UnityProject {
	string id = 1;
	string projectId = 2;
	string name = 3;
	string serverName = 4;
	string serverAddress = 5;
	bool cloudOnly = 6;
}

message UnityUserResponse {
	bool success = 1;
	UnityUser user = 2;
}

message UnityUser {
	string accessToken = 1;
	string displayName = 2;
	string organizationForeignKeys = 3;
	string primaryOrg = 4;
	string userId = 5;
	string name = 6;
	bool valid = 7;
	bool whitelisted = 8;
}

message ObserveRequest {
	string observableId = 1;
	Observable observableType = 2;
}

message SyncModelRequest {
	string projectId = 1;
	string sourceId = 2;
	string dstPath = 3;
}

message ReleaseRequest {
	string observableId = 1;
	Observable observableType = 2;
}

message ReleaseStatus {
	bool success = 1;
	bool observeComplete = 2;
}

message ObserveNotification {
	string observableId = 1;
	Observable observableType = 2;
}

