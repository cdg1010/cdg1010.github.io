// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProjectServer/SyncServer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Unity.Reflect.ProjectServer.Services.SyncServer {
  /// <summary>
  /// This service requires the client to be signed-in and have the Reflect entitlement
  /// </summary>
  public static partial class RegistrationService
  {
    static readonly string __ServiceName = "Reflect.RegistrationService";

    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest> __Marshaller_Reflect_RegistrationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> __Marshaller_Reflect_KeepAliveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest> __Marshaller_Reflect_KeepAliveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest> __Marshaller_Reflect_UnregisterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.Empty> __Marshaller_Reflect_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> __Method_Register = new grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_Reflect_RegistrationRequest,
        __Marshaller_Reflect_KeepAliveResponse);

    static readonly grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> __Method_KeepAlive = new grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KeepAlive",
        __Marshaller_Reflect_KeepAliveRequest,
        __Marshaller_Reflect_KeepAliveResponse);

    static readonly grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest, global::Unity.Reflect.ProjectServer.Services.Empty> __Method_Unregister = new grpc::Method<global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest, global::Unity.Reflect.ProjectServer.Services.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unregister",
        __Marshaller_Reflect_UnregisterRequest,
        __Marshaller_Reflect_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Unity.Reflect.ProjectServer.Services.SyncServer.SyncServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RegistrationService</summary>
    [grpc::BindServiceMethod(typeof(RegistrationService), "BindService")]
    public abstract partial class RegistrationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> Register(global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> KeepAlive(global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.ProjectServer.Services.Empty> Unregister(global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegistrationService</summary>
    public partial class RegistrationServiceClient : grpc::ClientBase<RegistrationServiceClient>
    {
      /// <summary>Creates a new client for RegistrationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegistrationServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegistrationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegistrationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegistrationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegistrationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse Register(global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse Register(global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> RegisterAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> RegisterAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse KeepAlive(global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAlive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse KeepAlive(global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KeepAlive, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> KeepAliveAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAliveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse> KeepAliveAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KeepAlive, null, options, request);
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.Empty Unregister(global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.Empty Unregister(global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unregister, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.Empty> UnregisterAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.Empty> UnregisterAsync(global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unregister, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegistrationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegistrationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegistrationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_KeepAlive, serviceImpl.KeepAlive)
          .AddMethod(__Method_Unregister, serviceImpl.Unregister).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegistrationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.ProjectServer.Services.SyncServer.RegistrationRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_KeepAlive, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveRequest, global::Unity.Reflect.ProjectServer.Services.SyncServer.KeepAliveResponse>(serviceImpl.KeepAlive));
      serviceBinder.AddMethod(__Method_Unregister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.ProjectServer.Services.SyncServer.UnregisterRequest, global::Unity.Reflect.ProjectServer.Services.Empty>(serviceImpl.Unregister));
    }

  }
}
#endregion
