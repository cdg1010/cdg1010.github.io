// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Unity.Reflect.Services {
  internal static partial class SyncAgent
  {
    static readonly string __ServiceName = "Reflect.SyncAgent";

    static readonly grpc::Marshaller<global::Unity.Reflect.Services.Empty> __Marshaller_Reflect_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ResponseStatus> __Marshaller_Reflect_ResponseStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ResponseStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.CloseRequest> __Marshaller_Reflect_CloseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.CloseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.UnityProjectRequest> __Marshaller_Reflect_UnityProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.UnityProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.UnityProjectResponse> __Marshaller_Reflect_UnityProjectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.UnityProjectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.UnityUserResponse> __Marshaller_Reflect_UnityUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.UnityUserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.Session> __Marshaller_Reflect_Session = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.Session.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ResponseSession> __Marshaller_Reflect_ResponseSession = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ResponseSession.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.TextureAsset> __Marshaller_Reflect_TextureAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.TextureAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.MaterialAsset> __Marshaller_Reflect_MaterialAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.MaterialAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.MeshAsset> __Marshaller_Reflect_MeshAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.MeshAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ObjectAsset> __Marshaller_Reflect_ObjectAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ObjectAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ObjectInstanceAsset> __Marshaller_Reflect_ObjectInstanceAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ObjectInstanceAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ObjectInstanceIdAsset> __Marshaller_Reflect_ObjectInstanceIdAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ObjectInstanceIdAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.SessionAsset> __Marshaller_Reflect_SessionAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.SessionAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ObserveRequest> __Marshaller_Reflect_ObserveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ObserveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ObserveNotification> __Marshaller_Reflect_ObserveNotification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ObserveNotification.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ReleaseRequest> __Marshaller_Reflect_ReleaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ReleaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ReleaseStatus> __Marshaller_Reflect_ReleaseStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ReleaseStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ManifestsRequest> __Marshaller_Reflect_ManifestsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ManifestsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ResponseManifests> __Marshaller_Reflect_ResponseManifests = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ResponseManifests.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ManifestRequest> __Marshaller_Reflect_ManifestRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ManifestRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.ManifestAsset> __Marshaller_Reflect_ManifestAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.ManifestAsset.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.SyncModelRequest> __Marshaller_Reflect_SyncModelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.SyncModelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.Services.PrefabAsset> __Marshaller_Reflect_PrefabAsset = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.Services.PrefabAsset.Parser.ParseFrom);

    static readonly grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus> __Method_HealthCheck = new grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HealthCheck",
        __Marshaller_Reflect_Empty,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.CloseRequest, global::Unity.Reflect.Services.ResponseStatus> __Method_CloseService = new grpc::Method<global::Unity.Reflect.Services.CloseRequest, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseService",
        __Marshaller_Reflect_CloseRequest,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.UnityProjectRequest, global::Unity.Reflect.Services.UnityProjectResponse> __Method_ListUnityProject = new grpc::Method<global::Unity.Reflect.Services.UnityProjectRequest, global::Unity.Reflect.Services.UnityProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUnityProject",
        __Marshaller_Reflect_UnityProjectRequest,
        __Marshaller_Reflect_UnityProjectResponse);

    static readonly grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus> __Method_CreateUnityProject = new grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUnityProject",
        __Marshaller_Reflect_Empty,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.UnityUserResponse> __Method_GetUnityUser = new grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.UnityUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUnityUser",
        __Marshaller_Reflect_Empty,
        __Marshaller_Reflect_UnityUserResponse);

    static readonly grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus> __Method_UserLogin = new grpc::Method<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserLogin",
        __Marshaller_Reflect_Empty,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.Session, global::Unity.Reflect.Services.ResponseSession> __Method_BeginSession = new grpc::Method<global::Unity.Reflect.Services.Session, global::Unity.Reflect.Services.ResponseSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginSession",
        __Marshaller_Reflect_Session,
        __Marshaller_Reflect_ResponseSession);

    static readonly grpc::Method<global::Unity.Reflect.Services.TextureAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_SendTexture = new grpc::Method<global::Unity.Reflect.Services.TextureAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTexture",
        __Marshaller_Reflect_TextureAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.MaterialAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_SendMaterial = new grpc::Method<global::Unity.Reflect.Services.MaterialAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMaterial",
        __Marshaller_Reflect_MaterialAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.MeshAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_SendMesh = new grpc::Method<global::Unity.Reflect.Services.MeshAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMesh",
        __Marshaller_Reflect_MeshAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ObjectAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_SendObject = new grpc::Method<global::Unity.Reflect.Services.ObjectAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendObject",
        __Marshaller_Reflect_ObjectAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ObjectInstanceAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_SendObjectInstance = new grpc::Method<global::Unity.Reflect.Services.ObjectInstanceAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendObjectInstance",
        __Marshaller_Reflect_ObjectInstanceAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ObjectInstanceIdAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_RemoveObjectInstance = new grpc::Method<global::Unity.Reflect.Services.ObjectInstanceIdAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveObjectInstance",
        __Marshaller_Reflect_ObjectInstanceIdAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_Push = new grpc::Method<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Push",
        __Marshaller_Reflect_SessionAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus> __Method_EndSession = new grpc::Method<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndSession",
        __Marshaller_Reflect_SessionAsset,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ObserveNotification> __Method_Observe = new grpc::Method<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ObserveNotification>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Observe",
        __Marshaller_Reflect_ObserveRequest,
        __Marshaller_Reflect_ObserveNotification);

    static readonly grpc::Method<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ResponseStatus> __Method_AddObservable = new grpc::Method<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ResponseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddObservable",
        __Marshaller_Reflect_ObserveRequest,
        __Marshaller_Reflect_ResponseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ReleaseRequest, global::Unity.Reflect.Services.ReleaseStatus> __Method_Release = new grpc::Method<global::Unity.Reflect.Services.ReleaseRequest, global::Unity.Reflect.Services.ReleaseStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Release",
        __Marshaller_Reflect_ReleaseRequest,
        __Marshaller_Reflect_ReleaseStatus);

    static readonly grpc::Method<global::Unity.Reflect.Services.ManifestsRequest, global::Unity.Reflect.Services.ResponseManifests> __Method_GetManifests = new grpc::Method<global::Unity.Reflect.Services.ManifestsRequest, global::Unity.Reflect.Services.ResponseManifests>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetManifests",
        __Marshaller_Reflect_ManifestsRequest,
        __Marshaller_Reflect_ResponseManifests);

    static readonly grpc::Method<global::Unity.Reflect.Services.ManifestRequest, global::Unity.Reflect.Services.ManifestAsset> __Method_GetManifest = new grpc::Method<global::Unity.Reflect.Services.ManifestRequest, global::Unity.Reflect.Services.ManifestAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetManifest",
        __Marshaller_Reflect_ManifestRequest,
        __Marshaller_Reflect_ManifestAsset);

    static readonly grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.TextureAsset> __Method_GetTexture = new grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.TextureAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTexture",
        __Marshaller_Reflect_SyncModelRequest,
        __Marshaller_Reflect_TextureAsset);

    static readonly grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MaterialAsset> __Method_GetMaterial = new grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MaterialAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMaterial",
        __Marshaller_Reflect_SyncModelRequest,
        __Marshaller_Reflect_MaterialAsset);

    static readonly grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MeshAsset> __Method_GetMesh = new grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MeshAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMesh",
        __Marshaller_Reflect_SyncModelRequest,
        __Marshaller_Reflect_MeshAsset);

    static readonly grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.ObjectAsset> __Method_GetObject = new grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.ObjectAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObject",
        __Marshaller_Reflect_SyncModelRequest,
        __Marshaller_Reflect_ObjectAsset);

    static readonly grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.PrefabAsset> __Method_GetPrefab = new grpc::Method<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.PrefabAsset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrefab",
        __Marshaller_Reflect_SyncModelRequest,
        __Marshaller_Reflect_PrefabAsset);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Unity.Reflect.Services.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SyncAgent</summary>
    [grpc::BindServiceMethod(typeof(SyncAgent), "BindService")]
    public abstract partial class SyncAgentBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> HealthCheck(global::Unity.Reflect.Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> CloseService(global::Unity.Reflect.Services.CloseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HubService relay start
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.UnityProjectResponse> ListUnityProject(global::Unity.Reflect.Services.UnityProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> CreateUnityProject(global::Unity.Reflect.Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.UnityUserResponse> GetUnityUser(global::Unity.Reflect.Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> UserLogin(global::Unity.Reflect.Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseSession> BeginSession(global::Unity.Reflect.Services.Session request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> SendTexture(global::Unity.Reflect.Services.TextureAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> SendMaterial(global::Unity.Reflect.Services.MaterialAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> SendMesh(global::Unity.Reflect.Services.MeshAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> SendObject(global::Unity.Reflect.Services.ObjectAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> SendObjectInstance(global::Unity.Reflect.Services.ObjectInstanceAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> RemoveObjectInstance(global::Unity.Reflect.Services.ObjectInstanceIdAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> Push(global::Unity.Reflect.Services.SessionAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> EndSession(global::Unity.Reflect.Services.SessionAsset request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Observe(global::Unity.Reflect.Services.ObserveRequest request, grpc::IServerStreamWriter<global::Unity.Reflect.Services.ObserveNotification> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseStatus> AddObservable(global::Unity.Reflect.Services.ObserveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ReleaseStatus> Release(global::Unity.Reflect.Services.ReleaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ResponseManifests> GetManifests(global::Unity.Reflect.Services.ManifestsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ManifestAsset> GetManifest(global::Unity.Reflect.Services.ManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.TextureAsset> GetTexture(global::Unity.Reflect.Services.SyncModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.MaterialAsset> GetMaterial(global::Unity.Reflect.Services.SyncModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.MeshAsset> GetMesh(global::Unity.Reflect.Services.SyncModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.ObjectAsset> GetObject(global::Unity.Reflect.Services.SyncModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.Services.PrefabAsset> GetPrefab(global::Unity.Reflect.Services.SyncModelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SyncAgent</summary>
    public partial class SyncAgentClient : grpc::ClientBase<SyncAgentClient>
    {
      /// <summary>Creates a new client for SyncAgent</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SyncAgentClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SyncAgent that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SyncAgentClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SyncAgentClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SyncAgentClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Unity.Reflect.Services.ResponseStatus HealthCheck(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus HealthCheck(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HealthCheck, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> HealthCheckAsync(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthCheckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> HealthCheckAsync(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HealthCheck, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus CloseService(global::Unity.Reflect.Services.CloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus CloseService(global::Unity.Reflect.Services.CloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseService, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> CloseServiceAsync(global::Unity.Reflect.Services.CloseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> CloseServiceAsync(global::Unity.Reflect.Services.CloseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseService, null, options, request);
      }
      /// <summary>
      /// HubService relay start
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Unity.Reflect.Services.UnityProjectResponse ListUnityProject(global::Unity.Reflect.Services.UnityProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnityProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HubService relay start
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Unity.Reflect.Services.UnityProjectResponse ListUnityProject(global::Unity.Reflect.Services.UnityProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUnityProject, null, options, request);
      }
      /// <summary>
      /// HubService relay start
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.UnityProjectResponse> ListUnityProjectAsync(global::Unity.Reflect.Services.UnityProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnityProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HubService relay start
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.UnityProjectResponse> ListUnityProjectAsync(global::Unity.Reflect.Services.UnityProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUnityProject, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus CreateUnityProject(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnityProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus CreateUnityProject(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUnityProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> CreateUnityProjectAsync(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnityProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> CreateUnityProjectAsync(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUnityProject, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.UnityUserResponse GetUnityUser(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUnityUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.UnityUserResponse GetUnityUser(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUnityUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.UnityUserResponse> GetUnityUserAsync(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUnityUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.UnityUserResponse> GetUnityUserAsync(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUnityUser, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus UserLogin(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus UserLogin(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> UserLoginAsync(global::Unity.Reflect.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> UserLoginAsync(global::Unity.Reflect.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseSession BeginSession(global::Unity.Reflect.Services.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseSession BeginSession(global::Unity.Reflect.Services.Session request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseSession> BeginSessionAsync(global::Unity.Reflect.Services.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseSession> BeginSessionAsync(global::Unity.Reflect.Services.Session request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginSession, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendTexture(global::Unity.Reflect.Services.TextureAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTexture(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendTexture(global::Unity.Reflect.Services.TextureAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTexture, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendTextureAsync(global::Unity.Reflect.Services.TextureAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTextureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendTextureAsync(global::Unity.Reflect.Services.TextureAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTexture, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendMaterial(global::Unity.Reflect.Services.MaterialAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMaterial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendMaterial(global::Unity.Reflect.Services.MaterialAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMaterial, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendMaterialAsync(global::Unity.Reflect.Services.MaterialAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMaterialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendMaterialAsync(global::Unity.Reflect.Services.MaterialAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMaterial, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendMesh(global::Unity.Reflect.Services.MeshAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMesh(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendMesh(global::Unity.Reflect.Services.MeshAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMesh, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendMeshAsync(global::Unity.Reflect.Services.MeshAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMeshAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendMeshAsync(global::Unity.Reflect.Services.MeshAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMesh, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendObject(global::Unity.Reflect.Services.ObjectAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendObject(global::Unity.Reflect.Services.ObjectAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendObject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendObjectAsync(global::Unity.Reflect.Services.ObjectAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendObjectAsync(global::Unity.Reflect.Services.ObjectAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendObject, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendObjectInstance(global::Unity.Reflect.Services.ObjectInstanceAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendObjectInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus SendObjectInstance(global::Unity.Reflect.Services.ObjectInstanceAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendObjectInstance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendObjectInstanceAsync(global::Unity.Reflect.Services.ObjectInstanceAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendObjectInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> SendObjectInstanceAsync(global::Unity.Reflect.Services.ObjectInstanceAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendObjectInstance, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus RemoveObjectInstance(global::Unity.Reflect.Services.ObjectInstanceIdAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveObjectInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus RemoveObjectInstance(global::Unity.Reflect.Services.ObjectInstanceIdAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveObjectInstance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> RemoveObjectInstanceAsync(global::Unity.Reflect.Services.ObjectInstanceIdAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveObjectInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> RemoveObjectInstanceAsync(global::Unity.Reflect.Services.ObjectInstanceIdAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveObjectInstance, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus Push(global::Unity.Reflect.Services.SessionAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Push(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus Push(global::Unity.Reflect.Services.SessionAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Push, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> PushAsync(global::Unity.Reflect.Services.SessionAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> PushAsync(global::Unity.Reflect.Services.SessionAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Push, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus EndSession(global::Unity.Reflect.Services.SessionAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus EndSession(global::Unity.Reflect.Services.SessionAsset request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> EndSessionAsync(global::Unity.Reflect.Services.SessionAsset request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> EndSessionAsync(global::Unity.Reflect.Services.SessionAsset request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndSession, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Unity.Reflect.Services.ObserveNotification> Observe(global::Unity.Reflect.Services.ObserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Observe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Unity.Reflect.Services.ObserveNotification> Observe(global::Unity.Reflect.Services.ObserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Observe, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus AddObservable(global::Unity.Reflect.Services.ObserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObservable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseStatus AddObservable(global::Unity.Reflect.Services.ObserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddObservable, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> AddObservableAsync(global::Unity.Reflect.Services.ObserveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddObservableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseStatus> AddObservableAsync(global::Unity.Reflect.Services.ObserveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddObservable, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ReleaseStatus Release(global::Unity.Reflect.Services.ReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Release(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ReleaseStatus Release(global::Unity.Reflect.Services.ReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Release, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ReleaseStatus> ReleaseAsync(global::Unity.Reflect.Services.ReleaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReleaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ReleaseStatus> ReleaseAsync(global::Unity.Reflect.Services.ReleaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Release, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ResponseManifests GetManifests(global::Unity.Reflect.Services.ManifestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManifests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ResponseManifests GetManifests(global::Unity.Reflect.Services.ManifestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManifests, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseManifests> GetManifestsAsync(global::Unity.Reflect.Services.ManifestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManifestsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ResponseManifests> GetManifestsAsync(global::Unity.Reflect.Services.ManifestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManifests, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ManifestAsset GetManifest(global::Unity.Reflect.Services.ManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ManifestAsset GetManifest(global::Unity.Reflect.Services.ManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManifest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ManifestAsset> GetManifestAsync(global::Unity.Reflect.Services.ManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ManifestAsset> GetManifestAsync(global::Unity.Reflect.Services.ManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManifest, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.TextureAsset GetTexture(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTexture(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.TextureAsset GetTexture(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTexture, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.TextureAsset> GetTextureAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTextureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.TextureAsset> GetTextureAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTexture, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.MaterialAsset GetMaterial(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMaterial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.MaterialAsset GetMaterial(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMaterial, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.MaterialAsset> GetMaterialAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMaterialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.MaterialAsset> GetMaterialAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMaterial, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.MeshAsset GetMesh(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMesh(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.MeshAsset GetMesh(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMesh, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.MeshAsset> GetMeshAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMeshAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.MeshAsset> GetMeshAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMesh, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.ObjectAsset GetObject(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.ObjectAsset GetObject(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ObjectAsset> GetObjectAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.ObjectAsset> GetObjectAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObject, null, options, request);
      }
      public virtual global::Unity.Reflect.Services.PrefabAsset GetPrefab(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrefab(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.Services.PrefabAsset GetPrefab(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrefab, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.PrefabAsset> GetPrefabAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrefabAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.Services.PrefabAsset> GetPrefabAsync(global::Unity.Reflect.Services.SyncModelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrefab, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SyncAgentClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SyncAgentClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SyncAgentBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_HealthCheck, serviceImpl.HealthCheck)
          .AddMethod(__Method_CloseService, serviceImpl.CloseService)
          .AddMethod(__Method_ListUnityProject, serviceImpl.ListUnityProject)
          .AddMethod(__Method_CreateUnityProject, serviceImpl.CreateUnityProject)
          .AddMethod(__Method_GetUnityUser, serviceImpl.GetUnityUser)
          .AddMethod(__Method_UserLogin, serviceImpl.UserLogin)
          .AddMethod(__Method_BeginSession, serviceImpl.BeginSession)
          .AddMethod(__Method_SendTexture, serviceImpl.SendTexture)
          .AddMethod(__Method_SendMaterial, serviceImpl.SendMaterial)
          .AddMethod(__Method_SendMesh, serviceImpl.SendMesh)
          .AddMethod(__Method_SendObject, serviceImpl.SendObject)
          .AddMethod(__Method_SendObjectInstance, serviceImpl.SendObjectInstance)
          .AddMethod(__Method_RemoveObjectInstance, serviceImpl.RemoveObjectInstance)
          .AddMethod(__Method_Push, serviceImpl.Push)
          .AddMethod(__Method_EndSession, serviceImpl.EndSession)
          .AddMethod(__Method_Observe, serviceImpl.Observe)
          .AddMethod(__Method_AddObservable, serviceImpl.AddObservable)
          .AddMethod(__Method_Release, serviceImpl.Release)
          .AddMethod(__Method_GetManifests, serviceImpl.GetManifests)
          .AddMethod(__Method_GetManifest, serviceImpl.GetManifest)
          .AddMethod(__Method_GetTexture, serviceImpl.GetTexture)
          .AddMethod(__Method_GetMaterial, serviceImpl.GetMaterial)
          .AddMethod(__Method_GetMesh, serviceImpl.GetMesh)
          .AddMethod(__Method_GetObject, serviceImpl.GetObject)
          .AddMethod(__Method_GetPrefab, serviceImpl.GetPrefab).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SyncAgentBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_HealthCheck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.HealthCheck));
      serviceBinder.AddMethod(__Method_CloseService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.CloseRequest, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.CloseService));
      serviceBinder.AddMethod(__Method_ListUnityProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.UnityProjectRequest, global::Unity.Reflect.Services.UnityProjectResponse>(serviceImpl.ListUnityProject));
      serviceBinder.AddMethod(__Method_CreateUnityProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.CreateUnityProject));
      serviceBinder.AddMethod(__Method_GetUnityUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.UnityUserResponse>(serviceImpl.GetUnityUser));
      serviceBinder.AddMethod(__Method_UserLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.Empty, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.UserLogin));
      serviceBinder.AddMethod(__Method_BeginSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.Session, global::Unity.Reflect.Services.ResponseSession>(serviceImpl.BeginSession));
      serviceBinder.AddMethod(__Method_SendTexture, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.TextureAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.SendTexture));
      serviceBinder.AddMethod(__Method_SendMaterial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.MaterialAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.SendMaterial));
      serviceBinder.AddMethod(__Method_SendMesh, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.MeshAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.SendMesh));
      serviceBinder.AddMethod(__Method_SendObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ObjectAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.SendObject));
      serviceBinder.AddMethod(__Method_SendObjectInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ObjectInstanceAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.SendObjectInstance));
      serviceBinder.AddMethod(__Method_RemoveObjectInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ObjectInstanceIdAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.RemoveObjectInstance));
      serviceBinder.AddMethod(__Method_Push, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.Push));
      serviceBinder.AddMethod(__Method_EndSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SessionAsset, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.EndSession));
      serviceBinder.AddMethod(__Method_Observe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ObserveNotification>(serviceImpl.Observe));
      serviceBinder.AddMethod(__Method_AddObservable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ObserveRequest, global::Unity.Reflect.Services.ResponseStatus>(serviceImpl.AddObservable));
      serviceBinder.AddMethod(__Method_Release, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ReleaseRequest, global::Unity.Reflect.Services.ReleaseStatus>(serviceImpl.Release));
      serviceBinder.AddMethod(__Method_GetManifests, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ManifestsRequest, global::Unity.Reflect.Services.ResponseManifests>(serviceImpl.GetManifests));
      serviceBinder.AddMethod(__Method_GetManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.ManifestRequest, global::Unity.Reflect.Services.ManifestAsset>(serviceImpl.GetManifest));
      serviceBinder.AddMethod(__Method_GetTexture, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.TextureAsset>(serviceImpl.GetTexture));
      serviceBinder.AddMethod(__Method_GetMaterial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MaterialAsset>(serviceImpl.GetMaterial));
      serviceBinder.AddMethod(__Method_GetMesh, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.MeshAsset>(serviceImpl.GetMesh));
      serviceBinder.AddMethod(__Method_GetObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.ObjectAsset>(serviceImpl.GetObject));
      serviceBinder.AddMethod(__Method_GetPrefab, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.Services.SyncModelRequest, global::Unity.Reflect.Services.PrefabAsset>(serviceImpl.GetPrefab));
    }

  }
}
#endregion
