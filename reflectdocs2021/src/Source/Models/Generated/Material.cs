// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Material.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Unity.Reflect.Model {

  /// <summary>Holder for reflection information generated from Material.proto</summary>
  public static partial class MaterialReflection {

    #region Descriptor
    /// <summary>File descriptor for Material.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MaterialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NYXRlcmlhbC5wcm90bxIHUmVmbGVjdBoLQ29sb3IucHJvdG8aEU1hdGhl",
            "bWF0aWNzLnByb3RvIqsECgxTeW5jTWF0ZXJpYWwSDAoEbmFtZRgBIAEoCRIg",
            "CgR0aW50GAIgASgLMhIuUmVmbGVjdC5TeW5jQ29sb3ISJwoLYWxiZWRvQ29s",
            "b3IYAyABKAsyEi5SZWZsZWN0LlN5bmNDb2xvchIjCglhbGJlZG9NYXAYBCAB",
            "KAsyEC5SZWZsZWN0LlN5bmNNYXASEgoKYWxiZWRvRmFkZRgFIAEoAhINCgVh",
            "bHBoYRgGIAEoAhIiCghhbHBoYU1hcBgHIAEoCzIQLlJlZmxlY3QuU3luY01h",
            "cBIjCglub3JtYWxNYXAYCCABKAsyEC5SZWZsZWN0LlN5bmNNYXASEwoLbm9y",
            "bWFsU2NhbGUYCSABKAISIwoJY3V0b3V0TWFwGAogASgLMhAuUmVmbGVjdC5T",
            "eW5jTWFwEhcKD2N1dG91dFRocmVzaG9sZBgLIAEoAhISCgpnbG9zc2luZXNz",
            "GAwgASgCEicKDWdsb3NzaW5lc3NNYXAYDSABKAsyEC5SZWZsZWN0LlN5bmNN",
            "YXASEAoIbWV0YWxsaWMYDiABKAISJQoLbWV0YWxsaWNNYXAYDyABKAsyEC5S",
            "ZWZsZWN0LlN5bmNNYXASJAoIZW1pc3Npb24YECABKAsyEi5SZWZsZWN0LlN5",
            "bmNDb2xvchIbChNlbWlzc2lvblRlbXBlcmF0dXJlGBEgASgCEiUKC2VtaXNz",
            "aW9uTWFwGBIgASgLMhAuUmVmbGVjdC5TeW5jTWFwIqEBCgdTeW5jTWFwEg8K",
            "B3RleHR1cmUYASABKAkSIwoGb2Zmc2V0GAIgASgLMhMuUmVmbGVjdC5TeW5j",
            "RmxvYXQyEiMKBnRpbGluZxgDIAEoCzITLlJlZmxlY3QuU3luY0Zsb2F0MhIS",
            "CgpicmlnaHRuZXNzGAQgASgCEg4KBmludmVydBgFIAEoCBIXCg9yb3RhdGlv",
            "bkRlZ3JlZXMYBiABKAJCFqoCE1VuaXR5LlJlZmxlY3QuTW9kZWxiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Unity.Reflect.Model.ColorReflection.Descriptor, global::Unity.Reflect.Model.MathematicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Unity.Reflect.Model.SyncMaterial), global::Unity.Reflect.Model.SyncMaterial.Parser, new[]{ "Name", "Tint", "AlbedoColor", "AlbedoMap", "AlbedoFade", "Alpha", "AlphaMap", "NormalMap", "NormalScale", "CutoutMap", "CutoutThreshold", "Glossiness", "GlossinessMap", "Metallic", "MetallicMap", "Emission", "EmissionTemperature", "EmissionMap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Unity.Reflect.Model.SyncMap), global::Unity.Reflect.Model.SyncMap.Parser, new[]{ "Texture", "Offset", "Tiling", "Brightness", "Invert", "RotationDegrees" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SyncMaterial : pb::IMessage<SyncMaterial> {
    private static readonly pb::MessageParser<SyncMaterial> _parser = new pb::MessageParser<SyncMaterial>(() => new SyncMaterial());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncMaterial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Unity.Reflect.Model.MaterialReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMaterial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMaterial(SyncMaterial other) : this() {
      name_ = other.name_;
      tint_ = other.tint_ != null ? other.tint_.Clone() : null;
      albedoColor_ = other.albedoColor_ != null ? other.albedoColor_.Clone() : null;
      albedoMap_ = other.albedoMap_ != null ? other.albedoMap_.Clone() : null;
      albedoFade_ = other.albedoFade_;
      alpha_ = other.alpha_;
      alphaMap_ = other.alphaMap_ != null ? other.alphaMap_.Clone() : null;
      normalMap_ = other.normalMap_ != null ? other.normalMap_.Clone() : null;
      normalScale_ = other.normalScale_;
      cutoutMap_ = other.cutoutMap_ != null ? other.cutoutMap_.Clone() : null;
      cutoutThreshold_ = other.cutoutThreshold_;
      glossiness_ = other.glossiness_;
      glossinessMap_ = other.glossinessMap_ != null ? other.glossinessMap_.Clone() : null;
      metallic_ = other.metallic_;
      metallicMap_ = other.metallicMap_ != null ? other.metallicMap_.Clone() : null;
      emission_ = other.emission_ != null ? other.emission_.Clone() : null;
      emissionTemperature_ = other.emissionTemperature_;
      emissionMap_ = other.emissionMap_ != null ? other.emissionMap_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMaterial Clone() {
      return new SyncMaterial(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tint" field.</summary>
    public const int TintFieldNumber = 2;
    private global::Unity.Reflect.Model.SyncColor tint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncColor Tint {
      get { return tint_; }
      set {
        tint_ = value;
      }
    }

    /// <summary>Field number for the "albedoColor" field.</summary>
    public const int AlbedoColorFieldNumber = 3;
    private global::Unity.Reflect.Model.SyncColor albedoColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncColor AlbedoColor {
      get { return albedoColor_; }
      set {
        albedoColor_ = value;
      }
    }

    /// <summary>Field number for the "albedoMap" field.</summary>
    public const int AlbedoMapFieldNumber = 4;
    private global::Unity.Reflect.Model.SyncMap albedoMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap AlbedoMap {
      get { return albedoMap_; }
      set {
        albedoMap_ = value;
      }
    }

    /// <summary>Field number for the "albedoFade" field.</summary>
    public const int AlbedoFadeFieldNumber = 5;
    private float albedoFade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AlbedoFade {
      get { return albedoFade_; }
      set {
        albedoFade_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 6;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "alphaMap" field.</summary>
    public const int AlphaMapFieldNumber = 7;
    private global::Unity.Reflect.Model.SyncMap alphaMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap AlphaMap {
      get { return alphaMap_; }
      set {
        alphaMap_ = value;
      }
    }

    /// <summary>Field number for the "normalMap" field.</summary>
    public const int NormalMapFieldNumber = 8;
    private global::Unity.Reflect.Model.SyncMap normalMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap NormalMap {
      get { return normalMap_; }
      set {
        normalMap_ = value;
      }
    }

    /// <summary>Field number for the "normalScale" field.</summary>
    public const int NormalScaleFieldNumber = 9;
    private float normalScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalScale {
      get { return normalScale_; }
      set {
        normalScale_ = value;
      }
    }

    /// <summary>Field number for the "cutoutMap" field.</summary>
    public const int CutoutMapFieldNumber = 10;
    private global::Unity.Reflect.Model.SyncMap cutoutMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap CutoutMap {
      get { return cutoutMap_; }
      set {
        cutoutMap_ = value;
      }
    }

    /// <summary>Field number for the "cutoutThreshold" field.</summary>
    public const int CutoutThresholdFieldNumber = 11;
    private float cutoutThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CutoutThreshold {
      get { return cutoutThreshold_; }
      set {
        cutoutThreshold_ = value;
      }
    }

    /// <summary>Field number for the "glossiness" field.</summary>
    public const int GlossinessFieldNumber = 12;
    private float glossiness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Glossiness {
      get { return glossiness_; }
      set {
        glossiness_ = value;
      }
    }

    /// <summary>Field number for the "glossinessMap" field.</summary>
    public const int GlossinessMapFieldNumber = 13;
    private global::Unity.Reflect.Model.SyncMap glossinessMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap GlossinessMap {
      get { return glossinessMap_; }
      set {
        glossinessMap_ = value;
      }
    }

    /// <summary>Field number for the "metallic" field.</summary>
    public const int MetallicFieldNumber = 14;
    private float metallic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Metallic {
      get { return metallic_; }
      set {
        metallic_ = value;
      }
    }

    /// <summary>Field number for the "metallicMap" field.</summary>
    public const int MetallicMapFieldNumber = 15;
    private global::Unity.Reflect.Model.SyncMap metallicMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap MetallicMap {
      get { return metallicMap_; }
      set {
        metallicMap_ = value;
      }
    }

    /// <summary>Field number for the "emission" field.</summary>
    public const int EmissionFieldNumber = 16;
    private global::Unity.Reflect.Model.SyncColor emission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncColor Emission {
      get { return emission_; }
      set {
        emission_ = value;
      }
    }

    /// <summary>Field number for the "emissionTemperature" field.</summary>
    public const int EmissionTemperatureFieldNumber = 17;
    private float emissionTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EmissionTemperature {
      get { return emissionTemperature_; }
      set {
        emissionTemperature_ = value;
      }
    }

    /// <summary>Field number for the "emissionMap" field.</summary>
    public const int EmissionMapFieldNumber = 18;
    private global::Unity.Reflect.Model.SyncMap emissionMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncMap EmissionMap {
      get { return emissionMap_; }
      set {
        emissionMap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncMaterial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncMaterial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Tint, other.Tint)) return false;
      if (!object.Equals(AlbedoColor, other.AlbedoColor)) return false;
      if (!object.Equals(AlbedoMap, other.AlbedoMap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlbedoFade, other.AlbedoFade)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!object.Equals(AlphaMap, other.AlphaMap)) return false;
      if (!object.Equals(NormalMap, other.NormalMap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalScale, other.NormalScale)) return false;
      if (!object.Equals(CutoutMap, other.CutoutMap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CutoutThreshold, other.CutoutThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Glossiness, other.Glossiness)) return false;
      if (!object.Equals(GlossinessMap, other.GlossinessMap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Metallic, other.Metallic)) return false;
      if (!object.Equals(MetallicMap, other.MetallicMap)) return false;
      if (!object.Equals(Emission, other.Emission)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EmissionTemperature, other.EmissionTemperature)) return false;
      if (!object.Equals(EmissionMap, other.EmissionMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (tint_ != null) hash ^= Tint.GetHashCode();
      if (albedoColor_ != null) hash ^= AlbedoColor.GetHashCode();
      if (albedoMap_ != null) hash ^= AlbedoMap.GetHashCode();
      if (AlbedoFade != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlbedoFade);
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (alphaMap_ != null) hash ^= AlphaMap.GetHashCode();
      if (normalMap_ != null) hash ^= NormalMap.GetHashCode();
      if (NormalScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalScale);
      if (cutoutMap_ != null) hash ^= CutoutMap.GetHashCode();
      if (CutoutThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CutoutThreshold);
      if (Glossiness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Glossiness);
      if (glossinessMap_ != null) hash ^= GlossinessMap.GetHashCode();
      if (Metallic != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Metallic);
      if (metallicMap_ != null) hash ^= MetallicMap.GetHashCode();
      if (emission_ != null) hash ^= Emission.GetHashCode();
      if (EmissionTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EmissionTemperature);
      if (emissionMap_ != null) hash ^= EmissionMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (tint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tint);
      }
      if (albedoColor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AlbedoColor);
      }
      if (albedoMap_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AlbedoMap);
      }
      if (AlbedoFade != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AlbedoFade);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Alpha);
      }
      if (alphaMap_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AlphaMap);
      }
      if (normalMap_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NormalMap);
      }
      if (NormalScale != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(NormalScale);
      }
      if (cutoutMap_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CutoutMap);
      }
      if (CutoutThreshold != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(CutoutThreshold);
      }
      if (Glossiness != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Glossiness);
      }
      if (glossinessMap_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GlossinessMap);
      }
      if (Metallic != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Metallic);
      }
      if (metallicMap_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(MetallicMap);
      }
      if (emission_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Emission);
      }
      if (EmissionTemperature != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(EmissionTemperature);
      }
      if (emissionMap_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(EmissionMap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (tint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tint);
      }
      if (albedoColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlbedoColor);
      }
      if (albedoMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlbedoMap);
      }
      if (AlbedoFade != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (alphaMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlphaMap);
      }
      if (normalMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalMap);
      }
      if (NormalScale != 0F) {
        size += 1 + 4;
      }
      if (cutoutMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CutoutMap);
      }
      if (CutoutThreshold != 0F) {
        size += 1 + 4;
      }
      if (Glossiness != 0F) {
        size += 1 + 4;
      }
      if (glossinessMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlossinessMap);
      }
      if (Metallic != 0F) {
        size += 1 + 4;
      }
      if (metallicMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetallicMap);
      }
      if (emission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Emission);
      }
      if (EmissionTemperature != 0F) {
        size += 2 + 4;
      }
      if (emissionMap_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EmissionMap);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncMaterial other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.tint_ != null) {
        if (tint_ == null) {
          Tint = new global::Unity.Reflect.Model.SyncColor();
        }
        Tint.MergeFrom(other.Tint);
      }
      if (other.albedoColor_ != null) {
        if (albedoColor_ == null) {
          AlbedoColor = new global::Unity.Reflect.Model.SyncColor();
        }
        AlbedoColor.MergeFrom(other.AlbedoColor);
      }
      if (other.albedoMap_ != null) {
        if (albedoMap_ == null) {
          AlbedoMap = new global::Unity.Reflect.Model.SyncMap();
        }
        AlbedoMap.MergeFrom(other.AlbedoMap);
      }
      if (other.AlbedoFade != 0F) {
        AlbedoFade = other.AlbedoFade;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.alphaMap_ != null) {
        if (alphaMap_ == null) {
          AlphaMap = new global::Unity.Reflect.Model.SyncMap();
        }
        AlphaMap.MergeFrom(other.AlphaMap);
      }
      if (other.normalMap_ != null) {
        if (normalMap_ == null) {
          NormalMap = new global::Unity.Reflect.Model.SyncMap();
        }
        NormalMap.MergeFrom(other.NormalMap);
      }
      if (other.NormalScale != 0F) {
        NormalScale = other.NormalScale;
      }
      if (other.cutoutMap_ != null) {
        if (cutoutMap_ == null) {
          CutoutMap = new global::Unity.Reflect.Model.SyncMap();
        }
        CutoutMap.MergeFrom(other.CutoutMap);
      }
      if (other.CutoutThreshold != 0F) {
        CutoutThreshold = other.CutoutThreshold;
      }
      if (other.Glossiness != 0F) {
        Glossiness = other.Glossiness;
      }
      if (other.glossinessMap_ != null) {
        if (glossinessMap_ == null) {
          GlossinessMap = new global::Unity.Reflect.Model.SyncMap();
        }
        GlossinessMap.MergeFrom(other.GlossinessMap);
      }
      if (other.Metallic != 0F) {
        Metallic = other.Metallic;
      }
      if (other.metallicMap_ != null) {
        if (metallicMap_ == null) {
          MetallicMap = new global::Unity.Reflect.Model.SyncMap();
        }
        MetallicMap.MergeFrom(other.MetallicMap);
      }
      if (other.emission_ != null) {
        if (emission_ == null) {
          Emission = new global::Unity.Reflect.Model.SyncColor();
        }
        Emission.MergeFrom(other.Emission);
      }
      if (other.EmissionTemperature != 0F) {
        EmissionTemperature = other.EmissionTemperature;
      }
      if (other.emissionMap_ != null) {
        if (emissionMap_ == null) {
          EmissionMap = new global::Unity.Reflect.Model.SyncMap();
        }
        EmissionMap.MergeFrom(other.EmissionMap);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (tint_ == null) {
              Tint = new global::Unity.Reflect.Model.SyncColor();
            }
            input.ReadMessage(Tint);
            break;
          }
          case 26: {
            if (albedoColor_ == null) {
              AlbedoColor = new global::Unity.Reflect.Model.SyncColor();
            }
            input.ReadMessage(AlbedoColor);
            break;
          }
          case 34: {
            if (albedoMap_ == null) {
              AlbedoMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(AlbedoMap);
            break;
          }
          case 45: {
            AlbedoFade = input.ReadFloat();
            break;
          }
          case 53: {
            Alpha = input.ReadFloat();
            break;
          }
          case 58: {
            if (alphaMap_ == null) {
              AlphaMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(AlphaMap);
            break;
          }
          case 66: {
            if (normalMap_ == null) {
              NormalMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(NormalMap);
            break;
          }
          case 77: {
            NormalScale = input.ReadFloat();
            break;
          }
          case 82: {
            if (cutoutMap_ == null) {
              CutoutMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(CutoutMap);
            break;
          }
          case 93: {
            CutoutThreshold = input.ReadFloat();
            break;
          }
          case 101: {
            Glossiness = input.ReadFloat();
            break;
          }
          case 106: {
            if (glossinessMap_ == null) {
              GlossinessMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(GlossinessMap);
            break;
          }
          case 117: {
            Metallic = input.ReadFloat();
            break;
          }
          case 122: {
            if (metallicMap_ == null) {
              MetallicMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(MetallicMap);
            break;
          }
          case 130: {
            if (emission_ == null) {
              Emission = new global::Unity.Reflect.Model.SyncColor();
            }
            input.ReadMessage(Emission);
            break;
          }
          case 141: {
            EmissionTemperature = input.ReadFloat();
            break;
          }
          case 146: {
            if (emissionMap_ == null) {
              EmissionMap = new global::Unity.Reflect.Model.SyncMap();
            }
            input.ReadMessage(EmissionMap);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncMap : pb::IMessage<SyncMap> {
    private static readonly pb::MessageParser<SyncMap> _parser = new pb::MessageParser<SyncMap>(() => new SyncMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Unity.Reflect.Model.MaterialReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMap(SyncMap other) : this() {
      texture_ = other.texture_;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      tiling_ = other.tiling_ != null ? other.tiling_.Clone() : null;
      brightness_ = other.brightness_;
      invert_ = other.invert_;
      rotationDegrees_ = other.rotationDegrees_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMap Clone() {
      return new SyncMap(this);
    }

    /// <summary>Field number for the "texture" field.</summary>
    public const int TextureFieldNumber = 1;
    private string texture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Texture {
      get { return texture_; }
      set {
        texture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private global::Unity.Reflect.Model.SyncFloat2 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncFloat2 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "tiling" field.</summary>
    public const int TilingFieldNumber = 3;
    private global::Unity.Reflect.Model.SyncFloat2 tiling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncFloat2 Tiling {
      get { return tiling_; }
      set {
        tiling_ = value;
      }
    }

    /// <summary>Field number for the "brightness" field.</summary>
    public const int BrightnessFieldNumber = 4;
    private float brightness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Brightness {
      get { return brightness_; }
      set {
        brightness_ = value;
      }
    }

    /// <summary>Field number for the "invert" field.</summary>
    public const int InvertFieldNumber = 5;
    private bool invert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Invert {
      get { return invert_; }
      set {
        invert_ = value;
      }
    }

    /// <summary>Field number for the "rotationDegrees" field.</summary>
    public const int RotationDegreesFieldNumber = 6;
    private float rotationDegrees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationDegrees {
      get { return rotationDegrees_; }
      set {
        rotationDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Texture != other.Texture) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!object.Equals(Tiling, other.Tiling)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Brightness, other.Brightness)) return false;
      if (Invert != other.Invert) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationDegrees, other.RotationDegrees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Texture.Length != 0) hash ^= Texture.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (tiling_ != null) hash ^= Tiling.GetHashCode();
      if (Brightness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Brightness);
      if (Invert != false) hash ^= Invert.GetHashCode();
      if (RotationDegrees != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationDegrees);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Texture.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Texture);
      }
      if (offset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (tiling_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Tiling);
      }
      if (Brightness != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Brightness);
      }
      if (Invert != false) {
        output.WriteRawTag(40);
        output.WriteBool(Invert);
      }
      if (RotationDegrees != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotationDegrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Texture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Texture);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (tiling_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tiling);
      }
      if (Brightness != 0F) {
        size += 1 + 4;
      }
      if (Invert != false) {
        size += 1 + 1;
      }
      if (RotationDegrees != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncMap other) {
      if (other == null) {
        return;
      }
      if (other.Texture.Length != 0) {
        Texture = other.Texture;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Unity.Reflect.Model.SyncFloat2();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.tiling_ != null) {
        if (tiling_ == null) {
          Tiling = new global::Unity.Reflect.Model.SyncFloat2();
        }
        Tiling.MergeFrom(other.Tiling);
      }
      if (other.Brightness != 0F) {
        Brightness = other.Brightness;
      }
      if (other.Invert != false) {
        Invert = other.Invert;
      }
      if (other.RotationDegrees != 0F) {
        RotationDegrees = other.RotationDegrees;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Texture = input.ReadString();
            break;
          }
          case 18: {
            if (offset_ == null) {
              Offset = new global::Unity.Reflect.Model.SyncFloat2();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 26: {
            if (tiling_ == null) {
              Tiling = new global::Unity.Reflect.Model.SyncFloat2();
            }
            input.ReadMessage(Tiling);
            break;
          }
          case 37: {
            Brightness = input.ReadFloat();
            break;
          }
          case 40: {
            Invert = input.ReadBool();
            break;
          }
          case 53: {
            RotationDegrees = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
