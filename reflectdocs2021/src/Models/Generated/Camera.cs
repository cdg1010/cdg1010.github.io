// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Unity.Reflect.Model {

  /// <summary>Holder for reflection information generated from Camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for Camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDYW1lcmEucHJvdG8SB1JlZmxlY3QaEU1hdGhlbWF0aWNzLnByb3RvItsB",
            "CgpTeW5jQ2FtZXJhEgwKBG5hbWUYASABKAkSKQoJdHJhbnNmb3JtGAIgASgL",
            "MhYuUmVmbGVjdC5TeW5jVHJhbnNmb3JtEhQKDG9ydGhvZ3JhcGhpYxgDIAEo",
            "CBIMCgRuZWFyGAQgASgCEgsKA2ZhchgFIAEoAhIMCgRsZWZ0GAYgASgCEg0K",
            "BXJpZ2h0GAcgASgCEg4KBmJvdHRvbRgIIAEoAhILCgN0b3AYCSABKAISDgoG",
            "YXNwZWN0GAogASgCEgwKBHNpemUYCyABKAISCwoDZm92GAwgASgCQhaqAhNV",
            "bml0eS5SZWZsZWN0Lk1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Unity.Reflect.Model.MathematicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Unity.Reflect.Model.SyncCamera), global::Unity.Reflect.Model.SyncCamera.Parser, new[]{ "Name", "Transform", "Orthographic", "Near", "Far", "Left", "Right", "Bottom", "Top", "Aspect", "Size", "Fov" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SyncCamera : pb::IMessage<SyncCamera> {
    private static readonly pb::MessageParser<SyncCamera> _parser = new pb::MessageParser<SyncCamera>(() => new SyncCamera());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncCamera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Unity.Reflect.Model.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncCamera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncCamera(SyncCamera other) : this() {
      name_ = other.name_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      orthographic_ = other.orthographic_;
      near_ = other.near_;
      far_ = other.far_;
      left_ = other.left_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      top_ = other.top_;
      aspect_ = other.aspect_;
      size_ = other.size_;
      fov_ = other.fov_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncCamera Clone() {
      return new SyncCamera(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 2;
    private global::Unity.Reflect.Model.SyncTransform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Unity.Reflect.Model.SyncTransform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "orthographic" field.</summary>
    public const int OrthographicFieldNumber = 3;
    private bool orthographic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Orthographic {
      get { return orthographic_; }
      set {
        orthographic_ = value;
      }
    }

    /// <summary>Field number for the "near" field.</summary>
    public const int NearFieldNumber = 4;
    private float near_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Near {
      get { return near_; }
      set {
        near_ = value;
      }
    }

    /// <summary>Field number for the "far" field.</summary>
    public const int FarFieldNumber = 5;
    private float far_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Far {
      get { return far_; }
      set {
        far_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 6;
    private float left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 7;
    private float right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 8;
    private float bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 9;
    private float top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "aspect" field.</summary>
    public const int AspectFieldNumber = 10;
    private float aspect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Aspect {
      get { return aspect_; }
      set {
        aspect_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 11;
    private float size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 12;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncCamera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncCamera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (Orthographic != other.Orthographic) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Near, other.Near)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Far, other.Far)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Left, other.Left)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Right, other.Right)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bottom, other.Bottom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top, other.Top)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Aspect, other.Aspect)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Size, other.Size)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fov, other.Fov)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (Orthographic != false) hash ^= Orthographic.GetHashCode();
      if (Near != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Near);
      if (Far != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Far);
      if (Left != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Left);
      if (Right != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Right);
      if (Bottom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bottom);
      if (Top != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top);
      if (Aspect != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Aspect);
      if (Size != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Size);
      if (Fov != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fov);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (transform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transform);
      }
      if (Orthographic != false) {
        output.WriteRawTag(24);
        output.WriteBool(Orthographic);
      }
      if (Near != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Near);
      }
      if (Far != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Far);
      }
      if (Left != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Left);
      }
      if (Right != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Right);
      }
      if (Bottom != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Bottom);
      }
      if (Top != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Top);
      }
      if (Aspect != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Aspect);
      }
      if (Size != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Size);
      }
      if (Fov != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Fov);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (Orthographic != false) {
        size += 1 + 1;
      }
      if (Near != 0F) {
        size += 1 + 4;
      }
      if (Far != 0F) {
        size += 1 + 4;
      }
      if (Left != 0F) {
        size += 1 + 4;
      }
      if (Right != 0F) {
        size += 1 + 4;
      }
      if (Bottom != 0F) {
        size += 1 + 4;
      }
      if (Top != 0F) {
        size += 1 + 4;
      }
      if (Aspect != 0F) {
        size += 1 + 4;
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      if (Fov != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncCamera other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Unity.Reflect.Model.SyncTransform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.Orthographic != false) {
        Orthographic = other.Orthographic;
      }
      if (other.Near != 0F) {
        Near = other.Near;
      }
      if (other.Far != 0F) {
        Far = other.Far;
      }
      if (other.Left != 0F) {
        Left = other.Left;
      }
      if (other.Right != 0F) {
        Right = other.Right;
      }
      if (other.Bottom != 0F) {
        Bottom = other.Bottom;
      }
      if (other.Top != 0F) {
        Top = other.Top;
      }
      if (other.Aspect != 0F) {
        Aspect = other.Aspect;
      }
      if (other.Size != 0F) {
        Size = other.Size;
      }
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (transform_ == null) {
              Transform = new global::Unity.Reflect.Model.SyncTransform();
            }
            input.ReadMessage(Transform);
            break;
          }
          case 24: {
            Orthographic = input.ReadBool();
            break;
          }
          case 37: {
            Near = input.ReadFloat();
            break;
          }
          case 45: {
            Far = input.ReadFloat();
            break;
          }
          case 53: {
            Left = input.ReadFloat();
            break;
          }
          case 61: {
            Right = input.ReadFloat();
            break;
          }
          case 69: {
            Bottom = input.ReadFloat();
            break;
          }
          case 77: {
            Top = input.ReadFloat();
            break;
          }
          case 85: {
            Aspect = input.ReadFloat();
            break;
          }
          case 93: {
            Size = input.ReadFloat();
            break;
          }
          case 101: {
            Fov = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
