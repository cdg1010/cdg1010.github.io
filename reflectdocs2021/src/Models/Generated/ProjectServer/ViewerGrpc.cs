// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProjectServer/Viewer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Unity.Reflect.ProjectServer.Services.Viewer {
  /// <summary>
  /// This service requires the client to provide an valid ID token. The client
  /// is not required to "AuthenticationService.Signin()" and does not need
  /// the Reflect entitlement
  /// </summary>
  public static partial class ViewerService
  {
    static readonly string __ServiceName = "Reflect.ViewerService";

    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.Empty> __Marshaller_Reflect_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse> __Marshaller_Reflect_ListProjectsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Unity.Reflect.ProjectServer.Services.Empty, global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse> __Method_ListProjects = new grpc::Method<global::Unity.Reflect.ProjectServer.Services.Empty, global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProjects",
        __Marshaller_Reflect_Empty,
        __Marshaller_Reflect_ListProjectsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Unity.Reflect.ProjectServer.Services.Viewer.ViewerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ViewerService</summary>
    [grpc::BindServiceMethod(typeof(ViewerService), "BindService")]
    public abstract partial class ViewerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse> ListProjects(global::Unity.Reflect.ProjectServer.Services.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ViewerService</summary>
    public partial class ViewerServiceClient : grpc::ClientBase<ViewerServiceClient>
    {
      /// <summary>Creates a new client for ViewerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ViewerServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ViewerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ViewerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ViewerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ViewerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse ListProjects(global::Unity.Reflect.ProjectServer.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse ListProjects(global::Unity.Reflect.ProjectServer.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProjects, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse> ListProjectsAsync(global::Unity.Reflect.ProjectServer.Services.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse> ListProjectsAsync(global::Unity.Reflect.ProjectServer.Services.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ViewerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ViewerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ViewerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListProjects, serviceImpl.ListProjects).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ViewerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListProjects, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Unity.Reflect.ProjectServer.Services.Empty, global::Unity.Reflect.ProjectServer.Services.Viewer.ListProjectsResponse>(serviceImpl.ListProjects));
    }

  }
}
#endregion
